#pragma once

#include <string>
#include "llvm/ADT/Statistic.h"
#include "meminstrument/pass/Util.h"

STATISTIC(FailingHotnessLookUps, "The # of failing hotness lookups");

// this file is autogenerated (in a very ugly way for an even more ugly purpose)

namespace {

uint64_t getHotnessIndex(const std::string &ModuleName, const std::string &FunctionName, uint64_t AccessId) {

  if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Linpack/linpack-pc.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 5000;
      case 11: return 5000;
      case 12: return 1200;
      case 13: return 1200;
      case 14: return 1200;
      case 15: return 1200;
      case 16: return 1200;
      case 17: return 1200;
      case 18: return 400;
      case 19: return 400;
      case 20: return 400;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 10000;
      case 34: return 1200;
      case 35: return 1200;
      case 36: return 1200;
      case 37: return 1200;
      case 38: return 1200;
      case 39: return 1200;
      case 40: return 400;
      case 41: return 400;
      case 42: return 400;
      case 43: return 1;
      case 44: return 12;
      case 45: return 12;
      case 46: return 12;
      case 47: return 12;
      case 48: return 4;
      case 49: return 4;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      case 53: return 100;
      case 54: return 100;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      case 58: return 1;
      case 59: return 1;
      case 60: return 1;
      case 61: return 1;
      case 62: return 1;
      case 63: return 1;
      case 64: return 1;
      case 65: return 1;
      case 66: return 1;
      case 67: return 1;
      case 68: return 1;
      case 69: return 1;
      case 70: return 1;
      case 71: return 1;
      case 72: return 500000;
      case 73: return 500000;
      case 74: return 120000;
      case 75: return 120000;
      case 76: return 120000;
      case 77: return 120000;
      case 78: return 120000;
      case 79: return 120000;
      case 80: return 40000;
      case 81: return 40000;
      case 82: return 40000;
      case 83: return 3;
      case 84: return 3;
      case 85: return 3;
      case 86: return 700;
      case 87: return 700;
      case 88: return 3500000;
      case 89: return 3500000;
      case 90: return 840000;
      case 91: return 840000;
      case 92: return 840000;
      case 93: return 840000;
      case 94: return 840000;
      case 95: return 840000;
      case 96: return 280000;
      case 97: return 280000;
      case 98: return 280000;
      case 99: return 700;
      case 100: return 700;
      case 101: return 700;
      case 102: return 3;
      case 103: return 3;
      case 104: return 2;
      case 105: return 1;
      case 106: return 1;
      case 107: return 1;
      case 108: return 1;
      case 109: return 1;
      case 110: return 1;
      case 111: return 1;
      case 112: return 1;
      case 113: return 1;
      case 114: return 5;
      case 115: return 5;
      case 116: return 5000;
      case 117: return 5000;
      case 118: return 25000000;
      case 119: return 25000000;
      case 120: return 6000000;
      case 121: return 6000000;
      case 122: return 6000000;
      case 123: return 6000000;
      case 124: return 6000000;
      case 125: return 6000000;
      case 126: return 2000000;
      case 127: return 2000000;
      case 128: return 2000000;
      case 129: return 5000;
      case 130: return 5000;
      case 131: return 5000;
      case 132: return 5;
      case 133: return 5;
      case 134: return 5;
      case 135: return 5;
      case 136: return 5;
      case 137: return 5000;
      case 138: return 5000;
      case 139: return 5000;
      case 140: return 5000;
      case 141: return 5000;
      case 142: return 5;
      case 143: return 5;
      case 144: return 5;
      case 145: return 5;
      case 146: return 5;
      case 147: return 5;
      case 148: return 5;
      case 149: return 5;
      case 150: return 1;
      case 151: return 1;
      case 152: return 1;
      case 153: return 1;
      case 154: return 1;
      case 155: return 1;
      case 156: return 2000000;
      case 157: return 2000000;
      case 158: return 480000;
      case 159: return 480000;
      case 160: return 480000;
      case 161: return 480000;
      case 162: return 480000;
      case 163: return 480000;
      case 164: return 160000;
      case 165: return 160000;
      case 166: return 160000;
      case 167: return 1;
      case 168: return 1;
      case 169: return 1;
      case 170: return 1;
      case 171: return 1;
      case 172: return 1;
      case 173: return 1;
      case 174: return 1;
      case 175: return 1;
      case 176: return 5;
      case 177: return 5;
      case 178: return 5000;
      case 179: return 5000;
      case 180: return 25000000;
      case 181: return 25000000;
      case 182: return 6000000;
      case 183: return 6000000;
      case 184: return 6000000;
      case 185: return 6000000;
      case 186: return 6000000;
      case 187: return 6000000;
      case 188: return 2000000;
      case 189: return 2000000;
      case 190: return 2000000;
      case 191: return 5000;
      case 192: return 5000;
      case 193: return 5000;
      case 194: return 5;
      case 195: return 5;
      case 196: return 5;
      case 197: return 5;
      case 198: return 5;
      case 199: return 5000;
      case 200: return 5000;
      case 201: return 5000;
      case 202: return 5000;
      case 203: return 5000;
      case 204: return 5;
      case 205: return 5;
      case 206: return 5;
      case 207: return 5;
      case 208: return 5;
      case 209: return 5;
      case 210: return 5;
      case 211: return 5;
      case 212: return 1;
      case 213: return 1;
      case 214: return 1;
      case 215: return 1;
      case 216: return 1;
      case 217: return 1;
      case 218: return 1;
      case 219: return 1000000;
      case 220: return 1000000;
      case 221: return 240000;
      case 222: return 240000;
      case 223: return 240000;
      case 224: return 240000;
      case 225: return 240000;
      case 226: return 240000;
      case 227: return 80000;
      case 228: return 80000;
      case 229: return 80000;
      case 230: return 1;
      case 231: return 1;
      case 232: return 1;
      case 233: return 1;
      case 234: return 1;
      case 235: return 2000000;
      case 236: return 2000000;
      case 237: return 480000;
      case 238: return 480000;
      case 239: return 480000;
      case 240: return 480000;
      case 241: return 480000;
      case 242: return 480000;
      case 243: return 160000;
      case 244: return 160000;
      case 245: return 160000;
      case 246: return 1;
      case 247: return 1;
      case 248: return 1;
      case 249: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "matgen") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "dgefa") {
      switch(AccessId) {
      case 0: return 10701;
      case 1: return 1059399;
      case 2: return 12841200;
      case 3: return 12841200;
      case 4: return 12841200;
      case 5: return 12841200;
      case 6: return 1605150;
      case 7: return 1059399;
      case 8: return 1059399;
      case 9: return 64206;
      case 10: return 995193;
      case 11: return 995193;
      case 12: return 995193;
      case 13: return 6163776;
      case 14: return 6163776;
      case 15: return 6163776;
      case 16: return 6163776;
      case 17: return 3659742;
      case 18: return 3659742;
      case 19: return 50872554;
      case 20: return 50872554;
      case 21: return 50872554;
      case 22: return 50872554;
      case 23: return 403459803;
      case 24: return 403459803;
      case 25: return 403459803;
      case 26: return 403459803;
      case 27: return 403459803;
      case 28: return 403459803;
      case 29: return 79187400;
      case 30: return 79187400;
      case 31: return 79187400;
      case 32: return 24045147;
      case 33: return 24045147;
      case 34: return 24045147;
      case 35: return 24045147;
      case 36: return 24045147;
      case 37: return 24045147;
      case 38: return 24045147;
      case 39: return 24045147;
      case 40: return 24045147;
      case 41: return 24045147;
      case 42: return 24045147;
      case 43: return 24045147;
      case 44: return 2097396;
      case 45: return 12937509;
      case 46: return 12937509;
      case 47: return 12937509;
      case 48: return 12937509;
      case 49: return 12937509;
      case 50: return 12937509;
      case 51: return 1605150;
      case 52: return 1605150;
      case 53: return 1605150;
      case 54: return 1380429;
      case 55: return 1380429;
      case 56: return 1380429;
      case 57: return 1380429;
      case 58: return 1380429;
      case 59: return 1380429;
      case 60: return 1380429;
      case 61: return 1380429;
      case 62: return 1380429;
      case 63: return 1380429;
      case 64: return 1380429;
      case 65: return 1380429;
      case 66: return 0;
      case 67: return 10701;
      case 68: return 10701;
      case 69: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "dgesl") {
      switch(AccessId) {
      case 0: return 990099;
      case 1: return 990099;
      case 2: return 930093;
      case 3: return 930093;
      case 4: return 930093;
      case 5: return 5760576;
      case 6: return 5760576;
      case 7: return 5760576;
      case 8: return 5760576;
      case 9: return 5760576;
      case 10: return 5760576;
      case 11: return 1500150;
      case 12: return 1500150;
      case 13: return 1500150;
      case 14: return 480048;
      case 15: return 480048;
      case 16: return 480048;
      case 17: return 480048;
      case 18: return 480048;
      case 19: return 480048;
      case 20: return 480048;
      case 21: return 480048;
      case 22: return 480048;
      case 23: return 480048;
      case 24: return 480048;
      case 25: return 480048;
      case 26: return 1000100;
      case 27: return 1000100;
      case 28: return 1000100;
      case 29: return 5760576;
      case 30: return 5760576;
      case 31: return 5760576;
      case 32: return 5760576;
      case 33: return 5760576;
      case 34: return 5760576;
      case 35: return 1500150;
      case 36: return 1500150;
      case 37: return 1500150;
      case 38: return 480048;
      case 39: return 480048;
      case 40: return 480048;
      case 41: return 480048;
      case 42: return 480048;
      case 43: return 480048;
      case 44: return 480048;
      case 45: return 480048;
      case 46: return 480048;
      case 47: return 480048;
      case 48: return 480048;
      case 49: return 480048;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      case 62: return 0;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 0;
      case 69: return 0;
      case 70: return 0;
      case 71: return 0;
      case 72: return 0;
      case 73: return 0;
      case 74: return 0;
      case 75: return 0;
      case 76: return 0;
      case 77: return 0;
      case 78: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "dmxpy") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      case 47: return 25;
      case 48: return 25;
      case 49: return 25;
      case 50: return 25;
      case 51: return 25;
      case 52: return 25;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      case 62: return 0;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 0;
      case 69: return 0;
      case 70: return 0;
      case 71: return 0;
      case 72: return 0;
      case 73: return 0;
      case 74: return 0;
      case 75: return 0;
      case 76: return 0;
      case 77: return 0;
      case 78: return 0;
      case 79: return 0;
      case 80: return 0;
      case 81: return 600;
      case 82: return 600;
      case 83: return 600;
      case 84: return 600;
      case 85: return 600;
      case 86: return 600;
      case 87: return 600;
      case 88: return 600;
      case 89: return 600;
      case 90: return 600;
      case 91: return 600;
      case 92: return 600;
      case 93: return 600;
      case 94: return 600;
      case 95: return 600;
      case 96: return 600;
      case 97: return 600;
      case 98: return 600;
      case 99: return 600;
      case 100: return 600;
      case 101: return 600;
      case 102: return 600;
      case 103: return 600;
      case 104: return 600;
      case 105: return 600;
      case 106: return 600;
      case 107: return 600;
      case 108: return 600;
      case 109: return 600;
      case 110: return 600;
      case 111: return 600;
      case 112: return 600;
      case 113: return 600;
      case 114: return 600;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "idamax") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "dscal") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "daxpy") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "ddot") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc-C++/oopack_v1p8.cpp") {
    if (FunctionName == "_ZNK12MaxBenchmark7c_styleEv") {
      switch(AccessId) {
      case 0: return 15001;
      case 1: return 15001;
      case 2: return 4995333;
      case 3: return 4995333;
      case 4: return 4995333;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK12MaxBenchmark9oop_styleEv") {
      switch(AccessId) {
      case 0: return 15001;
      case 1: return 15001;
      case 2: return 4995333;
      case 3: return 4995333;
      case 4: return 4995333;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK12MaxBenchmark4initEv") {
      switch(AccessId) {
      case 0: return 2000;
      case 1: return 2000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK12MaxBenchmark5checkEiRdS0_") {
      switch(AccessId) {
      case 0: return 2;
      case 1: return 2;
      case 2: return 2;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK15MatrixBenchmark7c_styleEv") {
      switch(AccessId) {
      case 0: return 502500;
      case 1: return 12562500;
      case 2: return 12562500;
      case 3: return 12562500;
      case 4: return 12562500;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK15MatrixBenchmark9oop_styleEv") {
      switch(AccessId) {
      case 0: return 502500;
      case 1: return 12562500;
      case 2: return 12562500;
      case 3: return 12562500;
      case 4: return 12562500;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK15MatrixBenchmark4initEv") {
      switch(AccessId) {
      case 0: return 5000;
      case 1: return 5000;
      case 2: return 5000;
      case 3: return 5000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK15MatrixBenchmark5checkEiRdS0_") {
      switch(AccessId) {
      case 0: return 2;
      case 1: return 2;
      case 2: return 1000;
      case 3: return 1000;
      case 4: return 1000;
      case 5: return 1000;
      case 6: return 1000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK17IteratorBenchmark7c_styleEv") {
      switch(AccessId) {
      case 0: return 20001;
      case 1: return 4000200;
      case 2: return 4000200;
      case 3: return 4000200;
      case 4: return 4000200;
      case 5: return 4000200;
      case 6: return 4000200;
      case 7: return 4000200;
      case 8: return 4000200;
      case 9: return 4000200;
      case 10: return 4000200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK17IteratorBenchmark9oop_styleEv") {
      switch(AccessId) {
      case 0: return 20001;
      case 1: return 4000200;
      case 2: return 4000200;
      case 3: return 4000200;
      case 4: return 4000200;
      case 5: return 4000200;
      case 6: return 4000200;
      case 7: return 4000200;
      case 8: return 4000200;
      case 9: return 4000200;
      case 10: return 4000200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK17IteratorBenchmark4initEv") {
      switch(AccessId) {
      case 0: return 2000;
      case 1: return 2000;
      case 2: return 2000;
      case 3: return 2000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK17IteratorBenchmark5checkEiRdS0_") {
      switch(AccessId) {
      case 0: return 2;
      case 1: return 2;
      case 2: return 2;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK16ComplexBenchmark7c_styleEv") {
      switch(AccessId) {
      case 0: return 1000500;
      case 1: return 1000500;
      case 2: return 1000500;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK16ComplexBenchmark9oop_styleEv") {
      switch(AccessId) {
      case 0: return 1000500;
      case 1: return 1000500;
      case 2: return 1000500;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK16ComplexBenchmark4initEv") {
      switch(AccessId) {
      case 0: return 2000;
      case 1: return 2000;
      case 2: return 2000;
      case 3: return 2000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK16ComplexBenchmark5checkEiRdS0_") {
      switch(AccessId) {
      case 0: return 2;
      case 1: return 2;
      case 2: return 1000;
      case 3: return 1000;
      case 4: return 1000;
      case 5: return 1000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK9Benchmark8time_oneEMS_KFvvEiRdS2_S2_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9Benchmark4findEPKc") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK9Benchmark9time_bothEi") {
      switch(AccessId) {
      case 0: return 4;
      case 1: return 4;
      case 2: return 4;
      case 3: return 4;
      case 4: return 4;
      case 5: return 4;
      case 6: return 37200;
      case 7: return 37200;
      case 8: return 4;
      case 9: return 4;
      case 10: return 4;
      case 11: return 4;
      case 12: return 4;
      case 13: return 4;
      case 14: return 4;
      case 15: return 4;
      case 16: return 37200;
      case 17: return 37200;
      case 18: return 4;
      case 19: return 4;
      case 20: return 4;
      case 21: return 4;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 4;
      case 27: return 4;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z5UsageiPPc") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 2;
      case 16: return 2;
      case 17: return 2;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 4;
      case 22: return 4;
      case 23: return 4;
      case 24: return 3;
      case 25: return 1;
      case 26: return 1;
      case 27: return 3;
      case 28: return 3;
      case 29: return 3;
      case 30: return 2;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_GLOBAL__sub_I_oopack_v1p8.cpp") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc-C++/mandel-text.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 40;
      case 1: return 3120;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc-C++/bigfib.cpp") {
    if (FunctionName == "_ZN9Fibonacci10get_numberEj") {
      switch(AccessId) {
      case 0: return 99999;
      case 1: return 99999;
      case 2: return 1;
      case 3: return 99999;
      case 4: return 99999;
      case 5: return 99999;
      case 6: return 99999;
      case 7: return 99999;
      case 8: return 99999;
      case 9: return 99999;
      case 10: return 99999;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      case 54: return 0;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      case 58: return 1;
      case 59: return 1;
      case 60: return 1;
      case 61: return 1;
      case 62: return 1;
      case 63: return 1;
      case 64: return 1;
      case 65: return 1;
      case 66: return 1;
      case 67: return 1;
      case 68: return 0;
      case 69: return 0;
      case 70: return 49999;
      case 71: return 49999;
      case 72: return 49999;
      case 73: return 49999;
      case 74: return 49999;
      case 75: return 49999;
      case 76: return 49999;
      case 77: return 49999;
      case 78: return 49999;
      case 79: return 49999;
      case 80: return 49999;
      case 81: return 49999;
      case 82: return 0;
      case 83: return 49999;
      case 84: return 49999;
      case 85: return 0;
      case 86: return 0;
      case 87: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt6vectorI6BigIntSaIS0_EE7reserveEm") {
      switch(AccessId) {
      case 0: return 99999;
      case 1: return 99999;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN6BigIntC2ES_S_") {
      switch(AccessId) {
      case 0: return 49999;
      case 1: return 49999;
      case 2: return 49999;
      case 3: return 49999;
      case 4: return 49999;
      case 5: return 49999;
      case 6: return 49999;
      case 7: return 1160;
      case 8: return 0;
      case 9: return 49999;
      case 10: return 49999;
      case 11: return 0;
      case 12: return 49999;
      case 13: return 49999;
      case 14: return 49999;
      case 15: return 49999;
      case 16: return 49999;
      case 17: return 0;
      case 18: return 49999;
      case 19: return 49999;
      case 20: return 49999;
      case 21: return 49999;
      case 22: return 49999;
      case 23: return 49999;
      case 24: return 29048539;
      case 25: return 29048539;
      case 26: return 29048539;
      case 27: return 29048539;
      case 28: return 29048539;
      case 29: return 49999;
      case 30: return 1161;
      case 31: return 1161;
      case 32: return 0;
      case 33: return 1161;
      case 34: return 1161;
      case 35: return 1161;
      case 36: return 1161;
      case 37: return 1161;
      case 38: return 1161;
      case 39: return 1161;
      case 40: return 1161;
      case 41: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK9Fibonacci16show_all_numbersEv") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK9Fibonacci16show_last_numberEv") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1161;
      case 7: return 1161;
      case 8: return 1161;
      case 9: return 1161;
      case 10: return 1161;
      case 11: return 1161;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1161;
      case 20: return 1161;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9Fibonacci11show_numberEm") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z5usagePPc") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      case 62: return 0;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 0;
      case 69: return 0;
      case 70: return 0;
      case 71: return 0;
      case 72: return 0;
      case 73: return 0;
      case 74: return 0;
      case 75: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z5checkB5cxx11iPPc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 1;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 50001;
      case 23: return 1;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 1;
      case 57: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt6vectorImSaImEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPmS1_EEmRKm") {
      switch(AccessId) {
      case 0: return 51159;
      case 1: return 51159;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      case 62: return 0;
      case 63: return 0;
      case 64: return 0;
      case 65: return 51159;
      case 66: return 51159;
      case 67: return 883677;
      case 68: return 883677;
      case 69: return 883677;
      case 70: return 883677;
      case 71: return 883677;
      case 72: return 883677;
      case 73: return 883677;
      case 74: return 883677;
      case 75: return 883677;
      case 76: return 883677;
      case 77: return 883677;
      case 78: return 883677;
      case 79: return 883677;
      case 80: return 883677;
      case 81: return 883677;
      case 82: return 883677;
      case 83: return 173975;
      case 84: return 173975;
      case 85: return 76135;
      case 86: return 51159;
      case 87: return 51159;
      case 88: return 51159;
      case 89: return 51159;
      case 90: return 51159;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIP6BigIntS3_EET0_T_S5_S4_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt6vectorI6BigIntSaIS0_EE17_M_realloc_insertEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc-C++/stepanov_container.cpp") {
    if (FunctionName == "_ZNSt6vectorIdSaIdEED2Ev") {
      switch(AccessId) {
      case 0: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z10array_testPdS_i") {
      switch(AccessId) {
      case 0: return 12;
      case 1: return 12;
      case 2: return 12;
      case 3: return 24;
      case 4: return 12;
      case 5: return 599988;
      case 6: return 599988;
      case 7: return 599988;
      case 8: return 0;
      case 9: return 599988;
      case 10: return 599988;
      case 11: return 599988;
      case 12: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z19vector_pointer_testPdS_i") {
      switch(AccessId) {
      case 0: return 12;
      case 1: return 12;
      case 2: return 12;
      case 3: return 24;
      case 4: return 12;
      case 5: return 599988;
      case 6: return 599988;
      case 7: return 599988;
      case 8: return 0;
      case 9: return 599988;
      case 10: return 599988;
      case 11: return 599988;
      case 12: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z20vector_iterator_testPdS_i") {
      switch(AccessId) {
      case 0: return 12;
      case 1: return 12;
      case 2: return 24;
      case 3: return 24;
      case 4: return 12;
      case 5: return 599988;
      case 6: return 599988;
      case 7: return 599988;
      case 8: return 599988;
      case 9: return 599988;
      case 10: return 0;
      case 11: return 599988;
      case 12: return 599988;
      case 13: return 599988;
      case 14: return 599988;
      case 15: return 599988;
      case 16: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z10deque_testPdS_i") {
      switch(AccessId) {
      case 0: return 12;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 12;
      case 7: return 12;
      case 8: return 12;
      case 9: return 12;
      case 10: return 2400000;
      case 11: return 2400000;
      case 12: return 37500;
      case 13: return 12;
      case 14: return 12;
      case 15: return 12;
      case 16: return 12;
      case 17: return 12;
      case 18: return 12;
      case 19: return 12;
      case 20: return 12;
      case 21: return 12;
      case 22: return 12;
      case 23: return 12;
      case 24: return 12;
      case 25: return 12;
      case 26: return 12;
      case 27: return 12;
      case 28: return 12;
      case 29: return 12;
      case 30: return 12;
      case 31: return 12;
      case 32: return 12;
      case 33: return 12;
      case 34: return 12;
      case 35: return 12;
      case 36: return 12;
      case 37: return 12;
      case 38: return 12;
      case 39: return 0;
      case 40: return 12;
      case 41: return 12;
      case 42: return 0;
      case 43: return 37500;
      case 44: return 2399976;
      case 45: return 2399976;
      case 46: return 18744;
      case 47: return 1199988;
      case 48: return 12;
      case 49: return 12;
      case 50: return 37512;
      case 51: return 12;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z9list_testPdS_i") {
      switch(AccessId) {
      case 0: return 12;
      case 1: return 12;
      case 2: return 12;
      case 3: return 2400000;
      case 4: return 2400000;
      case 5: return 2400000;
      case 6: return 2400000;
      case 7: return 0;
      case 8: return 0;
      case 9: return 12;
      case 10: return 12;
      case 11: return 2399988;
      case 12: return 2399988;
      case 13: return 1200000;
      case 14: return 1200000;
      case 15: return 2399988;
      case 16: return 12;
      case 17: return 1200000;
      case 18: return 0;
      case 19: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt7__cxx114listIdSaIdEE4sortEv") {
      switch(AccessId) {
      case 0: return 12;
      case 1: return 12;
      case 2: return 12;
      case 3: return 12;
      case 4: return 12;
      case 5: return 384;
      case 6: return 384;
      case 7: return 384;
      case 8: return 384;
      case 9: return 384;
      case 10: return 384;
      case 11: return 2400000;
      case 12: return 2400000;
      case 13: return 2400000;
      case 14: return 2400000;
      case 15: return 2400000;
      case 16: return 4799712;
      case 17: return 2399928;
      case 18: return 36715572;
      case 19: return 36715572;
      case 20: return 18358608;
      case 21: return 18356964;
      case 22: return 2399928;
      case 23: return 2399928;
      case 24: return 2399928;
      case 25: return 2399928;
      case 26: return 2399928;
      case 27: return 2399928;
      case 28: return 2399928;
      case 29: return 2399928;
      case 30: return 2400000;
      case 31: return 2400000;
      case 32: return 2400000;
      case 33: return 2400000;
      case 34: return 2400000;
      case 35: return 2399988;
      case 36: return 204;
      case 37: return 204;
      case 38: return 3287172;
      case 39: return 3287172;
      case 40: return 888552;
      case 41: return 2398620;
      case 42: return 204;
      case 43: return 204;
      case 44: return 204;
      case 45: return 204;
      case 46: return 12;
      case 47: return 12;
      case 48: return 12;
      case 49: return 12;
      case 50: return 768;
      case 51: return 0;
      case 52: return 12;
      case 53: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z8set_testPdS_i") {
      switch(AccessId) {
      case 0: return 12;
      case 1: return 12;
      case 2: return 12;
      case 3: return 12;
      case 4: return 12;
      case 5: return 2399988;
      case 6: return 2399988;
      case 7: return 2399988;
      case 8: return 2399892;
      case 9: return 2399880;
      case 10: return 38692728;
      case 11: return 38692728;
      case 12: return 1126632;
      case 13: return 1126512;
      case 14: return 2399772;
      case 15: return 1199988;
      case 16: return 1199988;
      case 17: return 1200000;
      case 18: return 1200000;
      case 19: return 1200000;
      case 20: return 1200000;
      case 21: return 0;
      case 22: return 12;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13multiset_testPdS_i") {
      switch(AccessId) {
      case 0: return 12;
      case 1: return 12;
      case 2: return 12;
      case 3: return 12;
      case 4: return 12;
      case 5: return 12;
      case 6: return 0;
      case 7: return 12;
      case 8: return 2399988;
      case 9: return 2399988;
      case 10: return 1200000;
      case 11: return 1200000;
      case 12: return 12;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z10initializePdS_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z9run_testsi") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 12500;
      case 4: return 12500;
      case 5: return 12500;
      case 6: return 12500;
      case 7: return 12500;
      case 8: return 12500;
      case 9: return 12500;
      case 10: return 12500;
      case 11: return 0;
      case 12: return 12500;
      case 13: return 12500;
      case 14: return 12500;
      case 15: return 12500;
      case 16: return 12500;
      case 17: return 12500;
      case 18: return 12500;
      case 19: return 12500;
      case 20: return 199984;
      case 21: return 199984;
      case 22: return 199984;
      case 23: return 199984;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE") {
      switch(AccessId) {
      case 0: return 2400000;
      case 1: return 2400000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 491400;
      case 13: return 491400;
      case 14: return 491400;
      case 15: return 491400;
      case 16: return 491400;
      case 17: return 491400;
      case 18: return 16708368;
      case 19: return 42442560;
      case 20: return 37834128;
      case 21: return 16216968;
      case 22: return 16216968;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt22__final_insertion_sortIPdN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_") {
      switch(AccessId) {
      case 0: return 360;
      case 1: return 360;
      case 2: return 48;
      case 3: return 936;
      case 4: return 936;
      case 5: return 936;
      case 6: return 312;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 8321064;
      case 13: return 8321064;
      case 14: return 8321064;
      case 15: return 8321064;
      case 16: return 2399808;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 8283792;
      case 25: return 8283792;
      case 26: return 8283792;
      case 27: return 8283792;
      case 28: return 2399808;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt11__make_heapIPdN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 245700;
      case 13: return 245700;
      case 14: return 245700;
      case 15: return 245700;
      case 16: return 245700;
      case 17: return 245700;
      case 18: return 8354184;
      case 19: return 21221280;
      case 20: return 18917064;
      case 21: return 8108484;
      case 22: return 8108484;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_") {
      switch(AccessId) {
      case 0: return 180;
      case 1: return 180;
      case 2: return 156;
      case 3: return 312;
      case 4: return 312;
      case 5: return 312;
      case 6: return 180;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1199904;
      case 14: return 1199904;
      case 15: return 2960628;
      case 16: return 2960628;
      case 17: return 2960628;
      case 18: return 1199904;
      case 19: return 1199904;
      case 20: return 1199904;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 2941992;
      case 29: return 2941992;
      case 30: return 2941992;
      case 31: return 1199904;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt5dequeIdSaIdEE18_M_fill_initializeERKd") {
      switch(AccessId) {
      case 0: return 12;
      case 1: return 12;
      case 2: return 37500;
      case 3: return 37500;
      case 4: return 37500;
      case 5: return 37500;
      case 6: return 37500;
      case 7: return 37500;
      case 8: return 37500;
      case 9: return 37500;
      case 10: return 37500;
      case 11: return 37500;
      case 12: return 37500;
      case 13: return 37500;
      case 14: return 37500;
      case 15: return 37500;
      case 16: return 37500;
      case 17: return 37500;
      case 18: return 37500;
      case 19: return 37500;
      case 20: return 37500;
      case 21: return 37500;
      case 22: return 37500;
      case 23: return 37500;
      case 24: return 37500;
      case 25: return 37500;
      case 26: return 37500;
      case 27: return 37500;
      case 28: return 37500;
      case 29: return 37500;
      case 30: return 37500;
      case 31: return 37500;
      case 32: return 37500;
      case 33: return 37500;
      case 34: return 37500;
      case 35: return 37500;
      case 36: return 37500;
      case 37: return 37500;
      case 38: return 37500;
      case 39: return 37500;
      case 40: return 37500;
      case 41: return 37500;
      case 42: return 37500;
      case 43: return 37500;
      case 44: return 37500;
      case 45: return 37500;
      case 46: return 37500;
      case 47: return 37500;
      case 48: return 37500;
      case 49: return 37500;
      case 50: return 37500;
      case 51: return 37500;
      case 52: return 37500;
      case 53: return 37500;
      case 54: return 37500;
      case 55: return 37500;
      case 56: return 37500;
      case 57: return 37500;
      case 58: return 37500;
      case 59: return 37500;
      case 60: return 37500;
      case 61: return 37500;
      case 62: return 37500;
      case 63: return 37500;
      case 64: return 37500;
      case 65: return 37500;
      case 66: return 37500;
      case 67: return 37500;
      case 68: return 12;
      case 69: return 12;
      case 70: return 12;
      case 71: return 0;
      case 72: return 0;
      case 73: return 0;
      case 74: return 0;
      case 75: return 0;
      case 76: return 0;
      case 77: return 0;
      case 78: return 0;
      case 79: return 0;
      case 80: return 0;
      case 81: return 0;
      case 82: return 0;
      case 83: return 0;
      case 84: return 0;
      case 85: return 0;
      case 86: return 0;
      case 87: return 0;
      case 88: return 0;
      case 89: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm") {
      switch(AccessId) {
      case 0: return 12;
      case 1: return 12;
      case 2: return 12;
      case 3: return 37512;
      case 4: return 0;
      case 5: return 0;
      case 6: return 12;
      case 7: return 12;
      case 8: return 12;
      case 9: return 12;
      case 10: return 12;
      case 11: return 12;
      case 12: return 12;
      case 13: return 12;
      case 14: return 12;
      case 15: return 12;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt16__introsort_loopISt15_Deque_iteratorIdRdPdElN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_T1_") {
      switch(AccessId) {
      case 0: return 491412;
      case 1: return 491412;
      case 2: return 491412;
      case 3: return 491412;
      case 4: return 491412;
      case 5: return 491412;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 245700;
      case 29: return 245700;
      case 30: return 245700;
      case 31: return 245700;
      case 32: return 245700;
      case 33: return 245700;
      case 34: return 245700;
      case 35: return 245700;
      case 36: return 245700;
      case 37: return 245700;
      case 38: return 245700;
      case 39: return 245700;
      case 40: return 245700;
      case 41: return 245700;
      case 42: return 245700;
      case 43: return 245700;
      case 44: return 245700;
      case 45: return 245700;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt22__final_insertion_sortISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_") {
      switch(AccessId) {
      case 0: return 12;
      case 1: return 12;
      case 2: return 12;
      case 3: return 12;
      case 4: return 12;
      case 5: return 12;
      case 6: return 12;
      case 7: return 12;
      case 8: return 12;
      case 9: return 12;
      case 10: return 12;
      case 11: return 0;
      case 12: return 12;
      case 13: return 12;
      case 14: return 12;
      case 15: return 12;
      case 16: return 12;
      case 17: return 12;
      case 18: return 12;
      case 19: return 12;
      case 20: return 0;
      case 21: return 12;
      case 22: return 2399808;
      case 23: return 37488;
      case 24: return 2399808;
      case 25: return 5902620;
      case 26: return 5902620;
      case 27: return 90588;
      case 28: return 5902620;
      case 29: return 2399808;
      case 30: return 37500;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt27__unguarded_partition_pivotISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEET_S7_S7_T0_") {
      switch(AccessId) {
      case 0: return 245700;
      case 1: return 245700;
      case 2: return 245700;
      case 3: return 245700;
      case 4: return 245700;
      case 5: return 245700;
      case 6: return 245700;
      case 7: return 97008;
      case 8: return 3048;
      case 9: return 3432;
      case 10: return 245700;
      case 11: return 245700;
      case 12: return 245700;
      case 13: return 245700;
      case 14: return 245700;
      case 15: return 245700;
      case 16: return 245700;
      case 17: return 3048;
      case 18: return 8354184;
      case 19: return 8354184;
      case 20: return 201276;
      case 21: return 12867096;
      case 22: return 129480;
      case 23: return 8354184;
      case 24: return 166992;
      case 25: return 10562880;
      case 26: return 8108484;
      case 27: return 8108484;
      case 28: return 8108484;
      case 29: return 8108484;
      case 30: return 126348;
      case 31: return 245700;
      case 32: return 245700;
      case 33: return 245700;
      case 34: return 245700;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt13__heap_selectISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_S7_T0_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt13__adjust_heapISt15_Deque_iteratorIdRdPdEldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S8_T1_T2_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt16__insertion_sortISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_") {
      switch(AccessId) {
      case 0: return 12;
      case 1: return 12;
      case 2: return 12;
      case 3: return 12;
      case 4: return 12;
      case 5: return 0;
      case 6: return 180;
      case 7: return 180;
      case 8: return 180;
      case 9: return 0;
      case 10: return 0;
      case 11: return 36;
      case 12: return 0;
      case 13: return 36;
      case 14: return 0;
      case 15: return 156;
      case 16: return 312;
      case 17: return 312;
      case 18: return 0;
      case 19: return 312;
      case 20: return 180;
      case 21: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE16_M_insert_equal_INS5_11_Alloc_nodeEEESt17_Rb_tree_iteratorIdESt23_Rb_tree_const_iteratorIdERKdRT_") {
      switch(AccessId) {
      case 0: return 2399988;
      case 1: return 2399988;
      case 2: return 2400000;
      case 3: return 2400000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 2400000;
      case 11: return 2400000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE28_M_get_insert_hint_equal_posESt23_Rb_tree_const_iteratorIdERKd") {
      switch(AccessId) {
      case 0: return 2400000;
      case 1: return 2399988;
      case 2: return 2399988;
      case 3: return 2399988;
      case 4: return 2399880;
      case 5: return 2399868;
      case 6: return 39618072;
      case 7: return 39618072;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc-C++/stepanov_v1p2.cpp") {
    if (FunctionName == "_Z9summarizev") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 13;
      case 3: return 13;
      case 4: return 13;
      case 5: return 13;
      case 6: return 13;
      case 7: return 13;
      case 8: return 13;
      case 9: return 13;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z5test0PdS_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 500000000;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 0;
      case 11: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 1;
      case 3: return 1;
      case 4: return 62;
      case 5: return 62;
      case 6: return 62;
      case 7: return 62;
      case 8: return 62;
      case 9: return 62;
      case 10: return 62;
      case 11: return 62;
      case 12: return 62;
      case 13: return 62;
      case 14: return 62;
      case 15: return 62;
      case 16: return 62;
      case 17: return 62;
      case 18: return 62;
      case 19: return 62;
      case 20: return 4;
      case 21: return 4;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 62;
      case 26: return 62;
      case 27: return 62;
      case 28: return 62;
      case 29: return 62;
      case 30: return 62;
      case 31: return 62;
      case 32: return 62;
      case 33: return 62;
      case 34: return 62;
      case 35: return 62;
      case 36: return 62;
      case 37: return 62;
      case 38: return 62;
      case 39: return 62;
      case 40: return 62;
      case 41: return 4;
      case 42: return 4;
      case 43: return 0;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      case 58: return 1;
      case 59: return 1;
      case 60: return 1;
      case 61: return 1;
      case 62: return 1;
      case 63: return 1;
      case 64: return 1;
      case 65: return 1;
      case 66: return 1;
      case 67: return 1;
      case 68: return 1;
      case 69: return 1;
      case 70: return 1;
      case 71: return 1;
      case 72: return 1;
      case 73: return 1;
      case 74: return 1;
      case 75: return 1;
      case 76: return 1;
      case 77: return 1;
      case 78: return 1;
      case 79: return 1;
      case 80: return 1;
      case 81: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z4testIPddEvT_S1_T0_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 62500000;
      case 6: return 62500000;
      case 7: return 62500000;
      case 8: return 62500000;
      case 9: return 62500000;
      case 10: return 62500000;
      case 11: return 62500000;
      case 12: return 62500000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z4testIP6DoubleS0_EvT_S2_T0_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 62500000;
      case 6: return 62500000;
      case 7: return 62500000;
      case 8: return 62500000;
      case 9: return 62500000;
      case 10: return 62500000;
      case 11: return 62500000;
      case 12: return 62500000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z4testI14double_pointerdEvT_S1_T0_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 62500000;
      case 6: return 62500000;
      case 7: return 62500000;
      case 8: return 62500000;
      case 9: return 62500000;
      case 10: return 62500000;
      case 11: return 62500000;
      case 12: return 62500000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z4testI14Double_pointer6DoubleEvT_S2_T0_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 62500000;
      case 6: return 62500000;
      case 7: return 62500000;
      case 8: return 62500000;
      case 9: return 62500000;
      case 10: return 62500000;
      case 11: return 62500000;
      case 12: return 62500000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z4testI16reverse_iteratorIPddEdEvT_S3_T0_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 62500000;
      case 6: return 62500000;
      case 7: return 62500000;
      case 8: return 62500000;
      case 9: return 62500000;
      case 10: return 62500000;
      case 11: return 62500000;
      case 12: return 62500000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z4testI16reverse_iteratorIP6DoubleS1_ES1_EvT_S4_T0_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 62500000;
      case 6: return 62500000;
      case 7: return 62500000;
      case 8: return 62500000;
      case 9: return 62500000;
      case 10: return 62500000;
      case 11: return 62500000;
      case 12: return 62500000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z4testI16reverse_iteratorI14double_pointerdEdEvT_S3_T0_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 62500000;
      case 6: return 62500000;
      case 7: return 62500000;
      case 8: return 62500000;
      case 9: return 62500000;
      case 10: return 62500000;
      case 11: return 62500000;
      case 12: return 62500000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z4testI16reverse_iteratorI14Double_pointer6DoubleES2_EvT_S4_T0_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 62500000;
      case 6: return 62500000;
      case 7: return 62500000;
      case 8: return 62500000;
      case 9: return 62500000;
      case 10: return 62500000;
      case 11: return 62500000;
      case 12: return 62500000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z4testI16reverse_iteratorIS0_IPddEdEdEvT_S4_T0_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 62500000;
      case 6: return 62500000;
      case 7: return 62500000;
      case 8: return 62500000;
      case 9: return 62500000;
      case 10: return 62500000;
      case 11: return 62500000;
      case 12: return 62500000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z4testI16reverse_iteratorIS0_IP6DoubleS1_ES1_ES1_EvT_S5_T0_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 62500000;
      case 6: return 62500000;
      case 7: return 62500000;
      case 8: return 62500000;
      case 9: return 62500000;
      case 10: return 62500000;
      case 11: return 62500000;
      case 12: return 62500000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z4testI16reverse_iteratorIS0_I14double_pointerdEdEdEvT_S4_T0_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 62500000;
      case 6: return 62500000;
      case 7: return 62500000;
      case 8: return 62500000;
      case 9: return 62500000;
      case 10: return 62500000;
      case 11: return 62500000;
      case 12: return 62500000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z4testI16reverse_iteratorIS0_I14Double_pointer6DoubleES2_ES2_EvT_S5_T0_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 62500000;
      case 6: return 62500000;
      case 7: return 62500000;
      case 8: return 62500000;
      case 9: return 62500000;
      case 10: return 62500000;
      case 11: return 62500000;
      case 12: return 62500000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_GLOBAL__sub_I_stepanov_v1p2.cpp") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc-C++/Large/ray.cpp") {
    if (FunctionName == "_ZplRK3VecS1_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZmiRK3VecS1_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZmldRK3Vec") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z3dotRK3VecS1_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z7unitiseRK3Vec") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z9intersectRK3RayRK5Scene") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z9ray_traceRK3VecRK3RayRK5Scene") {
      switch(AccessId) {
      case 0: return 4194304;
      case 1: return 4194304;
      case 2: return 4194304;
      case 3: return 4194304;
      case 4: return 4194304;
      case 5: return 4194304;
      case 6: return 2468523;
      case 7: return 2468523;
      case 8: return 2468523;
      case 9: return 2468523;
      case 10: return 1912314;
      case 11: return 1912314;
      case 12: return 1912314;
      case 13: return 1912314;
      case 14: return 1912314;
      case 15: return 1912314;
      case 16: return 1912314;
      case 17: return 1912314;
      case 18: return 1912314;
      case 19: return 1912314;
      case 20: return 1912314;
      case 21: return 1912314;
      case 22: return 1912314;
      case 23: return 1912314;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z6createiRK3Vecd") {
      switch(AccessId) {
      case 0: return 1365;
      case 1: return 1365;
      case 2: return 341;
      case 3: return 341;
      case 4: return 341;
      case 5: return 341;
      case 6: return 341;
      case 7: return 341;
      case 8: return 341;
      case 9: return 341;
      case 10: return 341;
      case 11: return 341;
      case 12: return 341;
      case 13: return 341;
      case 14: return 341;
      case 15: return 341;
      case 16: return 341;
      case 17: return 341;
      case 18: return 341;
      case 19: return 341;
      case 20: return 341;
      case 21: return 341;
      case 22: return 341;
      case 23: return 341;
      case 24: return 341;
      case 25: return 1705;
      case 26: return 1705;
      case 27: return 1705;
      case 28: return 1705;
      case 29: return 1705;
      case 30: return 0;
      case 31: return 0;
      case 32: return 341;
      case 33: return 341;
      case 34: return 341;
      case 35: return 341;
      case 36: return 341;
      case 37: return 341;
      case 38: return 1705;
      case 39: return 1705;
      case 40: return 1705;
      case 41: return 1705;
      case 42: return 1705;
      case 43: return 0;
      case 44: return 0;
      case 45: return 341;
      case 46: return 1705;
      case 47: return 341;
      case 48: return 1705;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 341;
      case 54: return 341;
      case 55: return 341;
      case 56: return 341;
      case 57: return 341;
      case 58: return 341;
      case 59: return 341;
      case 60: return 341;
      case 61: return 341;
      case 62: return 341;
      case 63: return 341;
      case 64: return 341;
      case 65: return 341;
      case 66: return 341;
      case 67: return 341;
      case 68: return 341;
      case 69: return 341;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 262144;
      case 6: return 1048576;
      case 7: return 1048576;
      case 8: return 1048576;
      case 9: return 1048576;
      case 10: return 1048576;
      case 11: return 1048576;
      case 12: return 1048576;
      case 13: return 1048576;
      case 14: return 1048576;
      case 15: return 1048576;
      case 16: return 1048576;
      case 17: return 1048576;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK6Sphere9intersectERKSt4pairId3VecERK3Ray") {
      switch(AccessId) {
      case 0: return 43720709;
      case 1: return 43720709;
      case 2: return 43720709;
      case 3: return 43720709;
      case 4: return 43720709;
      case 5: return 43720709;
      case 6: return 43720709;
      case 7: return 43720709;
      case 8: return 43720709;
      case 9: return 43720709;
      case 10: return 36929720;
      case 11: return 3121233;
      case 12: return 43720709;
      case 13: return 3474323;
      case 14: return 3474323;
      case 15: return 3474323;
      case 16: return 3474323;
      case 17: return 3474323;
      case 18: return 3474323;
      case 19: return 3474323;
      case 20: return 3474323;
      case 21: return 3474323;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5GroupD2Ev") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5GroupD0Ev") {
      switch(AccessId) {
      case 0: return 341;
      case 1: return 341;
      case 2: return 341;
      case 3: return 1705;
      case 4: return 1705;
      case 5: return 1705;
      case 6: return 1705;
      case 7: return 1705;
      case 8: return 0;
      case 9: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5Group9intersectERKSt4pairId3VecERK3Ray") {
      switch(AccessId) {
      case 0: return 112131074;
      case 1: return 112131074;
      case 2: return 112131074;
      case 3: return 112131074;
      case 4: return 112131074;
      case 5: return 112131074;
      case 6: return 112131074;
      case 7: return 112131074;
      case 8: return 112131074;
      case 9: return 112131074;
      case 10: return 73624272;
      case 11: return 859711;
      case 12: return 112131074;
      case 13: return 29949033;
      case 14: return 149745165;
      case 15: return 149745165;
      case 16: return 149745165;
      case 17: return 149745165;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_GLOBAL__sub_I_ray.cpp") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc-C++/Large/sphereflake.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 4194304;
      case 18: return 4194304;
      case 19: return 4194304;
      case 20: return 4194304;
      case 21: return 4194304;
      case 22: return 4194304;
      case 23: return 1629403;
      case 24: return 1629403;
      case 25: return 1629403;
      case 26: return 1629403;
      case 27: return 1474682;
      case 28: return 1474682;
      case 29: return 1474682;
      case 30: return 1474682;
      case 31: return 1474682;
      case 32: return 1474682;
      case 33: return 1474682;
      case 34: return 1474682;
      case 35: return 77566654;
      case 36: return 77566654;
      case 37: return 77566654;
      case 38: return 77566654;
      case 39: return 71422192;
      case 40: return 6144462;
      case 41: return 6144462;
      case 42: return 6144462;
      case 43: return 6144462;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZL6createP6node_tii3v_tS1_d") {
      switch(AccessId) {
      case 0: return 66430;
      case 1: return 66430;
      case 2: return 66430;
      case 3: return 66430;
      case 4: return 66430;
      case 5: return 66430;
      case 6: return 66430;
      case 7: return 66430;
      case 8: return 66430;
      case 9: return 66430;
      case 10: return 66430;
      case 11: return 66430;
      case 12: return 44286;
      case 13: return 44286;
      case 14: return 44286;
      case 15: return 44286;
      case 16: return 44286;
      case 17: return 44286;
      case 18: return 44286;
      case 19: return 44286;
      case 20: return 44286;
      case 21: return 22143;
      case 22: return 22143;
      case 23: return 22143;
      case 24: return 22143;
      case 25: return 22143;
      case 26: return 22143;
      case 27: return 22143;
      case 28: return 22143;
      case 29: return 22143;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN7basis_tC2ERK3v_t") {
      switch(AccessId) {
      case 0: return 7381;
      case 1: return 7381;
      case 2: return 7381;
      case 3: return 7381;
      case 4: return 2545;
      case 5: return 1167;
      case 6: return 1251;
      case 7: return 2418;
      case 8: return 0;
      case 9: return 0;
      case 10: return 7381;
      case 11: return 7381;
      case 12: return 7381;
      case 13: return 7381;
      case 14: return 7381;
      case 15: return 7381;
      case 16: return 7381;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN6node_t9intersectILb0EEEvRK5ray_tR5hit_t") {
      switch(AccessId) {
      case 0: return 4194304;
      case 1: return 4194304;
      case 2: return 175356422;
      case 3: return 175356422;
      case 4: return 175356422;
      case 5: return 175356422;
      case 6: return 175356422;
      case 7: return 175356422;
      case 8: return 175356422;
      case 9: return 175356422;
      case 10: return 163736369;
      case 11: return 11620053;
      case 12: return 11620053;
      case 13: return 11620053;
      case 14: return 2839752;
      case 15: return 2839752;
      case 16: return 2839752;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_GLOBAL__sub_I_sphereflake.cpp") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/stencils/jacobi-1d-imper/jacobi-1d-imper.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 5000;
      case 10: return 5000;
      case 11: return 0;
      case 12: return 0;
      case 13: return 249900;
      case 14: return 249900;
      case 15: return 249900;
      case 16: return 249900;
      case 17: return 249900;
      case 18: return 249900;
      case 19: return 249900;
      case 20: return 249900;
      case 21: return 100;
      case 22: return 100;
      case 23: return 100;
      case 24: return 100;
      case 25: return 100;
      case 26: return 100;
      case 27: return 100;
      case 28: return 100;
      case 29: return 83300;
      case 30: return 83300;
      case 31: return 83300;
      case 32: return 83300;
      case 33: return 83300;
      case 34: return 83300;
      case 35: return 83300;
      case 36: return 83300;
      case 37: return 83300;
      case 38: return 83300;
      case 39: return 83300;
      case 40: return 83300;
      case 41: return 200;
      case 42: return 200;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 5000;
      case 60: return 5000;
      case 61: return 0;
      case 62: return 0;
      case 63: return 249900;
      case 64: return 249900;
      case 65: return 249900;
      case 66: return 249900;
      case 67: return 249900;
      case 68: return 249900;
      case 69: return 249900;
      case 70: return 249900;
      case 71: return 100;
      case 72: return 100;
      case 73: return 100;
      case 74: return 100;
      case 75: return 100;
      case 76: return 100;
      case 77: return 100;
      case 78: return 100;
      case 79: return 83300;
      case 80: return 83300;
      case 81: return 83300;
      case 82: return 83300;
      case 83: return 83300;
      case 84: return 83300;
      case 85: return 83300;
      case 86: return 83300;
      case 87: return 83300;
      case 88: return 83300;
      case 89: return 83300;
      case 90: return 83300;
      case 91: return 200;
      case 92: return 200;
      case 93: return 0;
      case 94: return 0;
      case 95: return 0;
      case 96: return 0;
      case 97: return 0;
      case 98: return 0;
      case 99: return 0;
      case 100: return 0;
      case 101: return 0;
      case 102: return 0;
      case 103: return 0;
      case 104: return 0;
      case 105: return 0;
      case 106: return 0;
      case 107: return 0;
      case 108: return 0;
      case 109: return 5000;
      case 110: return 5000;
      case 111: return 0;
      case 112: return 5000;
      case 113: return 5000;
      case 114: return 1;
      case 115: return 10000;
      case 116: return 10000;
      case 117: return 10000;
      case 118: return 10000;
      case 119: return 10000;
      case 120: return 10000;
      case 121: return 10000;
      case 122: return 10000;
      case 123: return 10000;
      case 124: return 10000;
      case 125: return 10000;
      case 126: return 10000;
      case 127: return 10000;
      case 128: return 10000;
      case 129: return 10000;
      case 130: return 10000;
      case 131: return 10000;
      case 132: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/stencils/jacobi-2d-imper/jacobi-2d-imper.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1000000;
      case 10: return 1000000;
      case 11: return 4970040;
      case 12: return 4970040;
      case 13: return 4970040;
      case 14: return 4970040;
      case 15: return 4970040;
      case 16: return 4970040;
      case 17: return 4970040;
      case 18: return 4970040;
      case 19: return 4970040;
      case 20: return 4970040;
      case 21: return 4970040;
      case 22: return 4970040;
      case 23: return 39920;
      case 24: return 39920;
      case 25: return 39920;
      case 26: return 39920;
      case 27: return 39920;
      case 28: return 39920;
      case 29: return 1656680;
      case 30: return 1656680;
      case 31: return 1656680;
      case 32: return 1656680;
      case 33: return 1656680;
      case 34: return 1656680;
      case 35: return 1656680;
      case 36: return 1656680;
      case 37: return 1656680;
      case 38: return 1656680;
      case 39: return 1656680;
      case 40: return 1656680;
      case 41: return 39920;
      case 42: return 39920;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 1000000;
      case 52: return 1000000;
      case 53: return 4970040;
      case 54: return 4970040;
      case 55: return 4970040;
      case 56: return 4970040;
      case 57: return 4970040;
      case 58: return 4970040;
      case 59: return 4970040;
      case 60: return 4970040;
      case 61: return 4970040;
      case 62: return 4970040;
      case 63: return 4970040;
      case 64: return 4970040;
      case 65: return 39920;
      case 66: return 39920;
      case 67: return 39920;
      case 68: return 39920;
      case 69: return 39920;
      case 70: return 39920;
      case 71: return 1656680;
      case 72: return 1656680;
      case 73: return 1656680;
      case 74: return 1656680;
      case 75: return 1656680;
      case 76: return 1656680;
      case 77: return 1656680;
      case 78: return 1656680;
      case 79: return 1656680;
      case 80: return 1656680;
      case 81: return 1656680;
      case 82: return 1656680;
      case 83: return 39920;
      case 84: return 39920;
      case 85: return 0;
      case 86: return 0;
      case 87: return 0;
      case 88: return 0;
      case 89: return 0;
      case 90: return 0;
      case 91: return 0;
      case 92: return 0;
      case 93: return 500000;
      case 94: return 500000;
      case 95: return 0;
      case 96: return 500000;
      case 97: return 500000;
      case 98: return 1;
      case 99: return 1000000;
      case 100: return 1000000;
      case 101: return 1000000;
      case 102: return 1000000;
      case 103: return 1000000;
      case 104: return 1000000;
      case 105: return 1000000;
      case 106: return 1000000;
      case 107: return 1000000;
      case 108: return 1000000;
      case 109: return 1000000;
      case 110: return 1000000;
      case 111: return 1000000;
      case 112: return 1000000;
      case 113: return 1000000;
      case 114: return 1000000;
      case 115: return 1000000;
      case 116: return 1000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/stencils/adi/adi.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1048576;
      case 13: return 1048576;
      case 14: return 1048576;
      case 15: return 1048576;
      case 16: return 1048576;
      case 17: return 1048576;
      case 18: return 524288;
      case 19: return 524288;
      case 20: return 0;
      case 21: return 524288;
      case 22: return 524288;
      case 23: return 1;
      case 24: return 1048576;
      case 25: return 1048576;
      case 26: return 1048576;
      case 27: return 1048576;
      case 28: return 1048576;
      case 29: return 1048576;
      case 30: return 1048576;
      case 31: return 1048576;
      case 32: return 1048576;
      case 33: return 1048576;
      case 34: return 1048576;
      case 35: return 1048576;
      case 36: return 1048576;
      case 37: return 1048576;
      case 38: return 1048576;
      case 39: return 1048576;
      case 40: return 1048576;
      case 41: return 1024;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "kernel_adi") {
      switch(AccessId) {
      case 0: return 102400;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 102400;
      case 10: return 102400;
      case 11: return 104755200;
      case 12: return 104755200;
      case 13: return 104755200;
      case 14: return 104755200;
      case 15: return 104755200;
      case 16: return 104755200;
      case 17: return 51200;
      case 18: return 51200;
      case 19: return 51200;
      case 20: return 51200;
      case 21: return 51200;
      case 22: return 51200;
      case 23: return 104652800;
      case 24: return 104652800;
      case 25: return 104652800;
      case 26: return 104652800;
      case 27: return 104652800;
      case 28: return 52377600;
      case 29: return 52377600;
      case 30: return 52377600;
      case 31: return 52377600;
      case 32: return 52377600;
      case 33: return 52377600;
      case 34: return 52377600;
      case 35: return 52377600;
      case 36: return 52377600;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 25600;
      case 47: return 25600;
      case 48: return 25600;
      case 49: return 25600;
      case 50: return 25600;
      case 51: return 25600;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 52326400;
      case 59: return 52326400;
      case 60: return 52326400;
      case 61: return 52326400;
      case 62: return 52326400;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/stencils/fdtd-apml/fdtd-apml.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 1;
      case 37: return 1;
      case 38: return 0;
      case 39: return 1;
      case 40: return 1;
      case 41: return 0;
      case 42: return 1;
      case 43: return 1;
      case 44: return 0;
      case 45: return 1;
      case 46: return 1;
      case 47: return 0;
      case 48: return 1;
      case 49: return 1;
      case 50: return 0;
      case 51: return 1;
      case 52: return 1;
      case 53: return 0;
      case 54: return 1;
      case 55: return 1;
      case 56: return 262144;
      case 57: return 262144;
      case 58: return 262144;
      case 59: return 262144;
      case 60: return 262144;
      case 61: return 262144;
      case 62: return 262144;
      case 63: return 262144;
      case 64: return 262144;
      case 65: return 262144;
      case 66: return 262144;
      case 67: return 262144;
      case 68: return 262144;
      case 69: return 262144;
      case 70: return 262144;
      case 71: return 262144;
      case 72: return 262144;
      case 73: return 262144;
      case 74: return 4096;
      case 75: return 4096;
      case 76: return 4096;
      case 77: return 4096;
      case 78: return 4096;
      case 79: return 4096;
      case 80: return 4096;
      case 81: return 4096;
      case 82: return 4096;
      case 83: return 4096;
      case 84: return 4096;
      case 85: return 4096;
      case 86: return 4096;
      case 87: return 4096;
      case 88: return 4096;
      case 89: return 4096;
      case 90: return 4096;
      case 91: return 4096;
      case 92: return 262144;
      case 93: return 262144;
      case 94: return 262144;
      case 95: return 262144;
      case 96: return 262144;
      case 97: return 262144;
      case 98: return 262144;
      case 99: return 262144;
      case 100: return 262144;
      case 101: return 262144;
      case 102: return 262144;
      case 103: return 262144;
      case 104: return 262144;
      case 105: return 262144;
      case 106: return 262144;
      case 107: return 262144;
      case 108: return 262144;
      case 109: return 262144;
      case 110: return 4096;
      case 111: return 4096;
      case 112: return 4096;
      case 113: return 4096;
      case 114: return 4096;
      case 115: return 4096;
      case 116: return 4096;
      case 117: return 4096;
      case 118: return 4096;
      case 119: return 4096;
      case 120: return 4096;
      case 121: return 4096;
      case 122: return 4096;
      case 123: return 4096;
      case 124: return 4096;
      case 125: return 4096;
      case 126: return 4096;
      case 127: return 4096;
      case 128: return 1;
      case 129: return 1;
      case 130: return 262144;
      case 131: return 262144;
      case 132: return 262144;
      case 133: return 262144;
      case 134: return 262144;
      case 135: return 262144;
      case 136: return 262144;
      case 137: return 262144;
      case 138: return 262144;
      case 139: return 262144;
      case 140: return 262144;
      case 141: return 262144;
      case 142: return 262144;
      case 143: return 262144;
      case 144: return 262144;
      case 145: return 262144;
      case 146: return 262144;
      case 147: return 262144;
      case 148: return 4096;
      case 149: return 4096;
      case 150: return 4096;
      case 151: return 4096;
      case 152: return 4096;
      case 153: return 4096;
      case 154: return 4096;
      case 155: return 4096;
      case 156: return 4096;
      case 157: return 4096;
      case 158: return 4096;
      case 159: return 4096;
      case 160: return 4096;
      case 161: return 4096;
      case 162: return 4096;
      case 163: return 4096;
      case 164: return 4096;
      case 165: return 4096;
      case 166: return 262144;
      case 167: return 262144;
      case 168: return 262144;
      case 169: return 262144;
      case 170: return 262144;
      case 171: return 262144;
      case 172: return 262144;
      case 173: return 262144;
      case 174: return 262144;
      case 175: return 262144;
      case 176: return 262144;
      case 177: return 262144;
      case 178: return 262144;
      case 179: return 262144;
      case 180: return 262144;
      case 181: return 262144;
      case 182: return 262144;
      case 183: return 262144;
      case 184: return 4096;
      case 185: return 4096;
      case 186: return 4096;
      case 187: return 4096;
      case 188: return 4096;
      case 189: return 4096;
      case 190: return 4096;
      case 191: return 4096;
      case 192: return 4096;
      case 193: return 4096;
      case 194: return 4096;
      case 195: return 4096;
      case 196: return 4096;
      case 197: return 4096;
      case 198: return 4096;
      case 199: return 4096;
      case 200: return 4096;
      case 201: return 4096;
      case 202: return 139425;
      case 203: return 139425;
      case 204: return 0;
      case 205: return 139425;
      case 206: return 139425;
      case 207: return 0;
      case 208: return 139425;
      case 209: return 139425;
      case 210: return 0;
      case 211: return 139425;
      case 212: return 139425;
      case 213: return 0;
      case 214: return 14365;
      case 215: return 14365;
      case 216: return 14365;
      case 217: return 14365;
      case 218: return 14365;
      case 219: return 14365;
      case 220: return 14365;
      case 221: return 14365;
      case 222: return 14365;
      case 223: return 260260;
      case 224: return 260260;
      case 225: return 260260;
      case 226: return 260260;
      case 227: return 260260;
      case 228: return 260260;
      case 229: return 260260;
      case 230: return 260260;
      case 231: return 1;
      case 232: return 135200;
      case 233: return 135200;
      case 234: return 135200;
      case 235: return 135200;
      case 236: return 135200;
      case 237: return 135200;
      case 238: return 135200;
      case 239: return 135200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "init_array") {
      switch(AccessId) {
      case 0: return 2;
      case 1: return 2;
      case 2: return 66;
      case 3: return 66;
      case 4: return 66;
      case 5: return 66;
      case 6: return 66;
      case 7: return 66;
      case 8: return 8450;
      case 9: return 8450;
      case 10: return 270400;
      case 11: return 270400;
      case 12: return 270400;
      case 13: return 8450;
      case 14: return 8450;
      case 15: return 8450;
      case 16: return 64;
      case 17: return 64;
      case 18: return 64;
      case 19: return 64;
      case 20: return 64;
      case 21: return 64;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/stencils/seidel-2d/seidel-2d.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 500000;
      case 7: return 500000;
      case 8: return 19960;
      case 9: return 19960;
      case 10: return 19960;
      case 11: return 19960;
      case 12: return 19960;
      case 13: return 19960;
      case 14: return 19920080;
      case 15: return 19920080;
      case 16: return 19920080;
      case 17: return 19920080;
      case 18: return 500000;
      case 19: return 500000;
      case 20: return 19960;
      case 21: return 19960;
      case 22: return 19960;
      case 23: return 19960;
      case 24: return 19960;
      case 25: return 19960;
      case 26: return 19920080;
      case 27: return 19920080;
      case 28: return 19920080;
      case 29: return 19920080;
      case 30: return 500000;
      case 31: return 500000;
      case 32: return 0;
      case 33: return 500000;
      case 34: return 500000;
      case 35: return 1;
      case 36: return 1000000;
      case 37: return 1000000;
      case 38: return 1000000;
      case 39: return 1000000;
      case 40: return 1000000;
      case 41: return 1000000;
      case 42: return 1000000;
      case 43: return 1000000;
      case 44: return 1000000;
      case 45: return 1000000;
      case 46: return 1000000;
      case 47: return 1000000;
      case 48: return 1000000;
      case 49: return 1000000;
      case 50: return 1000000;
      case 51: return 1000000;
      case 52: return 1000000;
      case 53: return 1000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/stencils/fdtd-2d/fdtd-2d.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 50;
      case 22: return 50;
      case 23: return 6250;
      case 24: return 6250;
      case 25: return 6250;
      case 26: return 6250;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 12487500;
      case 44: return 12487500;
      case 45: return 12487500;
      case 46: return 12487500;
      case 47: return 12487500;
      case 48: return 12487500;
      case 49: return 12487500;
      case 50: return 12487500;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 12450000;
      case 60: return 12450000;
      case 61: return 12450000;
      case 62: return 12450000;
      case 63: return 12450000;
      case 64: return 12450000;
      case 65: return 12450000;
      case 66: return 12450000;
      case 67: return 50000;
      case 68: return 50000;
      case 69: return 50000;
      case 70: return 50000;
      case 71: return 50000;
      case 72: return 50000;
      case 73: return 50000;
      case 74: return 50000;
      case 75: return 50000;
      case 76: return 50000;
      case 77: return 50000;
      case 78: return 50000;
      case 79: return 12437550;
      case 80: return 12437550;
      case 81: return 12437550;
      case 82: return 12437550;
      case 83: return 12437550;
      case 84: return 12437550;
      case 85: return 12437550;
      case 86: return 12437550;
      case 87: return 12437550;
      case 88: return 12437550;
      case 89: return 12437550;
      case 90: return 12437550;
      case 91: return 149850;
      case 92: return 149850;
      case 93: return 149850;
      case 94: return 149850;
      case 95: return 149850;
      case 96: return 149850;
      case 97: return 50;
      case 98: return 50;
      case 99: return 6250;
      case 100: return 6250;
      case 101: return 6250;
      case 102: return 6250;
      case 103: return 0;
      case 104: return 0;
      case 105: return 0;
      case 106: return 0;
      case 107: return 0;
      case 108: return 0;
      case 109: return 0;
      case 110: return 0;
      case 111: return 0;
      case 112: return 0;
      case 113: return 0;
      case 114: return 0;
      case 115: return 0;
      case 116: return 0;
      case 117: return 0;
      case 118: return 0;
      case 119: return 12487500;
      case 120: return 12487500;
      case 121: return 12487500;
      case 122: return 12487500;
      case 123: return 12487500;
      case 124: return 12487500;
      case 125: return 12487500;
      case 126: return 12487500;
      case 127: return 0;
      case 128: return 0;
      case 129: return 0;
      case 130: return 0;
      case 131: return 0;
      case 132: return 0;
      case 133: return 0;
      case 134: return 0;
      case 135: return 12450000;
      case 136: return 12450000;
      case 137: return 12450000;
      case 138: return 12450000;
      case 139: return 12450000;
      case 140: return 12450000;
      case 141: return 12450000;
      case 142: return 12450000;
      case 143: return 50000;
      case 144: return 50000;
      case 145: return 50000;
      case 146: return 50000;
      case 147: return 50000;
      case 148: return 50000;
      case 149: return 50000;
      case 150: return 50000;
      case 151: return 50000;
      case 152: return 50000;
      case 153: return 50000;
      case 154: return 50000;
      case 155: return 12437550;
      case 156: return 12437550;
      case 157: return 12437550;
      case 158: return 12437550;
      case 159: return 12437550;
      case 160: return 12437550;
      case 161: return 12437550;
      case 162: return 12437550;
      case 163: return 12437550;
      case 164: return 12437550;
      case 165: return 12437550;
      case 166: return 12437550;
      case 167: return 149850;
      case 168: return 149850;
      case 169: return 149850;
      case 170: return 149850;
      case 171: return 149850;
      case 172: return 149850;
      case 173: return 1;
      case 174: return 1000000;
      case 175: return 1000000;
      case 176: return 1000000;
      case 177: return 1000000;
      case 178: return 1000000;
      case 179: return 1000000;
      case 180: return 1000000;
      case 181: return 1000000;
      case 182: return 1000000;
      case 183: return 1000000;
      case 184: return 1000000;
      case 185: return 1000000;
      case 186: return 1000000;
      case 187: return 1000000;
      case 188: return 1000000;
      case 189: return 1000000;
      case 190: return 1000000;
      case 191: return 1000;
      case 192: return 1000000;
      case 193: return 1000000;
      case 194: return 1000000;
      case 195: return 1000000;
      case 196: return 1000000;
      case 197: return 1000000;
      case 198: return 1000000;
      case 199: return 1000000;
      case 200: return 1000000;
      case 201: return 1000000;
      case 202: return 1000000;
      case 203: return 1000000;
      case 204: return 1000000;
      case 205: return 1000000;
      case 206: return 1000000;
      case 207: return 1000000;
      case 208: return 1000000;
      case 209: return 1000;
      case 210: return 1000000;
      case 211: return 1000000;
      case 212: return 1000000;
      case 213: return 1000000;
      case 214: return 1000000;
      case 215: return 1000000;
      case 216: return 1000000;
      case 217: return 1000000;
      case 218: return 1000000;
      case 219: return 1000000;
      case 220: return 1000000;
      case 221: return 1000000;
      case 222: return 1000000;
      case 223: return 1000000;
      case 224: return 1000000;
      case 225: return 1000000;
      case 226: return 1000000;
      case 227: return 1000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "init_array") {
      switch(AccessId) {
      case 0: return 2;
      case 1: return 2;
      case 2: return 2;
      case 3: return 2;
      case 4: return 2;
      case 5: return 2;
      case 6: return 2;
      case 7: return 2;
      case 8: return 2;
      case 9: return 2;
      case 10: return 2;
      case 11: return 2;
      case 12: return 2;
      case 13: return 2;
      case 14: return 2;
      case 15: return 2;
      case 16: return 2;
      case 17: return 2;
      case 18: return 2;
      case 19: return 2;
      case 20: return 2;
      case 21: return 2;
      case 22: return 2;
      case 23: return 2;
      case 24: return 2;
      case 25: return 2000000;
      case 26: return 2000000;
      case 27: return 2000000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/datamining/covariance/covariance.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 500000;
      case 13: return 500000;
      case 14: return 1000;
      case 15: return 200000;
      case 16: return 200000;
      case 17: return 200000;
      case 18: return 200000;
      case 19: return 200000;
      case 20: return 200000;
      case 21: return 200000;
      case 22: return 200000;
      case 23: return 200000;
      case 24: return 200000;
      case 25: return 1000;
      case 26: return 125000;
      case 27: return 125000;
      case 28: return 125000;
      case 29: return 125000;
      case 30: return 125000;
      case 31: return 125000;
      case 32: return 125000;
      case 33: return 125000;
      case 34: return 125000;
      case 35: return 125000;
      case 36: return 125000;
      case 37: return 125000;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 500500;
      case 51: return 250250000;
      case 52: return 250250000;
      case 53: return 250250000;
      case 54: return 250250000;
      case 55: return 250250000;
      case 56: return 250250000;
      case 57: return 500500;
      case 58: return 500000;
      case 59: return 500000;
      case 60: return 1000;
      case 61: return 200000;
      case 62: return 200000;
      case 63: return 200000;
      case 64: return 200000;
      case 65: return 200000;
      case 66: return 200000;
      case 67: return 200000;
      case 68: return 200000;
      case 69: return 200000;
      case 70: return 200000;
      case 71: return 1000;
      case 72: return 125000;
      case 73: return 125000;
      case 74: return 125000;
      case 75: return 125000;
      case 76: return 125000;
      case 77: return 125000;
      case 78: return 125000;
      case 79: return 125000;
      case 80: return 125000;
      case 81: return 125000;
      case 82: return 125000;
      case 83: return 125000;
      case 84: return 0;
      case 85: return 0;
      case 86: return 0;
      case 87: return 0;
      case 88: return 0;
      case 89: return 0;
      case 90: return 0;
      case 91: return 0;
      case 92: return 0;
      case 93: return 0;
      case 94: return 0;
      case 95: return 0;
      case 96: return 500500;
      case 97: return 250250000;
      case 98: return 250250000;
      case 99: return 250250000;
      case 100: return 250250000;
      case 101: return 250250000;
      case 102: return 250250000;
      case 103: return 500500;
      case 104: return 500000;
      case 105: return 500000;
      case 106: return 0;
      case 107: return 500000;
      case 108: return 500000;
      case 109: return 1;
      case 110: return 1000000;
      case 111: return 1000000;
      case 112: return 1000000;
      case 113: return 1000000;
      case 114: return 1000000;
      case 115: return 1000000;
      case 116: return 1000000;
      case 117: return 1000000;
      case 118: return 1000000;
      case 119: return 1000000;
      case 120: return 1000000;
      case 121: return 1000000;
      case 122: return 1000000;
      case 123: return 1000000;
      case 124: return 1000000;
      case 125: return 1000000;
      case 126: return 1000000;
      case 127: return 1000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/datamining/correlation/correlation.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 500000;
      case 16: return 500000;
      case 17: return 500000;
      case 18: return 500000;
      case 19: return 500000;
      case 20: return 500000;
      case 21: return 0;
      case 22: return 500000;
      case 23: return 500000;
      case 24: return 1;
      case 25: return 1000000;
      case 26: return 1000000;
      case 27: return 1000000;
      case 28: return 1000000;
      case 29: return 1000000;
      case 30: return 1000000;
      case 31: return 1000000;
      case 32: return 1000000;
      case 33: return 1000000;
      case 34: return 1000000;
      case 35: return 1000000;
      case 36: return 1000000;
      case 37: return 1000000;
      case 38: return 1000000;
      case 39: return 1000000;
      case 40: return 1000000;
      case 41: return 1000000;
      case 42: return 1000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "kernel_correlation") {
      switch(AccessId) {
      case 0: return 2000;
      case 1: return 400000;
      case 2: return 400000;
      case 3: return 400000;
      case 4: return 400000;
      case 5: return 400000;
      case 6: return 400000;
      case 7: return 400000;
      case 8: return 400000;
      case 9: return 400000;
      case 10: return 400000;
      case 11: return 2000;
      case 12: return 2000;
      case 13: return 1000000;
      case 14: return 1000000;
      case 15: return 1000000;
      case 16: return 1000000;
      case 17: return 1000000;
      case 18: return 1000000;
      case 19: return 2000;
      case 20: return 2000;
      case 21: return 2000000;
      case 22: return 2000000;
      case 23: return 2000000;
      case 24: return 2000000;
      case 25: return 2000000;
      case 26: return 2000000;
      case 27: return 1998;
      case 28: return 999000;
      case 29: return 499500000;
      case 30: return 499500000;
      case 31: return 499500000;
      case 32: return 499500000;
      case 33: return 499500000;
      case 34: return 499500000;
      case 35: return 999000;
      case 36: return 2;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/solvers/dynprog/dynprog.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 2500;
      case 10: return 2500;
      case 11: return 12250000;
      case 12: return 11760000;
      case 13: return 6000000;
      case 14: return 6000000;
      case 15: return 6000000;
      case 16: return 95000000;
      case 17: return 95000000;
      case 18: return 95000000;
      case 19: return 95000000;
      case 20: return 95000000;
      case 21: return 95000000;
      case 22: return 12250000;
      case 23: return 12250000;
      case 24: return 12250000;
      case 25: return 10000;
      case 26: return 2500;
      case 27: return 2500;
      case 28: return 12250000;
      case 29: return 11760000;
      case 30: return 6000000;
      case 31: return 6000000;
      case 32: return 6000000;
      case 33: return 95000000;
      case 34: return 95000000;
      case 35: return 95000000;
      case 36: return 95000000;
      case 37: return 95000000;
      case 38: return 95000000;
      case 39: return 12250000;
      case 40: return 12250000;
      case 41: return 12250000;
      case 42: return 10000;
      case 43: return 1;
      case 44: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/solvers/gramschmidt/gramschmidt.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 131072;
      case 19: return 131072;
      case 20: return 131072;
      case 21: return 131072;
      case 22: return 131072;
      case 23: return 131072;
      case 24: return 65536;
      case 25: return 65536;
      case 26: return 65536;
      case 27: return 65536;
      case 28: return 512;
      case 29: return 512;
      case 30: return 512;
      case 31: return 131072;
      case 32: return 131072;
      case 33: return 131072;
      case 34: return 130816;
      case 35: return 33488896;
      case 36: return 33488896;
      case 37: return 33488896;
      case 38: return 33488896;
      case 39: return 33488896;
      case 40: return 33488896;
      case 41: return 130816;
      case 42: return 130816;
      case 43: return 130816;
      case 44: return 33488896;
      case 45: return 33488896;
      case 46: return 33488896;
      case 47: return 33488896;
      case 48: return 131072;
      case 49: return 131072;
      case 50: return 131072;
      case 51: return 131072;
      case 52: return 131072;
      case 53: return 131072;
      case 54: return 65536;
      case 55: return 65536;
      case 56: return 65536;
      case 57: return 65536;
      case 58: return 512;
      case 59: return 512;
      case 60: return 512;
      case 61: return 131072;
      case 62: return 131072;
      case 63: return 131072;
      case 64: return 130816;
      case 65: return 33488896;
      case 66: return 33488896;
      case 67: return 33488896;
      case 68: return 33488896;
      case 69: return 33488896;
      case 70: return 33488896;
      case 71: return 130816;
      case 72: return 130816;
      case 73: return 130816;
      case 74: return 33488896;
      case 75: return 33488896;
      case 76: return 33488896;
      case 77: return 33488896;
      case 78: return 131072;
      case 79: return 131072;
      case 80: return 0;
      case 81: return 131072;
      case 82: return 131072;
      case 83: return 131072;
      case 84: return 131072;
      case 85: return 0;
      case 86: return 131072;
      case 87: return 131072;
      case 88: return 131072;
      case 89: return 131072;
      case 90: return 0;
      case 91: return 131072;
      case 92: return 131072;
      case 93: return 13312;
      case 94: return 13312;
      case 95: return 13312;
      case 96: return 248832;
      case 97: return 248832;
      case 98: return 1;
      case 99: return 13312;
      case 100: return 13312;
      case 101: return 13312;
      case 102: return 248832;
      case 103: return 248832;
      case 104: return 1;
      case 105: return 13312;
      case 106: return 13312;
      case 107: return 13312;
      case 108: return 248832;
      case 109: return 248832;
      case 110: return 1;
      case 111: return 130560;
      case 112: return 130560;
      case 113: return 130560;
      case 114: return 33358080;
      case 115: return 33358080;
      case 116: return 33358080;
      case 117: return 33358080;
      case 118: return 130560;
      case 119: return 130560;
      case 120: return 130560;
      case 121: return 33358080;
      case 122: return 33358080;
      case 123: return 33358080;
      case 124: return 33358080;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/solvers/lu/lu.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 4096;
      case 7: return 4096;
      case 8: return 4096;
      case 9: return 4096;
      case 10: return 64;
      case 11: return 64;
      case 12: return 64;
      case 13: return 4032;
      case 14: return 4032;
      case 15: return 4032;
      case 16: return 4032;
      case 17: return 4032;
      case 18: return 4032;
      case 19: return 8122;
      case 20: return 169632;
      case 21: return 169632;
      case 22: return 169632;
      case 23: return 169632;
      case 24: return 169632;
      case 25: return 169632;
      case 26: return 4096;
      case 27: return 4096;
      case 28: return 4096;
      case 29: return 4096;
      case 30: return 4128;
      case 31: return 4128;
      case 32: return 4128;
      case 33: return 4128;
      case 34: return 4128;
      case 35: return 4128;
      case 36: return 4128;
      case 37: return 4128;
      case 38: return 4096;
      case 39: return 4096;
      case 40: return 4096;
      case 41: return 4096;
      case 42: return 64;
      case 43: return 64;
      case 44: return 64;
      case 45: return 4032;
      case 46: return 4032;
      case 47: return 4032;
      case 48: return 4032;
      case 49: return 4032;
      case 50: return 4032;
      case 51: return 8122;
      case 52: return 169632;
      case 53: return 169632;
      case 54: return 169632;
      case 55: return 169632;
      case 56: return 169632;
      case 57: return 169632;
      case 58: return 4096;
      case 59: return 4096;
      case 60: return 4096;
      case 61: return 4096;
      case 62: return 4128;
      case 63: return 4128;
      case 64: return 4128;
      case 65: return 4128;
      case 66: return 4128;
      case 67: return 4128;
      case 68: return 4128;
      case 69: return 4128;
      case 70: return 8192;
      case 71: return 8192;
      case 72: return 0;
      case 73: return 8192;
      case 74: return 8192;
      case 75: return 1;
      case 76: return 16384;
      case 77: return 16384;
      case 78: return 16384;
      case 79: return 16384;
      case 80: return 16384;
      case 81: return 16384;
      case 82: return 16384;
      case 83: return 16384;
      case 84: return 16384;
      case 85: return 16384;
      case 86: return 16384;
      case 87: return 16384;
      case 88: return 16384;
      case 89: return 16384;
      case 90: return 16384;
      case 91: return 16384;
      case 92: return 16384;
      case 93: return 128;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/solvers/durbin/durbin.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 4000;
      case 22: return 4000;
      case 23: return 4000;
      case 24: return 8000000;
      case 25: return 8000000;
      case 26: return 8000000;
      case 27: return 8000000;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 3999;
      case 34: return 3999;
      case 35: return 3999;
      case 36: return 3999;
      case 37: return 3998000;
      case 38: return 3998000;
      case 39: return 3998000;
      case 40: return 3998000;
      case 41: return 3998000;
      case 42: return 3998000;
      case 43: return 2000;
      case 44: return 2000;
      case 45: return 2000;
      case 46: return 3999;
      case 47: return 3999;
      case 48: return 3999;
      case 49: return 3999;
      case 50: return 3999;
      case 51: return 3999;
      case 52: return 1;
      case 53: return 1;
      case 54: return 3996001;
      case 55: return 3996001;
      case 56: return 3996001;
      case 57: return 3996001;
      case 58: return 3996001;
      case 59: return 3996001;
      case 60: return 3996001;
      case 61: return 3996001;
      case 62: return 1999;
      case 63: return 1999;
      case 64: return 1999;
      case 65: return 1999;
      case 66: return 3998;
      case 67: return 3998;
      case 68: return 3998;
      case 69: return 800;
      case 70: return 800;
      case 71: return 800;
      case 72: return 800;
      case 73: return 800;
      case 74: return 800;
      case 75: return 800;
      case 76: return 800;
      case 77: return 800;
      case 78: return 800;
      case 79: return 4000;
      case 80: return 4000;
      case 81: return 4000;
      case 82: return 8000000;
      case 83: return 8000000;
      case 84: return 8000000;
      case 85: return 8000000;
      case 86: return 1;
      case 87: return 1;
      case 88: return 1;
      case 89: return 1;
      case 90: return 1;
      case 91: return 3999;
      case 92: return 3999;
      case 93: return 3999;
      case 94: return 3999;
      case 95: return 3998000;
      case 96: return 3998000;
      case 97: return 3998000;
      case 98: return 3998000;
      case 99: return 3998000;
      case 100: return 3998000;
      case 101: return 2000;
      case 102: return 2000;
      case 103: return 2000;
      case 104: return 3999;
      case 105: return 3999;
      case 106: return 3999;
      case 107: return 3999;
      case 108: return 3999;
      case 109: return 3999;
      case 110: return 1;
      case 111: return 1;
      case 112: return 3996001;
      case 113: return 3996001;
      case 114: return 3996001;
      case 115: return 3996001;
      case 116: return 3996001;
      case 117: return 3996001;
      case 118: return 3996001;
      case 119: return 3996001;
      case 120: return 1999;
      case 121: return 1999;
      case 122: return 1999;
      case 123: return 1999;
      case 124: return 3998;
      case 125: return 3998;
      case 126: return 3998;
      case 127: return 800;
      case 128: return 800;
      case 129: return 800;
      case 130: return 800;
      case 131: return 800;
      case 132: return 800;
      case 133: return 800;
      case 134: return 800;
      case 135: return 800;
      case 136: return 800;
      case 137: return 2000;
      case 138: return 2000;
      case 139: return 0;
      case 140: return 2000;
      case 141: return 2000;
      case 142: return 4000;
      case 143: return 4000;
      case 144: return 200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/kernels/gemver/gemver.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 4000;
      case 34: return 4000;
      case 35: return 4000;
      case 36: return 4000;
      case 37: return 4000;
      case 38: return 4000;
      case 39: return 4000;
      case 40: return 4000;
      case 41: return 8000000;
      case 42: return 8000000;
      case 43: return 4000;
      case 44: return 4000;
      case 45: return 4000000;
      case 46: return 4000000;
      case 47: return 4000000;
      case 48: return 4000000;
      case 49: return 4000000;
      case 50: return 4000000;
      case 51: return 4000000;
      case 52: return 4000000;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      case 62: return 0;
      case 63: return 0;
      case 64: return 0;
      case 65: return 4000;
      case 66: return 8000000;
      case 67: return 8000000;
      case 68: return 8000000;
      case 69: return 8000000;
      case 70: return 8000000;
      case 71: return 8000000;
      case 72: return 500;
      case 73: return 500;
      case 74: return 500;
      case 75: return 500;
      case 76: return 500;
      case 77: return 500;
      case 78: return 500;
      case 79: return 500;
      case 80: return 500;
      case 81: return 500;
      case 82: return 500;
      case 83: return 500;
      case 84: return 0;
      case 85: return 0;
      case 86: return 0;
      case 87: return 0;
      case 88: return 0;
      case 89: return 0;
      case 90: return 0;
      case 91: return 0;
      case 92: return 0;
      case 93: return 0;
      case 94: return 0;
      case 95: return 0;
      case 96: return 0;
      case 97: return 0;
      case 98: return 0;
      case 99: return 4000;
      case 100: return 8000000;
      case 101: return 8000000;
      case 102: return 8000000;
      case 103: return 8000000;
      case 104: return 8000000;
      case 105: return 8000000;
      case 106: return 4000;
      case 107: return 4000;
      case 108: return 4000000;
      case 109: return 4000000;
      case 110: return 4000000;
      case 111: return 4000000;
      case 112: return 4000000;
      case 113: return 4000000;
      case 114: return 4000000;
      case 115: return 4000000;
      case 116: return 0;
      case 117: return 0;
      case 118: return 0;
      case 119: return 0;
      case 120: return 0;
      case 121: return 0;
      case 122: return 0;
      case 123: return 0;
      case 124: return 0;
      case 125: return 0;
      case 126: return 0;
      case 127: return 0;
      case 128: return 4000;
      case 129: return 8000000;
      case 130: return 8000000;
      case 131: return 8000000;
      case 132: return 8000000;
      case 133: return 8000000;
      case 134: return 8000000;
      case 135: return 500;
      case 136: return 500;
      case 137: return 500;
      case 138: return 500;
      case 139: return 500;
      case 140: return 500;
      case 141: return 500;
      case 142: return 500;
      case 143: return 500;
      case 144: return 500;
      case 145: return 500;
      case 146: return 500;
      case 147: return 0;
      case 148: return 0;
      case 149: return 0;
      case 150: return 0;
      case 151: return 0;
      case 152: return 0;
      case 153: return 0;
      case 154: return 0;
      case 155: return 0;
      case 156: return 0;
      case 157: return 0;
      case 158: return 0;
      case 159: return 0;
      case 160: return 0;
      case 161: return 0;
      case 162: return 4000;
      case 163: return 8000000;
      case 164: return 8000000;
      case 165: return 8000000;
      case 166: return 8000000;
      case 167: return 8000000;
      case 168: return 8000000;
      case 169: return 2000;
      case 170: return 2000;
      case 171: return 0;
      case 172: return 2000;
      case 173: return 2000;
      case 174: return 4000;
      case 175: return 4000;
      case 176: return 200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/kernels/gemm/gemm.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 524288;
      case 13: return 524288;
      case 14: return 524288;
      case 15: return 524288;
      case 16: return 262144;
      case 17: return 262144;
      case 18: return 262144;
      case 19: return 262144;
      case 20: return 262144;
      case 21: return 262144;
      case 22: return 262144;
      case 23: return 262144;
      case 24: return 1048576;
      case 25: return 1048576;
      case 26: return 536870912;
      case 27: return 536870912;
      case 28: return 536870912;
      case 29: return 536870912;
      case 30: return 536870912;
      case 31: return 536870912;
      case 32: return 1048576;
      case 33: return 1048576;
      case 34: return 536870912;
      case 35: return 536870912;
      case 36: return 536870912;
      case 37: return 536870912;
      case 38: return 536870912;
      case 39: return 536870912;
      case 40: return 524288;
      case 41: return 524288;
      case 42: return 0;
      case 43: return 524288;
      case 44: return 524288;
      case 45: return 1;
      case 46: return 1048576;
      case 47: return 1048576;
      case 48: return 1048576;
      case 49: return 1048576;
      case 50: return 1048576;
      case 51: return 1048576;
      case 52: return 1048576;
      case 53: return 1048576;
      case 54: return 1048576;
      case 55: return 1048576;
      case 56: return 1048576;
      case 57: return 1048576;
      case 58: return 1048576;
      case 59: return 1048576;
      case 60: return 1048576;
      case 61: return 1048576;
      case 62: return 1048576;
      case 63: return 1024;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/kernels/2mm/2mm.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 262144;
      case 19: return 262144;
      case 20: return 262144;
      case 21: return 262144;
      case 22: return 262144;
      case 23: return 262144;
      case 24: return 262144;
      case 25: return 262144;
      case 26: return 524288;
      case 27: return 524288;
      case 28: return 524288;
      case 29: return 524288;
      case 30: return 524288;
      case 31: return 524288;
      case 32: return 1048576;
      case 33: return 536870912;
      case 34: return 536870912;
      case 35: return 536870912;
      case 36: return 536870912;
      case 37: return 536870912;
      case 38: return 536870912;
      case 39: return 1048576;
      case 40: return 1048576;
      case 41: return 536870912;
      case 42: return 536870912;
      case 43: return 536870912;
      case 44: return 536870912;
      case 45: return 536870912;
      case 46: return 536870912;
      case 47: return 1048576;
      case 48: return 536870912;
      case 49: return 536870912;
      case 50: return 536870912;
      case 51: return 536870912;
      case 52: return 536870912;
      case 53: return 536870912;
      case 54: return 1048576;
      case 55: return 1048576;
      case 56: return 536870912;
      case 57: return 536870912;
      case 58: return 536870912;
      case 59: return 536870912;
      case 60: return 536870912;
      case 61: return 536870912;
      case 62: return 524288;
      case 63: return 524288;
      case 64: return 0;
      case 65: return 524288;
      case 66: return 524288;
      case 67: return 1;
      case 68: return 1048576;
      case 69: return 1048576;
      case 70: return 1048576;
      case 71: return 1048576;
      case 72: return 1048576;
      case 73: return 1048576;
      case 74: return 1048576;
      case 75: return 1048576;
      case 76: return 1048576;
      case 77: return 1048576;
      case 78: return 1048576;
      case 79: return 1048576;
      case 80: return 1048576;
      case 81: return 1048576;
      case 82: return 1048576;
      case 83: return 1048576;
      case 84: return 1048576;
      case 85: return 1024;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/kernels/cholesky/cholesky.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1024;
      case 10: return 524288;
      case 11: return 524288;
      case 12: return 524288;
      case 13: return 524288;
      case 14: return 1024;
      case 15: return 130560;
      case 16: return 130560;
      case 17: return 130560;
      case 18: return 130560;
      case 19: return 1536;
      case 20: return 1024;
      case 21: return 522753;
      case 22: return 89085696;
      case 23: return 89085696;
      case 24: return 89085696;
      case 25: return 89085696;
      case 26: return 261632;
      case 27: return 261632;
      case 28: return 522753;
      case 29: return 522753;
      case 30: return 1;
      case 31: return 1;
      case 32: return 2;
      case 33: return 2;
      case 34: return 2;
      case 35: return 255;
      case 36: return 255;
      case 37: return 255;
      case 38: return 255;
      case 39: return 255;
      case 40: return 255;
      case 41: return 255;
      case 42: return 255;
      case 43: return 255;
      case 44: return 255;
      case 45: return 255;
      case 46: return 255;
      case 47: return 1024;
      case 48: return 130560;
      case 49: return 130560;
      case 50: return 130560;
      case 51: return 130560;
      case 52: return 1536;
      case 53: return 1024;
      case 54: return 522753;
      case 55: return 89085696;
      case 56: return 89085696;
      case 57: return 89085696;
      case 58: return 89085696;
      case 59: return 261632;
      case 60: return 261632;
      case 61: return 522753;
      case 62: return 522753;
      case 63: return 1;
      case 64: return 1;
      case 65: return 2;
      case 66: return 2;
      case 67: return 2;
      case 68: return 255;
      case 69: return 255;
      case 70: return 255;
      case 71: return 255;
      case 72: return 255;
      case 73: return 255;
      case 74: return 255;
      case 75: return 255;
      case 76: return 255;
      case 77: return 255;
      case 78: return 255;
      case 79: return 255;
      case 80: return 524288;
      case 81: return 524288;
      case 82: return 0;
      case 83: return 524288;
      case 84: return 524288;
      case 85: return 1;
      case 86: return 1048576;
      case 87: return 1048576;
      case 88: return 1048576;
      case 89: return 1048576;
      case 90: return 1048576;
      case 91: return 1048576;
      case 92: return 1048576;
      case 93: return 1048576;
      case 94: return 1048576;
      case 95: return 1048576;
      case 96: return 1048576;
      case 97: return 1048576;
      case 98: return 1048576;
      case 99: return 1048576;
      case 100: return 1048576;
      case 101: return 1048576;
      case 102: return 1048576;
      case 103: return 1024;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/kernels/gesummv/gesummv.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 4000;
      case 19: return 8000000;
      case 20: return 8000000;
      case 21: return 8000000;
      case 22: return 8000000;
      case 23: return 4000;
      case 24: return 4000;
      case 25: return 16000000;
      case 26: return 16000000;
      case 27: return 16000000;
      case 28: return 16000000;
      case 29: return 16000000;
      case 30: return 16000000;
      case 31: return 16000000;
      case 32: return 16000000;
      case 33: return 4000;
      case 34: return 4000;
      case 35: return 4000;
      case 36: return 4000;
      case 37: return 16000000;
      case 38: return 16000000;
      case 39: return 16000000;
      case 40: return 16000000;
      case 41: return 16000000;
      case 42: return 16000000;
      case 43: return 16000000;
      case 44: return 16000000;
      case 45: return 4000;
      case 46: return 4000;
      case 47: return 2000;
      case 48: return 2000;
      case 49: return 0;
      case 50: return 2000;
      case 51: return 2000;
      case 52: return 1;
      case 53: return 4000;
      case 54: return 4000;
      case 55: return 4000;
      case 56: return 4000;
      case 57: return 4000;
      case 58: return 4000;
      case 59: return 4000;
      case 60: return 4000;
      case 61: return 4000;
      case 62: return 4000;
      case 63: return 4000;
      case 64: return 4000;
      case 65: return 4000;
      case 66: return 4000;
      case 67: return 4000;
      case 68: return 4000;
      case 69: return 4000;
      case 70: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/kernels/bicg/bicg.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 800;
      case 22: return 800;
      case 23: return 800;
      case 24: return 800;
      case 25: return 800;
      case 26: return 4000;
      case 27: return 8000000;
      case 28: return 8000000;
      case 29: return 4000;
      case 30: return 16000000;
      case 31: return 16000000;
      case 32: return 16000000;
      case 33: return 16000000;
      case 34: return 16000000;
      case 35: return 16000000;
      case 36: return 16000000;
      case 37: return 16000000;
      case 38: return 4000;
      case 39: return 16000000;
      case 40: return 16000000;
      case 41: return 16000000;
      case 42: return 16000000;
      case 43: return 16000000;
      case 44: return 16000000;
      case 45: return 16000000;
      case 46: return 16000000;
      case 47: return 2000;
      case 48: return 2000;
      case 49: return 0;
      case 50: return 2000;
      case 51: return 2000;
      case 52: return 2000;
      case 53: return 2000;
      case 54: return 0;
      case 55: return 2000;
      case 56: return 2000;
      case 57: return 1;
      case 58: return 4000;
      case 59: return 4000;
      case 60: return 4000;
      case 61: return 4000;
      case 62: return 4000;
      case 63: return 4000;
      case 64: return 4000;
      case 65: return 4000;
      case 66: return 4000;
      case 67: return 4000;
      case 68: return 4000;
      case 69: return 4000;
      case 70: return 4000;
      case 71: return 4000;
      case 72: return 4000;
      case 73: return 4000;
      case 74: return 4000;
      case 75: return 1;
      case 76: return 1;
      case 77: return 4000;
      case 78: return 4000;
      case 79: return 4000;
      case 80: return 4000;
      case 81: return 4000;
      case 82: return 4000;
      case 83: return 4000;
      case 84: return 4000;
      case 85: return 4000;
      case 86: return 4000;
      case 87: return 4000;
      case 88: return 4000;
      case 89: return 4000;
      case 90: return 4000;
      case 91: return 4000;
      case 92: return 4000;
      case 93: return 4000;
      case 94: return 1;
      case 95: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/kernels/trisolv/trisolv.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 4000;
      case 13: return 4000;
      case 14: return 4000;
      case 15: return 8000000;
      case 16: return 8000000;
      case 17: return 4000;
      case 18: return 4000;
      case 19: return 1;
      case 20: return 1;
      case 21: return 3998000;
      case 22: return 3998000;
      case 23: return 3998000;
      case 24: return 3998000;
      case 25: return 3998000;
      case 26: return 3998000;
      case 27: return 2000;
      case 28: return 2000;
      case 29: return 2000;
      case 30: return 3999;
      case 31: return 3999;
      case 32: return 4000;
      case 33: return 4000;
      case 34: return 1;
      case 35: return 1;
      case 36: return 3998000;
      case 37: return 3998000;
      case 38: return 3998000;
      case 39: return 3998000;
      case 40: return 3998000;
      case 41: return 3998000;
      case 42: return 2000;
      case 43: return 2000;
      case 44: return 2000;
      case 45: return 3999;
      case 46: return 3999;
      case 47: return 1;
      case 48: return 4000;
      case 49: return 4000;
      case 50: return 4000;
      case 51: return 4000;
      case 52: return 4000;
      case 53: return 4000;
      case 54: return 4000;
      case 55: return 4000;
      case 56: return 4000;
      case 57: return 4000;
      case 58: return 4000;
      case 59: return 4000;
      case 60: return 4000;
      case 61: return 4000;
      case 62: return 4000;
      case 63: return 4000;
      case 64: return 4000;
      case 65: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/kernels/mvt/mvt.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 4000;
      case 22: return 4000;
      case 23: return 4000;
      case 24: return 4000;
      case 25: return 4000;
      case 26: return 4000;
      case 27: return 8000000;
      case 28: return 8000000;
      case 29: return 4000;
      case 30: return 8000000;
      case 31: return 8000000;
      case 32: return 8000000;
      case 33: return 8000000;
      case 34: return 8000000;
      case 35: return 8000000;
      case 36: return 4000;
      case 37: return 8000000;
      case 38: return 8000000;
      case 39: return 8000000;
      case 40: return 8000000;
      case 41: return 8000000;
      case 42: return 8000000;
      case 43: return 4000;
      case 44: return 8000000;
      case 45: return 8000000;
      case 46: return 8000000;
      case 47: return 8000000;
      case 48: return 8000000;
      case 49: return 8000000;
      case 50: return 4000;
      case 51: return 8000000;
      case 52: return 8000000;
      case 53: return 8000000;
      case 54: return 8000000;
      case 55: return 8000000;
      case 56: return 8000000;
      case 57: return 2000;
      case 58: return 2000;
      case 59: return 0;
      case 60: return 2000;
      case 61: return 2000;
      case 62: return 2000;
      case 63: return 2000;
      case 64: return 0;
      case 65: return 2000;
      case 66: return 2000;
      case 67: return 1;
      case 68: return 4000;
      case 69: return 4000;
      case 70: return 4000;
      case 71: return 4000;
      case 72: return 4000;
      case 73: return 4000;
      case 74: return 4000;
      case 75: return 4000;
      case 76: return 4000;
      case 77: return 4000;
      case 78: return 4000;
      case 79: return 4000;
      case 80: return 4000;
      case 81: return 4000;
      case 82: return 4000;
      case 83: return 4000;
      case 84: return 4000;
      case 85: return 1;
      case 86: return 4000;
      case 87: return 4000;
      case 88: return 4000;
      case 89: return 4000;
      case 90: return 4000;
      case 91: return 4000;
      case 92: return 4000;
      case 93: return 4000;
      case 94: return 4000;
      case 95: return 4000;
      case 96: return 4000;
      case 97: return 4000;
      case 98: return 4000;
      case 99: return 4000;
      case 100: return 4000;
      case 101: return 4000;
      case 102: return 4000;
      case 103: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/kernels/syr2k/syr2k.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 524288;
      case 13: return 524288;
      case 14: return 524288;
      case 15: return 524288;
      case 16: return 524288;
      case 17: return 524288;
      case 18: return 524288;
      case 19: return 524288;
      case 20: return 131072;
      case 21: return 131072;
      case 22: return 131072;
      case 23: return 131072;
      case 24: return 131072;
      case 25: return 131072;
      case 26: return 131072;
      case 27: return 131072;
      case 28: return 1048576;
      case 29: return 1073741824;
      case 30: return 1073741824;
      case 31: return 1073741824;
      case 32: return 1073741824;
      case 33: return 1073741824;
      case 34: return 1073741824;
      case 35: return 131072;
      case 36: return 131072;
      case 37: return 131072;
      case 38: return 131072;
      case 39: return 131072;
      case 40: return 131072;
      case 41: return 131072;
      case 42: return 131072;
      case 43: return 1048576;
      case 44: return 1073741824;
      case 45: return 1073741824;
      case 46: return 1073741824;
      case 47: return 1073741824;
      case 48: return 1073741824;
      case 49: return 1073741824;
      case 50: return 524288;
      case 51: return 524288;
      case 52: return 0;
      case 53: return 524288;
      case 54: return 524288;
      case 55: return 1;
      case 56: return 1048576;
      case 57: return 1048576;
      case 58: return 1048576;
      case 59: return 1048576;
      case 60: return 1048576;
      case 61: return 1048576;
      case 62: return 1048576;
      case 63: return 1048576;
      case 64: return 1048576;
      case 65: return 1048576;
      case 66: return 1048576;
      case 67: return 1048576;
      case 68: return 1048576;
      case 69: return 1048576;
      case 70: return 1048576;
      case 71: return 1048576;
      case 72: return 1048576;
      case 73: return 1024;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/kernels/atax/atax.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 800;
      case 16: return 800;
      case 17: return 800;
      case 18: return 800;
      case 19: return 800;
      case 20: return 8000000;
      case 21: return 8000000;
      case 22: return 4000;
      case 23: return 8000000;
      case 24: return 8000000;
      case 25: return 8000000;
      case 26: return 8000000;
      case 27: return 8000000;
      case 28: return 8000000;
      case 29: return 4000;
      case 30: return 4000;
      case 31: return 4000;
      case 32: return 4000;
      case 33: return 3996000;
      case 34: return 3996000;
      case 35: return 3996000;
      case 36: return 3996000;
      case 37: return 3996000;
      case 38: return 3996000;
      case 39: return 4000;
      case 40: return 4000;
      case 41: return 4000;
      case 42: return 4000;
      case 43: return 4000;
      case 44: return 4000;
      case 45: return 4000;
      case 46: return 4000;
      case 47: return 4000;
      case 48: return 4000;
      case 49: return 4000;
      case 50: return 4000;
      case 51: return 4000;
      case 52: return 8000000;
      case 53: return 8000000;
      case 54: return 8000000;
      case 55: return 8000000;
      case 56: return 8000000;
      case 57: return 8000000;
      case 58: return 4000;
      case 59: return 4000;
      case 60: return 4000;
      case 61: return 4000;
      case 62: return 3996000;
      case 63: return 3996000;
      case 64: return 3996000;
      case 65: return 3996000;
      case 66: return 3996000;
      case 67: return 3996000;
      case 68: return 4000;
      case 69: return 4000;
      case 70: return 4000;
      case 71: return 4000;
      case 72: return 4000;
      case 73: return 4000;
      case 74: return 4000;
      case 75: return 4000;
      case 76: return 4000;
      case 77: return 4000;
      case 78: return 4000;
      case 79: return 4000;
      case 80: return 2000;
      case 81: return 2000;
      case 82: return 0;
      case 83: return 2000;
      case 84: return 2000;
      case 85: return 1;
      case 86: return 4000;
      case 87: return 4000;
      case 88: return 4000;
      case 89: return 4000;
      case 90: return 4000;
      case 91: return 4000;
      case 92: return 4000;
      case 93: return 4000;
      case 94: return 4000;
      case 95: return 4000;
      case 96: return 4000;
      case 97: return 4000;
      case 98: return 4000;
      case 99: return 4000;
      case 100: return 4000;
      case 101: return 4000;
      case 102: return 4000;
      case 103: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/kernels/3mm/3mm.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 262144;
      case 25: return 262144;
      case 26: return 262144;
      case 27: return 262144;
      case 28: return 262144;
      case 29: return 262144;
      case 30: return 262144;
      case 31: return 262144;
      case 32: return 524288;
      case 33: return 524288;
      case 34: return 524288;
      case 35: return 524288;
      case 36: return 1048576;
      case 37: return 536870912;
      case 38: return 536870912;
      case 39: return 536870912;
      case 40: return 536870912;
      case 41: return 536870912;
      case 42: return 536870912;
      case 43: return 1048576;
      case 44: return 536870912;
      case 45: return 536870912;
      case 46: return 536870912;
      case 47: return 536870912;
      case 48: return 536870912;
      case 49: return 536870912;
      case 50: return 1048576;
      case 51: return 536870912;
      case 52: return 536870912;
      case 53: return 536870912;
      case 54: return 536870912;
      case 55: return 536870912;
      case 56: return 536870912;
      case 57: return 1048576;
      case 58: return 536870912;
      case 59: return 536870912;
      case 60: return 536870912;
      case 61: return 536870912;
      case 62: return 536870912;
      case 63: return 536870912;
      case 64: return 1048576;
      case 65: return 536870912;
      case 66: return 536870912;
      case 67: return 536870912;
      case 68: return 536870912;
      case 69: return 536870912;
      case 70: return 536870912;
      case 71: return 1048576;
      case 72: return 536870912;
      case 73: return 536870912;
      case 74: return 536870912;
      case 75: return 536870912;
      case 76: return 536870912;
      case 77: return 536870912;
      case 78: return 524288;
      case 79: return 524288;
      case 80: return 0;
      case 81: return 524288;
      case 82: return 524288;
      case 83: return 1;
      case 84: return 1048576;
      case 85: return 1048576;
      case 86: return 1048576;
      case 87: return 1048576;
      case 88: return 1048576;
      case 89: return 1048576;
      case 90: return 1048576;
      case 91: return 1048576;
      case 92: return 1048576;
      case 93: return 1048576;
      case 94: return 1048576;
      case 95: return 1048576;
      case 96: return 1048576;
      case 97: return 1048576;
      case 98: return 1048576;
      case 99: return 1048576;
      case 100: return 1048576;
      case 101: return 1024;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/kernels/syrk/syrk.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 262144;
      case 10: return 262144;
      case 11: return 262144;
      case 12: return 262144;
      case 13: return 524288;
      case 14: return 524288;
      case 15: return 524288;
      case 16: return 524288;
      case 17: return 131072;
      case 18: return 131072;
      case 19: return 131072;
      case 20: return 131072;
      case 21: return 131072;
      case 22: return 131072;
      case 23: return 131072;
      case 24: return 131072;
      case 25: return 1048576;
      case 26: return 536870912;
      case 27: return 536870912;
      case 28: return 536870912;
      case 29: return 536870912;
      case 30: return 536870912;
      case 31: return 536870912;
      case 32: return 131072;
      case 33: return 131072;
      case 34: return 131072;
      case 35: return 131072;
      case 36: return 131072;
      case 37: return 131072;
      case 38: return 131072;
      case 39: return 131072;
      case 40: return 1048576;
      case 41: return 536870912;
      case 42: return 536870912;
      case 43: return 536870912;
      case 44: return 536870912;
      case 45: return 536870912;
      case 46: return 536870912;
      case 47: return 524288;
      case 48: return 524288;
      case 49: return 0;
      case 50: return 524288;
      case 51: return 524288;
      case 52: return 1;
      case 53: return 1048576;
      case 54: return 1048576;
      case 55: return 1048576;
      case 56: return 1048576;
      case 57: return 1048576;
      case 58: return 1048576;
      case 59: return 1048576;
      case 60: return 1048576;
      case 61: return 1048576;
      case 62: return 1048576;
      case 63: return 1048576;
      case 64: return 1048576;
      case 65: return 1048576;
      case 66: return 1048576;
      case 67: return 1048576;
      case 68: return 1048576;
      case 69: return 1048576;
      case 70: return 1024;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/kernels/symm/symm.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 524288;
      case 13: return 524288;
      case 14: return 524288;
      case 15: return 524288;
      case 16: return 524288;
      case 17: return 524288;
      case 18: return 262144;
      case 19: return 262144;
      case 20: return 262144;
      case 21: return 262144;
      case 22: return 535299072;
      case 23: return 535299072;
      case 24: return 535299072;
      case 25: return 535299072;
      case 26: return 535299072;
      case 27: return 535299072;
      case 28: return 1048576;
      case 29: return 1048576;
      case 30: return 1048576;
      case 31: return 1048576;
      case 32: return 535299072;
      case 33: return 535299072;
      case 34: return 535299072;
      case 35: return 535299072;
      case 36: return 535299072;
      case 37: return 535299072;
      case 38: return 1048576;
      case 39: return 1048576;
      case 40: return 1048576;
      case 41: return 1048576;
      case 42: return 524288;
      case 43: return 524288;
      case 44: return 0;
      case 45: return 524288;
      case 46: return 524288;
      case 47: return 1;
      case 48: return 1048576;
      case 49: return 1048576;
      case 50: return 1048576;
      case 51: return 1048576;
      case 52: return 1048576;
      case 53: return 1048576;
      case 54: return 1048576;
      case 55: return 1048576;
      case 56: return 1048576;
      case 57: return 1048576;
      case 58: return 1048576;
      case 59: return 1048576;
      case 60: return 1048576;
      case 61: return 1048576;
      case 62: return 1048576;
      case 63: return 1048576;
      case 64: return 1048576;
      case 65: return 1024;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/kernels/trmm/trmm.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 524288;
      case 10: return 524288;
      case 11: return 524288;
      case 12: return 524288;
      case 13: return 524288;
      case 14: return 524288;
      case 15: return 1047552;
      case 16: return 267911168;
      case 17: return 267911168;
      case 18: return 267911168;
      case 19: return 267911168;
      case 20: return 267911168;
      case 21: return 267911168;
      case 22: return 524288;
      case 23: return 524288;
      case 24: return 524288;
      case 25: return 1047552;
      case 26: return 267911168;
      case 27: return 267911168;
      case 28: return 267911168;
      case 29: return 267911168;
      case 30: return 267911168;
      case 31: return 267911168;
      case 32: return 524288;
      case 33: return 524288;
      case 34: return 524288;
      case 35: return 524288;
      case 36: return 524288;
      case 37: return 0;
      case 38: return 524288;
      case 39: return 524288;
      case 40: return 1;
      case 41: return 1048576;
      case 42: return 1048576;
      case 43: return 1048576;
      case 44: return 1048576;
      case 45: return 1048576;
      case 46: return 1048576;
      case 47: return 1048576;
      case 48: return 1048576;
      case 49: return 1048576;
      case 50: return 1048576;
      case 51: return 1048576;
      case 52: return 1048576;
      case 53: return 1048576;
      case 54: return 1048576;
      case 55: return 1048576;
      case 56: return 1048576;
      case 57: return 1048576;
      case 58: return 1024;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/linear-algebra/kernels/doitgen/doitgen.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1048576;
      case 13: return 1048576;
      case 14: return 1048576;
      case 15: return 1048576;
      case 16: return 4096;
      case 17: return 4096;
      case 18: return 4096;
      case 19: return 4096;
      case 20: return 2097152;
      case 21: return 134217728;
      case 22: return 134217728;
      case 23: return 134217728;
      case 24: return 134217728;
      case 25: return 134217728;
      case 26: return 134217728;
      case 27: return 16384;
      case 28: return 16384;
      case 29: return 16384;
      case 30: return 16384;
      case 31: return 16384;
      case 32: return 16384;
      case 33: return 16384;
      case 34: return 16384;
      case 35: return 16384;
      case 36: return 16384;
      case 37: return 16384;
      case 38: return 16384;
      case 39: return 16384;
      case 40: return 16384;
      case 41: return 16384;
      case 42: return 16384;
      case 43: return 16384;
      case 44: return 16384;
      case 45: return 16384;
      case 46: return 16384;
      case 47: return 16384;
      case 48: return 16384;
      case 49: return 16384;
      case 50: return 16384;
      case 51: return 16384;
      case 52: return 16384;
      case 53: return 16384;
      case 54: return 16384;
      case 55: return 16384;
      case 56: return 16384;
      case 57: return 16384;
      case 58: return 16384;
      case 59: return 16384;
      case 60: return 16384;
      case 61: return 16384;
      case 62: return 16384;
      case 63: return 16384;
      case 64: return 16384;
      case 65: return 16384;
      case 66: return 16384;
      case 67: return 16384;
      case 68: return 16384;
      case 69: return 16384;
      case 70: return 16384;
      case 71: return 16384;
      case 72: return 16384;
      case 73: return 16384;
      case 74: return 16384;
      case 75: return 16384;
      case 76: return 16384;
      case 77: return 16384;
      case 78: return 16384;
      case 79: return 16384;
      case 80: return 16384;
      case 81: return 16384;
      case 82: return 16384;
      case 83: return 16384;
      case 84: return 16384;
      case 85: return 16384;
      case 86: return 16384;
      case 87: return 16384;
      case 88: return 16384;
      case 89: return 16384;
      case 90: return 16384;
      case 91: return 16384;
      case 92: return 16384;
      case 93: return 16384;
      case 94: return 16384;
      case 95: return 16384;
      case 96: return 16384;
      case 97: return 16384;
      case 98: return 16384;
      case 99: return 16384;
      case 100: return 16384;
      case 101: return 16384;
      case 102: return 16384;
      case 103: return 16384;
      case 104: return 16384;
      case 105: return 16384;
      case 106: return 16384;
      case 107: return 16384;
      case 108: return 16384;
      case 109: return 16384;
      case 110: return 16384;
      case 111: return 16384;
      case 112: return 16384;
      case 113: return 16384;
      case 114: return 16384;
      case 115: return 16384;
      case 116: return 16384;
      case 117: return 16384;
      case 118: return 16384;
      case 119: return 16384;
      case 120: return 16384;
      case 121: return 16384;
      case 122: return 16384;
      case 123: return 16384;
      case 124: return 16384;
      case 125: return 16384;
      case 126: return 16384;
      case 127: return 16384;
      case 128: return 16384;
      case 129: return 16384;
      case 130: return 16384;
      case 131: return 16384;
      case 132: return 16384;
      case 133: return 16384;
      case 134: return 16384;
      case 135: return 16384;
      case 136: return 16384;
      case 137: return 16384;
      case 138: return 16384;
      case 139: return 16384;
      case 140: return 16384;
      case 141: return 16384;
      case 142: return 16384;
      case 143: return 16384;
      case 144: return 16384;
      case 145: return 16384;
      case 146: return 16384;
      case 147: return 16384;
      case 148: return 16384;
      case 149: return 16384;
      case 150: return 16384;
      case 151: return 16384;
      case 152: return 16384;
      case 153: return 16384;
      case 154: return 16384;
      case 155: return 0;
      case 156: return 0;
      case 157: return 0;
      case 158: return 0;
      case 159: return 0;
      case 160: return 0;
      case 161: return 0;
      case 162: return 0;
      case 163: return 2097152;
      case 164: return 134217728;
      case 165: return 134217728;
      case 166: return 134217728;
      case 167: return 134217728;
      case 168: return 134217728;
      case 169: return 134217728;
      case 170: return 16384;
      case 171: return 16384;
      case 172: return 16384;
      case 173: return 16384;
      case 174: return 16384;
      case 175: return 16384;
      case 176: return 16384;
      case 177: return 16384;
      case 178: return 16384;
      case 179: return 16384;
      case 180: return 16384;
      case 181: return 16384;
      case 182: return 16384;
      case 183: return 16384;
      case 184: return 16384;
      case 185: return 16384;
      case 186: return 16384;
      case 187: return 16384;
      case 188: return 16384;
      case 189: return 16384;
      case 190: return 16384;
      case 191: return 16384;
      case 192: return 16384;
      case 193: return 16384;
      case 194: return 16384;
      case 195: return 16384;
      case 196: return 16384;
      case 197: return 16384;
      case 198: return 16384;
      case 199: return 16384;
      case 200: return 16384;
      case 201: return 16384;
      case 202: return 16384;
      case 203: return 16384;
      case 204: return 16384;
      case 205: return 16384;
      case 206: return 16384;
      case 207: return 16384;
      case 208: return 16384;
      case 209: return 16384;
      case 210: return 16384;
      case 211: return 16384;
      case 212: return 16384;
      case 213: return 16384;
      case 214: return 16384;
      case 215: return 16384;
      case 216: return 16384;
      case 217: return 16384;
      case 218: return 16384;
      case 219: return 16384;
      case 220: return 16384;
      case 221: return 16384;
      case 222: return 16384;
      case 223: return 16384;
      case 224: return 16384;
      case 225: return 16384;
      case 226: return 16384;
      case 227: return 16384;
      case 228: return 16384;
      case 229: return 16384;
      case 230: return 16384;
      case 231: return 16384;
      case 232: return 16384;
      case 233: return 16384;
      case 234: return 16384;
      case 235: return 16384;
      case 236: return 16384;
      case 237: return 16384;
      case 238: return 16384;
      case 239: return 16384;
      case 240: return 16384;
      case 241: return 16384;
      case 242: return 16384;
      case 243: return 16384;
      case 244: return 16384;
      case 245: return 16384;
      case 246: return 16384;
      case 247: return 16384;
      case 248: return 16384;
      case 249: return 16384;
      case 250: return 16384;
      case 251: return 16384;
      case 252: return 16384;
      case 253: return 16384;
      case 254: return 16384;
      case 255: return 16384;
      case 256: return 16384;
      case 257: return 16384;
      case 258: return 16384;
      case 259: return 16384;
      case 260: return 16384;
      case 261: return 16384;
      case 262: return 16384;
      case 263: return 16384;
      case 264: return 16384;
      case 265: return 16384;
      case 266: return 16384;
      case 267: return 16384;
      case 268: return 16384;
      case 269: return 16384;
      case 270: return 16384;
      case 271: return 16384;
      case 272: return 16384;
      case 273: return 16384;
      case 274: return 16384;
      case 275: return 16384;
      case 276: return 16384;
      case 277: return 16384;
      case 278: return 16384;
      case 279: return 16384;
      case 280: return 16384;
      case 281: return 16384;
      case 282: return 16384;
      case 283: return 16384;
      case 284: return 16384;
      case 285: return 16384;
      case 286: return 16384;
      case 287: return 16384;
      case 288: return 16384;
      case 289: return 16384;
      case 290: return 16384;
      case 291: return 16384;
      case 292: return 16384;
      case 293: return 16384;
      case 294: return 16384;
      case 295: return 16384;
      case 296: return 16384;
      case 297: return 16384;
      case 298: return 0;
      case 299: return 0;
      case 300: return 0;
      case 301: return 0;
      case 302: return 0;
      case 303: return 0;
      case 304: return 0;
      case 305: return 0;
      case 306: return 1048576;
      case 307: return 1048576;
      case 308: return 0;
      case 309: return 1048576;
      case 310: return 1048576;
      case 311: return 1;
      case 312: return 2097152;
      case 313: return 2097152;
      case 314: return 2097152;
      case 315: return 2097152;
      case 316: return 2097152;
      case 317: return 2097152;
      case 318: return 2097152;
      case 319: return 2097152;
      case 320: return 2097152;
      case 321: return 2097152;
      case 322: return 2097152;
      case 323: return 2097152;
      case 324: return 2097152;
      case 325: return 2097152;
      case 326: return 2097152;
      case 327: return 2097152;
      case 328: return 2097152;
      case 329: return 128;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/medley/reg_detect/reg_detect.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 210000;
      case 19: return 210000;
      case 20: return 210000;
      case 21: return 210000;
      case 22: return 210000;
      case 23: return 210000;
      case 24: return 210000;
      case 25: return 210000;
      case 26: return 210000;
      case 27: return 210000;
      case 28: return 210000;
      case 29: return 210000;
      case 30: return 210000;
      case 31: return 210000;
      case 32: return 210000;
      case 33: return 210000;
      case 34: return 210000;
      case 35: return 210000;
      case 36: return 210000;
      case 37: return 210000;
      case 38: return 210000;
      case 39: return 210000;
      case 40: return 210000;
      case 41: return 210000;
      case 42: return 210000;
      case 43: return 210000;
      case 44: return 210000;
      case 45: return 210000;
      case 46: return 210000;
      case 47: return 210000;
      case 48: return 210000;
      case 49: return 210000;
      case 50: return 210000;
      case 51: return 210000;
      case 52: return 210000;
      case 53: return 210000;
      case 54: return 210000;
      case 55: return 210000;
      case 56: return 210000;
      case 57: return 210000;
      case 58: return 210000;
      case 59: return 210000;
      case 60: return 210000;
      case 61: return 210000;
      case 62: return 210000;
      case 63: return 210000;
      case 64: return 210000;
      case 65: return 210000;
      case 66: return 210000;
      case 67: return 210000;
      case 68: return 210000;
      case 69: return 210000;
      case 70: return 210000;
      case 71: return 210000;
      case 72: return 210000;
      case 73: return 210000;
      case 74: return 210000;
      case 75: return 210000;
      case 76: return 210000;
      case 77: return 210000;
      case 78: return 210000;
      case 79: return 210000;
      case 80: return 210000;
      case 81: return 210000;
      case 82: return 210000;
      case 83: return 210000;
      case 84: return 210000;
      case 85: return 210000;
      case 86: return 210000;
      case 87: return 210000;
      case 88: return 210000;
      case 89: return 210000;
      case 90: return 210000;
      case 91: return 210000;
      case 92: return 210000;
      case 93: return 210000;
      case 94: return 210000;
      case 95: return 210000;
      case 96: return 210000;
      case 97: return 210000;
      case 98: return 210000;
      case 99: return 210000;
      case 100: return 210000;
      case 101: return 210000;
      case 102: return 210000;
      case 103: return 210000;
      case 104: return 210000;
      case 105: return 210000;
      case 106: return 210000;
      case 107: return 210000;
      case 108: return 210000;
      case 109: return 210000;
      case 110: return 210000;
      case 111: return 210000;
      case 112: return 210000;
      case 113: return 210000;
      case 114: return 210000;
      case 115: return 210000;
      case 116: return 210000;
      case 117: return 210000;
      case 118: return 210000;
      case 119: return 210000;
      case 120: return 210000;
      case 121: return 210000;
      case 122: return 210000;
      case 123: return 210000;
      case 124: return 210000;
      case 125: return 210000;
      case 126: return 210000;
      case 127: return 210000;
      case 128: return 210000;
      case 129: return 210000;
      case 130: return 210000;
      case 131: return 210000;
      case 132: return 210000;
      case 133: return 210000;
      case 134: return 210000;
      case 135: return 210000;
      case 136: return 210000;
      case 137: return 210000;
      case 138: return 210000;
      case 139: return 210000;
      case 140: return 210000;
      case 141: return 210000;
      case 142: return 210000;
      case 143: return 210000;
      case 144: return 210000;
      case 145: return 210000;
      case 146: return 10000;
      case 147: return 10000;
      case 148: return 10000;
      case 149: return 10000;
      case 150: return 10000;
      case 151: return 10000;
      case 152: return 10000;
      case 153: return 10000;
      case 154: return 10000;
      case 155: return 10000;
      case 156: return 10000;
      case 157: return 10000;
      case 158: return 10000;
      case 159: return 10000;
      case 160: return 10000;
      case 161: return 10000;
      case 162: return 10000;
      case 163: return 10000;
      case 164: return 10000;
      case 165: return 10000;
      case 166: return 10000;
      case 167: return 10000;
      case 168: return 10000;
      case 169: return 10000;
      case 170: return 10000;
      case 171: return 10000;
      case 172: return 10000;
      case 173: return 10000;
      case 174: return 10000;
      case 175: return 10000;
      case 176: return 10000;
      case 177: return 10000;
      case 178: return 10000;
      case 179: return 10000;
      case 180: return 10000;
      case 181: return 10000;
      case 182: return 10000;
      case 183: return 10000;
      case 184: return 10000;
      case 185: return 10000;
      case 186: return 10000;
      case 187: return 10000;
      case 188: return 10000;
      case 189: return 10000;
      case 190: return 10000;
      case 191: return 10000;
      case 192: return 10000;
      case 193: return 10000;
      case 194: return 10000;
      case 195: return 10000;
      case 196: return 10000;
      case 197: return 10000;
      case 198: return 10000;
      case 199: return 10000;
      case 200: return 10000;
      case 201: return 10000;
      case 202: return 10000;
      case 203: return 10000;
      case 204: return 10000;
      case 205: return 10000;
      case 206: return 10000;
      case 207: return 10000;
      case 208: return 10000;
      case 209: return 10000;
      case 210: return 10000;
      case 211: return 10000;
      case 212: return 10000;
      case 213: return 10000;
      case 214: return 10000;
      case 215: return 10000;
      case 216: return 10000;
      case 217: return 10000;
      case 218: return 10000;
      case 219: return 10000;
      case 220: return 10000;
      case 221: return 10000;
      case 222: return 10000;
      case 223: return 10000;
      case 224: return 10000;
      case 225: return 10000;
      case 226: return 10000;
      case 227: return 10000;
      case 228: return 10000;
      case 229: return 10000;
      case 230: return 10000;
      case 231: return 10000;
      case 232: return 10000;
      case 233: return 10000;
      case 234: return 10000;
      case 235: return 10000;
      case 236: return 10000;
      case 237: return 10000;
      case 238: return 10000;
      case 239: return 10000;
      case 240: return 10000;
      case 241: return 10000;
      case 242: return 10000;
      case 243: return 10000;
      case 244: return 10000;
      case 245: return 10000;
      case 246: return 10000;
      case 247: return 10000;
      case 248: return 10000;
      case 249: return 10000;
      case 250: return 10000;
      case 251: return 10000;
      case 252: return 10000;
      case 253: return 10000;
      case 254: return 10000;
      case 255: return 10000;
      case 256: return 10000;
      case 257: return 10000;
      case 258: return 10000;
      case 259: return 10000;
      case 260: return 10000;
      case 261: return 10000;
      case 262: return 10000;
      case 263: return 10000;
      case 264: return 10000;
      case 265: return 10000;
      case 266: return 10000;
      case 267: return 10000;
      case 268: return 10000;
      case 269: return 10000;
      case 270: return 10000;
      case 271: return 10000;
      case 272: return 10000;
      case 273: return 10000;
      case 274: return 10000;
      case 275: return 10000;
      case 276: return 10000;
      case 277: return 10000;
      case 278: return 10000;
      case 279: return 10000;
      case 280: return 10000;
      case 281: return 10000;
      case 282: return 10000;
      case 283: return 10000;
      case 284: return 10000;
      case 285: return 10000;
      case 286: return 10000;
      case 287: return 10000;
      case 288: return 10000;
      case 289: return 10000;
      case 290: return 10000;
      case 291: return 10000;
      case 292: return 10000;
      case 293: return 10000;
      case 294: return 10000;
      case 295: return 10000;
      case 296: return 10000;
      case 297: return 10000;
      case 298: return 10000;
      case 299: return 10000;
      case 300: return 10000;
      case 301: return 10000;
      case 302: return 10000;
      case 303: return 10000;
      case 304: return 10000;
      case 305: return 10000;
      case 306: return 10000;
      case 307: return 10000;
      case 308: return 10000;
      case 309: return 10000;
      case 310: return 10000;
      case 311: return 10000;
      case 312: return 10000;
      case 313: return 10000;
      case 314: return 10000;
      case 315: return 10000;
      case 316: return 10000;
      case 317: return 10000;
      case 318: return 10000;
      case 319: return 10000;
      case 320: return 10000;
      case 321: return 10000;
      case 322: return 10000;
      case 323: return 10000;
      case 324: return 10000;
      case 325: return 10000;
      case 326: return 10000;
      case 327: return 10000;
      case 328: return 10000;
      case 329: return 10000;
      case 330: return 10000;
      case 331: return 10000;
      case 332: return 10000;
      case 333: return 10000;
      case 334: return 10000;
      case 335: return 10000;
      case 336: return 10000;
      case 337: return 10000;
      case 338: return 10000;
      case 339: return 10000;
      case 340: return 10000;
      case 341: return 10000;
      case 342: return 10000;
      case 343: return 10000;
      case 344: return 10000;
      case 345: return 10000;
      case 346: return 10000;
      case 347: return 10000;
      case 348: return 10000;
      case 349: return 10000;
      case 350: return 10000;
      case 351: return 10000;
      case 352: return 10000;
      case 353: return 10000;
      case 354: return 10000;
      case 355: return 10000;
      case 356: return 10000;
      case 357: return 10000;
      case 358: return 10000;
      case 359: return 10000;
      case 360: return 10000;
      case 361: return 10000;
      case 362: return 10000;
      case 363: return 10000;
      case 364: return 10000;
      case 365: return 10000;
      case 366: return 10000;
      case 367: return 10000;
      case 368: return 10000;
      case 369: return 10000;
      case 370: return 10000;
      case 371: return 10000;
      case 372: return 10000;
      case 373: return 10000;
      case 374: return 10000;
      case 375: return 10000;
      case 376: return 10000;
      case 377: return 10000;
      case 378: return 10000;
      case 379: return 10000;
      case 380: return 10000;
      case 381: return 10000;
      case 382: return 10000;
      case 383: return 10000;
      case 384: return 10000;
      case 385: return 10000;
      case 386: return 10000;
      case 387: return 10000;
      case 388: return 10000;
      case 389: return 10000;
      case 390: return 10000;
      case 391: return 10000;
      case 392: return 10000;
      case 393: return 10000;
      case 394: return 10000;
      case 395: return 10000;
      case 396: return 10000;
      case 397: return 10000;
      case 398: return 10000;
      case 399: return 10000;
      case 400: return 10000;
      case 401: return 10000;
      case 402: return 10000;
      case 403: return 10000;
      case 404: return 10000;
      case 405: return 10000;
      case 406: return 10000;
      case 407: return 10000;
      case 408: return 10000;
      case 409: return 10000;
      case 410: return 10000;
      case 411: return 10000;
      case 412: return 10000;
      case 413: return 10000;
      case 414: return 10000;
      case 415: return 10000;
      case 416: return 10000;
      case 417: return 10000;
      case 418: return 10000;
      case 419: return 10000;
      case 420: return 10000;
      case 421: return 10000;
      case 422: return 10000;
      case 423: return 10000;
      case 424: return 10000;
      case 425: return 10000;
      case 426: return 10000;
      case 427: return 10000;
      case 428: return 10000;
      case 429: return 10000;
      case 430: return 10000;
      case 431: return 10000;
      case 432: return 10000;
      case 433: return 10000;
      case 434: return 10000;
      case 435: return 10000;
      case 436: return 10000;
      case 437: return 10000;
      case 438: return 10000;
      case 439: return 10000;
      case 440: return 10000;
      case 441: return 10000;
      case 442: return 10000;
      case 443: return 10000;
      case 444: return 10000;
      case 445: return 10000;
      case 446: return 10000;
      case 447: return 10000;
      case 448: return 10000;
      case 449: return 10000;
      case 450: return 10000;
      case 451: return 10000;
      case 452: return 10000;
      case 453: return 10000;
      case 454: return 10000;
      case 455: return 10000;
      case 456: return 10000;
      case 457: return 10000;
      case 458: return 10000;
      case 459: return 10000;
      case 460: return 10000;
      case 461: return 10000;
      case 462: return 10000;
      case 463: return 10000;
      case 464: return 10000;
      case 465: return 10000;
      case 466: return 10000;
      case 467: return 10000;
      case 468: return 10000;
      case 469: return 10000;
      case 470: return 10000;
      case 471: return 10000;
      case 472: return 10000;
      case 473: return 10000;
      case 474: return 10000;
      case 475: return 10000;
      case 476: return 10000;
      case 477: return 10000;
      case 478: return 10000;
      case 479: return 10000;
      case 480: return 10000;
      case 481: return 10000;
      case 482: return 10000;
      case 483: return 10000;
      case 484: return 10000;
      case 485: return 10000;
      case 486: return 10000;
      case 487: return 10000;
      case 488: return 10000;
      case 489: return 10000;
      case 490: return 10000;
      case 491: return 10000;
      case 492: return 10000;
      case 493: return 10000;
      case 494: return 10000;
      case 495: return 10000;
      case 496: return 10000;
      case 497: return 10000;
      case 498: return 10000;
      case 499: return 10000;
      case 500: return 10000;
      case 501: return 10000;
      case 502: return 10000;
      case 503: return 10000;
      case 504: return 10000;
      case 505: return 10000;
      case 506: return 10000;
      case 507: return 10000;
      case 508: return 10000;
      case 509: return 10000;
      case 510: return 10000;
      case 511: return 10000;
      case 512: return 10000;
      case 513: return 10000;
      case 514: return 10000;
      case 515: return 10000;
      case 516: return 10000;
      case 517: return 10000;
      case 518: return 10000;
      case 519: return 10000;
      case 520: return 10000;
      case 521: return 10000;
      case 522: return 10000;
      case 523: return 10000;
      case 524: return 10000;
      case 525: return 10000;
      case 526: return 10000;
      case 527: return 10000;
      case 528: return 10000;
      case 529: return 10000;
      case 530: return 10000;
      case 531: return 10000;
      case 532: return 10000;
      case 533: return 10000;
      case 534: return 10000;
      case 535: return 10000;
      case 536: return 10000;
      case 537: return 10000;
      case 538: return 10000;
      case 539: return 10000;
      case 540: return 10000;
      case 541: return 10000;
      case 542: return 10000;
      case 543: return 10000;
      case 544: return 10000;
      case 545: return 10000;
      case 546: return 10000;
      case 547: return 10000;
      case 548: return 10000;
      case 549: return 10000;
      case 550: return 10000;
      case 551: return 10000;
      case 552: return 10000;
      case 553: return 10000;
      case 554: return 10000;
      case 555: return 10000;
      case 556: return 10000;
      case 557: return 10000;
      case 558: return 10000;
      case 559: return 10000;
      case 560: return 10000;
      case 561: return 10000;
      case 562: return 10000;
      case 563: return 10000;
      case 564: return 10000;
      case 565: return 10000;
      case 566: return 10000;
      case 567: return 10000;
      case 568: return 10000;
      case 569: return 10000;
      case 570: return 10000;
      case 571: return 10000;
      case 572: return 10000;
      case 573: return 10000;
      case 574: return 10000;
      case 575: return 10000;
      case 576: return 10000;
      case 577: return 10000;
      case 578: return 10000;
      case 579: return 10000;
      case 580: return 10000;
      case 581: return 10000;
      case 582: return 10000;
      case 583: return 10000;
      case 584: return 10000;
      case 585: return 10000;
      case 586: return 10000;
      case 587: return 10000;
      case 588: return 10000;
      case 589: return 10000;
      case 590: return 10000;
      case 591: return 10000;
      case 592: return 10000;
      case 593: return 10000;
      case 594: return 10000;
      case 595: return 10000;
      case 596: return 10000;
      case 597: return 10000;
      case 598: return 10000;
      case 599: return 10000;
      case 600: return 10000;
      case 601: return 10000;
      case 602: return 10000;
      case 603: return 10000;
      case 604: return 10000;
      case 605: return 10000;
      case 606: return 10000;
      case 607: return 10000;
      case 608: return 10000;
      case 609: return 10000;
      case 610: return 10000;
      case 611: return 10000;
      case 612: return 10000;
      case 613: return 10000;
      case 614: return 10000;
      case 615: return 10000;
      case 616: return 10000;
      case 617: return 10000;
      case 618: return 10000;
      case 619: return 10000;
      case 620: return 10000;
      case 621: return 10000;
      case 622: return 10000;
      case 623: return 10000;
      case 624: return 10000;
      case 625: return 10000;
      case 626: return 10000;
      case 627: return 10000;
      case 628: return 10000;
      case 629: return 10000;
      case 630: return 10000;
      case 631: return 10000;
      case 632: return 10000;
      case 633: return 10000;
      case 634: return 10000;
      case 635: return 10000;
      case 636: return 10000;
      case 637: return 10000;
      case 638: return 10000;
      case 639: return 10000;
      case 640: return 10000;
      case 641: return 10000;
      case 642: return 10000;
      case 643: return 10000;
      case 644: return 10000;
      case 645: return 10000;
      case 646: return 10000;
      case 647: return 10000;
      case 648: return 10000;
      case 649: return 10000;
      case 650: return 10000;
      case 651: return 10000;
      case 652: return 10000;
      case 653: return 10000;
      case 654: return 10000;
      case 655: return 10000;
      case 656: return 10000;
      case 657: return 10000;
      case 658: return 10000;
      case 659: return 10000;
      case 660: return 10000;
      case 661: return 10000;
      case 662: return 10000;
      case 663: return 10000;
      case 664: return 10000;
      case 665: return 10000;
      case 666: return 10000;
      case 667: return 10000;
      case 668: return 10000;
      case 669: return 10000;
      case 670: return 10000;
      case 671: return 10000;
      case 672: return 10000;
      case 673: return 10000;
      case 674: return 10000;
      case 675: return 10000;
      case 676: return 10000;
      case 677: return 10000;
      case 678: return 10000;
      case 679: return 10000;
      case 680: return 10000;
      case 681: return 10000;
      case 682: return 10000;
      case 683: return 10000;
      case 684: return 10000;
      case 685: return 10000;
      case 686: return 10000;
      case 687: return 10000;
      case 688: return 10000;
      case 689: return 10000;
      case 690: return 10000;
      case 691: return 10000;
      case 692: return 10000;
      case 693: return 10000;
      case 694: return 10000;
      case 695: return 10000;
      case 696: return 10000;
      case 697: return 10000;
      case 698: return 10000;
      case 699: return 10000;
      case 700: return 10000;
      case 701: return 10000;
      case 702: return 10000;
      case 703: return 10000;
      case 704: return 10000;
      case 705: return 10000;
      case 706: return 10000;
      case 707: return 10000;
      case 708: return 10000;
      case 709: return 10000;
      case 710: return 10000;
      case 711: return 10000;
      case 712: return 10000;
      case 713: return 10000;
      case 714: return 10000;
      case 715: return 10000;
      case 716: return 10000;
      case 717: return 10000;
      case 718: return 10000;
      case 719: return 10000;
      case 720: return 10000;
      case 721: return 10000;
      case 722: return 10000;
      case 723: return 10000;
      case 724: return 10000;
      case 725: return 10000;
      case 726: return 10000;
      case 727: return 10000;
      case 728: return 10000;
      case 729: return 10000;
      case 730: return 10000;
      case 731: return 10000;
      case 732: return 10000;
      case 733: return 10000;
      case 734: return 10000;
      case 735: return 10000;
      case 736: return 10000;
      case 737: return 10000;
      case 738: return 10000;
      case 739: return 10000;
      case 740: return 10000;
      case 741: return 10000;
      case 742: return 10000;
      case 743: return 10000;
      case 744: return 10000;
      case 745: return 10000;
      case 746: return 10000;
      case 747: return 10000;
      case 748: return 10000;
      case 749: return 10000;
      case 750: return 10000;
      case 751: return 10000;
      case 752: return 10000;
      case 753: return 10000;
      case 754: return 10000;
      case 755: return 10000;
      case 756: return 10000;
      case 757: return 10000;
      case 758: return 10000;
      case 759: return 10000;
      case 760: return 10000;
      case 761: return 10000;
      case 762: return 10000;
      case 763: return 10000;
      case 764: return 10000;
      case 765: return 10000;
      case 766: return 10000;
      case 767: return 10000;
      case 768: return 10000;
      case 769: return 10000;
      case 770: return 10000;
      case 771: return 10000;
      case 772: return 10000;
      case 773: return 10000;
      case 774: return 10000;
      case 775: return 10000;
      case 776: return 10000;
      case 777: return 10000;
      case 778: return 10000;
      case 779: return 10000;
      case 780: return 10000;
      case 781: return 10000;
      case 782: return 10000;
      case 783: return 10000;
      case 784: return 10000;
      case 785: return 10000;
      case 786: return 10000;
      case 787: return 10000;
      case 788: return 10000;
      case 789: return 10000;
      case 790: return 10000;
      case 791: return 10000;
      case 792: return 10000;
      case 793: return 10000;
      case 794: return 10000;
      case 795: return 10000;
      case 796: return 10000;
      case 797: return 10000;
      case 798: return 10000;
      case 799: return 10000;
      case 800: return 10000;
      case 801: return 10000;
      case 802: return 10000;
      case 803: return 10000;
      case 804: return 10000;
      case 805: return 10000;
      case 806: return 10000;
      case 807: return 10000;
      case 808: return 10000;
      case 809: return 10000;
      case 810: return 10000;
      case 811: return 10000;
      case 812: return 10000;
      case 813: return 10000;
      case 814: return 10000;
      case 815: return 10000;
      case 816: return 10000;
      case 817: return 10000;
      case 818: return 10000;
      case 819: return 10000;
      case 820: return 10000;
      case 821: return 10000;
      case 822: return 10000;
      case 823: return 10000;
      case 824: return 10000;
      case 825: return 10000;
      case 826: return 10000;
      case 827: return 10000;
      case 828: return 10000;
      case 829: return 10000;
      case 830: return 10000;
      case 831: return 10000;
      case 832: return 10000;
      case 833: return 10000;
      case 834: return 10000;
      case 835: return 10000;
      case 836: return 10000;
      case 837: return 10000;
      case 838: return 10000;
      case 839: return 10000;
      case 840: return 10000;
      case 841: return 10000;
      case 842: return 10000;
      case 843: return 10000;
      case 844: return 10000;
      case 845: return 10000;
      case 846: return 10000;
      case 847: return 10000;
      case 848: return 10000;
      case 849: return 10000;
      case 850: return 10000;
      case 851: return 10000;
      case 852: return 10000;
      case 853: return 10000;
      case 854: return 10000;
      case 855: return 10000;
      case 856: return 10000;
      case 857: return 10000;
      case 858: return 10000;
      case 859: return 10000;
      case 860: return 10000;
      case 861: return 10000;
      case 862: return 10000;
      case 863: return 10000;
      case 864: return 10000;
      case 865: return 10000;
      case 866: return 10000;
      case 867: return 10000;
      case 868: return 10000;
      case 869: return 10000;
      case 870: return 10000;
      case 871: return 10000;
      case 872: return 10000;
      case 873: return 10000;
      case 874: return 10000;
      case 875: return 10000;
      case 876: return 10000;
      case 877: return 10000;
      case 878: return 10000;
      case 879: return 10000;
      case 880: return 10000;
      case 881: return 10000;
      case 882: return 10000;
      case 883: return 10000;
      case 884: return 10000;
      case 885: return 10000;
      case 886: return 10000;
      case 887: return 10000;
      case 888: return 10000;
      case 889: return 10000;
      case 890: return 10000;
      case 891: return 10000;
      case 892: return 10000;
      case 893: return 10000;
      case 894: return 10000;
      case 895: return 10000;
      case 896: return 10000;
      case 897: return 10000;
      case 898: return 10000;
      case 899: return 10000;
      case 900: return 10000;
      case 901: return 10000;
      case 902: return 10000;
      case 903: return 10000;
      case 904: return 10000;
      case 905: return 10000;
      case 906: return 10000;
      case 907: return 10000;
      case 908: return 10000;
      case 909: return 10000;
      case 910: return 10000;
      case 911: return 10000;
      case 912: return 10000;
      case 913: return 10000;
      case 914: return 10000;
      case 915: return 10000;
      case 916: return 10000;
      case 917: return 10000;
      case 918: return 10000;
      case 919: return 10000;
      case 920: return 10000;
      case 921: return 10000;
      case 922: return 10000;
      case 923: return 10000;
      case 924: return 10000;
      case 925: return 10000;
      case 926: return 10000;
      case 927: return 10000;
      case 928: return 10000;
      case 929: return 10000;
      case 930: return 10000;
      case 931: return 10000;
      case 932: return 10000;
      case 933: return 10000;
      case 934: return 10000;
      case 935: return 10000;
      case 936: return 10000;
      case 937: return 10000;
      case 938: return 10000;
      case 939: return 10000;
      case 940: return 10000;
      case 941: return 10000;
      case 942: return 10000;
      case 943: return 10000;
      case 944: return 10000;
      case 945: return 10000;
      case 946: return 10000;
      case 947: return 10000;
      case 948: return 10000;
      case 949: return 10000;
      case 950: return 10000;
      case 951: return 10000;
      case 952: return 10000;
      case 953: return 10000;
      case 954: return 10000;
      case 955: return 10000;
      case 956: return 10000;
      case 957: return 10000;
      case 958: return 10000;
      case 959: return 10000;
      case 960: return 10000;
      case 961: return 10000;
      case 962: return 10000;
      case 963: return 10000;
      case 964: return 10000;
      case 965: return 10000;
      case 966: return 10000;
      case 967: return 10000;
      case 968: return 10000;
      case 969: return 10000;
      case 970: return 10000;
      case 971: return 10000;
      case 972: return 10000;
      case 973: return 10000;
      case 974: return 10000;
      case 975: return 10000;
      case 976: return 10000;
      case 977: return 10000;
      case 978: return 10000;
      case 979: return 10000;
      case 980: return 10000;
      case 981: return 10000;
      case 982: return 10000;
      case 983: return 10000;
      case 984: return 10000;
      case 985: return 10000;
      case 986: return 10000;
      case 987: return 10000;
      case 988: return 10000;
      case 989: return 10000;
      case 990: return 10000;
      case 991: return 10000;
      case 992: return 10000;
      case 993: return 10000;
      case 994: return 10000;
      case 995: return 10000;
      case 996: return 10000;
      case 997: return 10000;
      case 998: return 10000;
      case 999: return 10000;
      case 1000: return 10000;
      case 1001: return 10000;
      case 1002: return 10000;
      case 1003: return 10000;
      case 1004: return 10000;
      case 1005: return 10000;
      case 1006: return 10000;
      case 1007: return 10000;
      case 1008: return 10000;
      case 1009: return 10000;
      case 1010: return 10000;
      case 1011: return 10000;
      case 1012: return 10000;
      case 1013: return 10000;
      case 1014: return 10000;
      case 1015: return 10000;
      case 1016: return 10000;
      case 1017: return 10000;
      case 1018: return 10000;
      case 1019: return 10000;
      case 1020: return 10000;
      case 1021: return 10000;
      case 1022: return 10000;
      case 1023: return 10000;
      case 1024: return 10000;
      case 1025: return 10000;
      case 1026: return 10000;
      case 1027: return 10000;
      case 1028: return 10000;
      case 1029: return 10000;
      case 1030: return 10000;
      case 1031: return 10000;
      case 1032: return 10000;
      case 1033: return 10000;
      case 1034: return 10000;
      case 1035: return 10000;
      case 1036: return 10000;
      case 1037: return 10000;
      case 1038: return 10000;
      case 1039: return 10000;
      case 1040: return 10000;
      case 1041: return 10000;
      case 1042: return 10000;
      case 1043: return 10000;
      case 1044: return 10000;
      case 1045: return 10000;
      case 1046: return 10000;
      case 1047: return 10000;
      case 1048: return 10000;
      case 1049: return 10000;
      case 1050: return 10000;
      case 1051: return 10000;
      case 1052: return 10000;
      case 1053: return 10000;
      case 1054: return 10000;
      case 1055: return 10000;
      case 1056: return 10000;
      case 1057: return 10000;
      case 1058: return 10000;
      case 1059: return 10000;
      case 1060: return 10000;
      case 1061: return 10000;
      case 1062: return 10000;
      case 1063: return 10000;
      case 1064: return 10000;
      case 1065: return 10000;
      case 1066: return 10000;
      case 1067: return 10000;
      case 1068: return 10000;
      case 1069: return 10000;
      case 1070: return 10000;
      case 1071: return 10000;
      case 1072: return 10000;
      case 1073: return 10000;
      case 1074: return 10000;
      case 1075: return 10000;
      case 1076: return 10000;
      case 1077: return 10000;
      case 1078: return 10000;
      case 1079: return 10000;
      case 1080: return 10000;
      case 1081: return 10000;
      case 1082: return 10000;
      case 1083: return 10000;
      case 1084: return 10000;
      case 1085: return 10000;
      case 1086: return 10000;
      case 1087: return 10000;
      case 1088: return 10000;
      case 1089: return 10000;
      case 1090: return 10000;
      case 1091: return 10000;
      case 1092: return 10000;
      case 1093: return 10000;
      case 1094: return 10000;
      case 1095: return 10000;
      case 1096: return 10000;
      case 1097: return 10000;
      case 1098: return 10000;
      case 1099: return 10000;
      case 1100: return 10000;
      case 1101: return 10000;
      case 1102: return 10000;
      case 1103: return 10000;
      case 1104: return 10000;
      case 1105: return 10000;
      case 1106: return 10000;
      case 1107: return 10000;
      case 1108: return 10000;
      case 1109: return 10000;
      case 1110: return 10000;
      case 1111: return 10000;
      case 1112: return 10000;
      case 1113: return 10000;
      case 1114: return 10000;
      case 1115: return 10000;
      case 1116: return 10000;
      case 1117: return 10000;
      case 1118: return 10000;
      case 1119: return 10000;
      case 1120: return 10000;
      case 1121: return 10000;
      case 1122: return 10000;
      case 1123: return 10000;
      case 1124: return 10000;
      case 1125: return 10000;
      case 1126: return 10000;
      case 1127: return 10000;
      case 1128: return 10000;
      case 1129: return 10000;
      case 1130: return 10000;
      case 1131: return 10000;
      case 1132: return 10000;
      case 1133: return 10000;
      case 1134: return 10000;
      case 1135: return 10000;
      case 1136: return 10000;
      case 1137: return 10000;
      case 1138: return 10000;
      case 1139: return 10000;
      case 1140: return 10000;
      case 1141: return 10000;
      case 1142: return 10000;
      case 1143: return 10000;
      case 1144: return 10000;
      case 1145: return 10000;
      case 1146: return 10000;
      case 1147: return 10000;
      case 1148: return 10000;
      case 1149: return 10000;
      case 1150: return 10000;
      case 1151: return 10000;
      case 1152: return 10000;
      case 1153: return 10000;
      case 1154: return 10000;
      case 1155: return 10000;
      case 1156: return 10000;
      case 1157: return 10000;
      case 1158: return 10000;
      case 1159: return 10000;
      case 1160: return 10000;
      case 1161: return 10000;
      case 1162: return 10000;
      case 1163: return 10000;
      case 1164: return 10000;
      case 1165: return 10000;
      case 1166: return 10000;
      case 1167: return 10000;
      case 1168: return 10000;
      case 1169: return 10000;
      case 1170: return 10000;
      case 1171: return 10000;
      case 1172: return 10000;
      case 1173: return 10000;
      case 1174: return 10000;
      case 1175: return 10000;
      case 1176: return 10000;
      case 1177: return 10000;
      case 1178: return 10000;
      case 1179: return 10000;
      case 1180: return 10000;
      case 1181: return 10000;
      case 1182: return 10000;
      case 1183: return 10000;
      case 1184: return 10000;
      case 1185: return 10000;
      case 1186: return 10000;
      case 1187: return 10000;
      case 1188: return 10000;
      case 1189: return 10000;
      case 1190: return 10000;
      case 1191: return 10000;
      case 1192: return 10000;
      case 1193: return 10000;
      case 1194: return 10000;
      case 1195: return 10000;
      case 1196: return 10000;
      case 1197: return 10000;
      case 1198: return 10000;
      case 1199: return 10000;
      case 1200: return 10000;
      case 1201: return 10000;
      case 1202: return 10000;
      case 1203: return 10000;
      case 1204: return 10000;
      case 1205: return 10000;
      case 1206: return 10000;
      case 1207: return 10000;
      case 1208: return 10000;
      case 1209: return 10000;
      case 1210: return 10000;
      case 1211: return 10000;
      case 1212: return 10000;
      case 1213: return 10000;
      case 1214: return 10000;
      case 1215: return 10000;
      case 1216: return 10000;
      case 1217: return 10000;
      case 1218: return 10000;
      case 1219: return 10000;
      case 1220: return 10000;
      case 1221: return 10000;
      case 1222: return 10000;
      case 1223: return 10000;
      case 1224: return 10000;
      case 1225: return 10000;
      case 1226: return 10000;
      case 1227: return 10000;
      case 1228: return 10000;
      case 1229: return 10000;
      case 1230: return 10000;
      case 1231: return 10000;
      case 1232: return 10000;
      case 1233: return 10000;
      case 1234: return 10000;
      case 1235: return 10000;
      case 1236: return 10000;
      case 1237: return 10000;
      case 1238: return 10000;
      case 1239: return 10000;
      case 1240: return 10000;
      case 1241: return 10000;
      case 1242: return 10000;
      case 1243: return 10000;
      case 1244: return 10000;
      case 1245: return 10000;
      case 1246: return 10000;
      case 1247: return 10000;
      case 1248: return 10000;
      case 1249: return 10000;
      case 1250: return 10000;
      case 1251: return 10000;
      case 1252: return 10000;
      case 1253: return 10000;
      case 1254: return 10000;
      case 1255: return 10000;
      case 1256: return 10000;
      case 1257: return 10000;
      case 1258: return 10000;
      case 1259: return 10000;
      case 1260: return 10000;
      case 1261: return 10000;
      case 1262: return 10000;
      case 1263: return 10000;
      case 1264: return 10000;
      case 1265: return 10000;
      case 1266: return 10000;
      case 1267: return 10000;
      case 1268: return 10000;
      case 1269: return 10000;
      case 1270: return 10000;
      case 1271: return 10000;
      case 1272: return 10000;
      case 1273: return 10000;
      case 1274: return 10000;
      case 1275: return 10000;
      case 1276: return 10000;
      case 1277: return 10000;
      case 1278: return 10000;
      case 1279: return 10000;
      case 1280: return 10000;
      case 1281: return 10000;
      case 1282: return 10000;
      case 1283: return 10000;
      case 1284: return 10000;
      case 1285: return 10000;
      case 1286: return 10000;
      case 1287: return 10000;
      case 1288: return 10000;
      case 1289: return 10000;
      case 1290: return 10000;
      case 1291: return 10000;
      case 1292: return 10000;
      case 1293: return 10000;
      case 1294: return 10000;
      case 1295: return 10000;
      case 1296: return 10000;
      case 1297: return 10000;
      case 1298: return 10000;
      case 1299: return 10000;
      case 1300: return 10000;
      case 1301: return 10000;
      case 1302: return 10000;
      case 1303: return 10000;
      case 1304: return 10000;
      case 1305: return 10000;
      case 1306: return 10000;
      case 1307: return 10000;
      case 1308: return 10000;
      case 1309: return 10000;
      case 1310: return 10000;
      case 1311: return 10000;
      case 1312: return 10000;
      case 1313: return 10000;
      case 1314: return 10000;
      case 1315: return 10000;
      case 1316: return 10000;
      case 1317: return 10000;
      case 1318: return 10000;
      case 1319: return 10000;
      case 1320: return 10000;
      case 1321: return 10000;
      case 1322: return 10000;
      case 1323: return 10000;
      case 1324: return 10000;
      case 1325: return 10000;
      case 1326: return 10000;
      case 1327: return 10000;
      case 1328: return 10000;
      case 1329: return 10000;
      case 1330: return 10000;
      case 1331: return 10000;
      case 1332: return 10000;
      case 1333: return 10000;
      case 1334: return 10000;
      case 1335: return 10000;
      case 1336: return 10000;
      case 1337: return 10000;
      case 1338: return 10000;
      case 1339: return 10000;
      case 1340: return 10000;
      case 1341: return 10000;
      case 1342: return 10000;
      case 1343: return 10000;
      case 1344: return 10000;
      case 1345: return 10000;
      case 1346: return 10000;
      case 1347: return 10000;
      case 1348: return 10000;
      case 1349: return 10000;
      case 1350: return 10000;
      case 1351: return 10000;
      case 1352: return 10000;
      case 1353: return 10000;
      case 1354: return 10000;
      case 1355: return 10000;
      case 1356: return 10000;
      case 1357: return 10000;
      case 1358: return 10000;
      case 1359: return 10000;
      case 1360: return 10000;
      case 1361: return 10000;
      case 1362: return 10000;
      case 1363: return 10000;
      case 1364: return 10000;
      case 1365: return 10000;
      case 1366: return 10000;
      case 1367: return 10000;
      case 1368: return 10000;
      case 1369: return 10000;
      case 1370: return 10000;
      case 1371: return 10000;
      case 1372: return 10000;
      case 1373: return 10000;
      case 1374: return 10000;
      case 1375: return 10000;
      case 1376: return 10000;
      case 1377: return 10000;
      case 1378: return 10000;
      case 1379: return 10000;
      case 1380: return 10000;
      case 1381: return 10000;
      case 1382: return 10000;
      case 1383: return 10000;
      case 1384: return 10000;
      case 1385: return 10000;
      case 1386: return 10000;
      case 1387: return 10000;
      case 1388: return 10000;
      case 1389: return 10000;
      case 1390: return 10000;
      case 1391: return 10000;
      case 1392: return 10000;
      case 1393: return 10000;
      case 1394: return 10000;
      case 1395: return 10000;
      case 1396: return 10000;
      case 1397: return 10000;
      case 1398: return 10000;
      case 1399: return 10000;
      case 1400: return 10000;
      case 1401: return 10000;
      case 1402: return 10000;
      case 1403: return 10000;
      case 1404: return 10000;
      case 1405: return 10000;
      case 1406: return 10000;
      case 1407: return 10000;
      case 1408: return 10000;
      case 1409: return 10000;
      case 1410: return 10000;
      case 1411: return 10000;
      case 1412: return 10000;
      case 1413: return 10000;
      case 1414: return 10000;
      case 1415: return 10000;
      case 1416: return 10000;
      case 1417: return 10000;
      case 1418: return 10000;
      case 1419: return 10000;
      case 1420: return 10000;
      case 1421: return 10000;
      case 1422: return 10000;
      case 1423: return 10000;
      case 1424: return 10000;
      case 1425: return 10000;
      case 1426: return 10000;
      case 1427: return 10000;
      case 1428: return 10000;
      case 1429: return 10000;
      case 1430: return 10000;
      case 1431: return 10000;
      case 1432: return 10000;
      case 1433: return 10000;
      case 1434: return 10000;
      case 1435: return 10000;
      case 1436: return 10000;
      case 1437: return 10000;
      case 1438: return 10000;
      case 1439: return 10000;
      case 1440: return 10000;
      case 1441: return 10000;
      case 1442: return 10000;
      case 1443: return 10000;
      case 1444: return 10000;
      case 1445: return 10000;
      case 1446: return 10000;
      case 1447: return 10000;
      case 1448: return 10000;
      case 1449: return 10000;
      case 1450: return 10000;
      case 1451: return 10000;
      case 1452: return 10000;
      case 1453: return 10000;
      case 1454: return 10000;
      case 1455: return 10000;
      case 1456: return 10000;
      case 1457: return 10000;
      case 1458: return 10000;
      case 1459: return 10000;
      case 1460: return 10000;
      case 1461: return 10000;
      case 1462: return 10000;
      case 1463: return 10000;
      case 1464: return 10000;
      case 1465: return 10000;
      case 1466: return 10000;
      case 1467: return 10000;
      case 1468: return 10000;
      case 1469: return 10000;
      case 1470: return 10000;
      case 1471: return 10000;
      case 1472: return 10000;
      case 1473: return 10000;
      case 1474: return 10000;
      case 1475: return 10000;
      case 1476: return 10000;
      case 1477: return 10000;
      case 1478: return 10000;
      case 1479: return 10000;
      case 1480: return 10000;
      case 1481: return 10000;
      case 1482: return 10000;
      case 1483: return 10000;
      case 1484: return 10000;
      case 1485: return 10000;
      case 1486: return 10000;
      case 1487: return 10000;
      case 1488: return 10000;
      case 1489: return 10000;
      case 1490: return 10000;
      case 1491: return 10000;
      case 1492: return 10000;
      case 1493: return 10000;
      case 1494: return 10000;
      case 1495: return 10000;
      case 1496: return 10000;
      case 1497: return 10000;
      case 1498: return 10000;
      case 1499: return 10000;
      case 1500: return 10000;
      case 1501: return 10000;
      case 1502: return 10000;
      case 1503: return 10000;
      case 1504: return 10000;
      case 1505: return 10000;
      case 1506: return 10000;
      case 1507: return 10000;
      case 1508: return 10000;
      case 1509: return 10000;
      case 1510: return 10000;
      case 1511: return 10000;
      case 1512: return 10000;
      case 1513: return 10000;
      case 1514: return 10000;
      case 1515: return 10000;
      case 1516: return 10000;
      case 1517: return 10000;
      case 1518: return 10000;
      case 1519: return 10000;
      case 1520: return 10000;
      case 1521: return 10000;
      case 1522: return 10000;
      case 1523: return 10000;
      case 1524: return 10000;
      case 1525: return 10000;
      case 1526: return 10000;
      case 1527: return 10000;
      case 1528: return 10000;
      case 1529: return 10000;
      case 1530: return 10000;
      case 1531: return 10000;
      case 1532: return 10000;
      case 1533: return 10000;
      case 1534: return 10000;
      case 1535: return 10000;
      case 1536: return 10000;
      case 1537: return 10000;
      case 1538: return 10000;
      case 1539: return 10000;
      case 1540: return 10000;
      case 1541: return 10000;
      case 1542: return 10000;
      case 1543: return 10000;
      case 1544: return 10000;
      case 1545: return 10000;
      case 1546: return 10000;
      case 1547: return 10000;
      case 1548: return 10000;
      case 1549: return 10000;
      case 1550: return 10000;
      case 1551: return 10000;
      case 1552: return 10000;
      case 1553: return 10000;
      case 1554: return 10000;
      case 1555: return 10000;
      case 1556: return 10000;
      case 1557: return 10000;
      case 1558: return 10000;
      case 1559: return 10000;
      case 1560: return 10000;
      case 1561: return 10000;
      case 1562: return 10000;
      case 1563: return 10000;
      case 1564: return 10000;
      case 1565: return 10000;
      case 1566: return 10000;
      case 1567: return 10000;
      case 1568: return 10000;
      case 1569: return 10000;
      case 1570: return 10000;
      case 1571: return 10000;
      case 1572: return 10000;
      case 1573: return 10000;
      case 1574: return 10000;
      case 1575: return 10000;
      case 1576: return 10000;
      case 1577: return 10000;
      case 1578: return 10000;
      case 1579: return 10000;
      case 1580: return 10000;
      case 1581: return 10000;
      case 1582: return 10000;
      case 1583: return 10000;
      case 1584: return 10000;
      case 1585: return 10000;
      case 1586: return 10000;
      case 1587: return 10000;
      case 1588: return 10000;
      case 1589: return 10000;
      case 1590: return 10000;
      case 1591: return 10000;
      case 1592: return 10000;
      case 1593: return 10000;
      case 1594: return 10000;
      case 1595: return 10000;
      case 1596: return 10000;
      case 1597: return 10000;
      case 1598: return 10000;
      case 1599: return 10000;
      case 1600: return 10000;
      case 1601: return 10000;
      case 1602: return 10000;
      case 1603: return 10000;
      case 1604: return 10000;
      case 1605: return 10000;
      case 1606: return 10000;
      case 1607: return 10000;
      case 1608: return 10000;
      case 1609: return 10000;
      case 1610: return 10000;
      case 1611: return 10000;
      case 1612: return 10000;
      case 1613: return 10000;
      case 1614: return 10000;
      case 1615: return 10000;
      case 1616: return 10000;
      case 1617: return 10000;
      case 1618: return 10000;
      case 1619: return 10000;
      case 1620: return 10000;
      case 1621: return 10000;
      case 1622: return 10000;
      case 1623: return 10000;
      case 1624: return 10000;
      case 1625: return 10000;
      case 1626: return 10000;
      case 1627: return 10000;
      case 1628: return 10000;
      case 1629: return 10000;
      case 1630: return 10000;
      case 1631: return 10000;
      case 1632: return 10000;
      case 1633: return 10000;
      case 1634: return 10000;
      case 1635: return 10000;
      case 1636: return 10000;
      case 1637: return 10000;
      case 1638: return 10000;
      case 1639: return 10000;
      case 1640: return 10000;
      case 1641: return 10000;
      case 1642: return 10000;
      case 1643: return 10000;
      case 1644: return 10000;
      case 1645: return 10000;
      case 1646: return 10000;
      case 1647: return 10000;
      case 1648: return 10000;
      case 1649: return 10000;
      case 1650: return 10000;
      case 1651: return 10000;
      case 1652: return 10000;
      case 1653: return 10000;
      case 1654: return 10000;
      case 1655: return 10000;
      case 1656: return 10000;
      case 1657: return 10000;
      case 1658: return 10000;
      case 1659: return 10000;
      case 1660: return 10000;
      case 1661: return 10000;
      case 1662: return 10000;
      case 1663: return 10000;
      case 1664: return 10000;
      case 1665: return 10000;
      case 1666: return 10000;
      case 1667: return 10000;
      case 1668: return 10000;
      case 1669: return 10000;
      case 1670: return 10000;
      case 1671: return 10000;
      case 1672: return 10000;
      case 1673: return 10000;
      case 1674: return 10000;
      case 1675: return 10000;
      case 1676: return 10000;
      case 1677: return 10000;
      case 1678: return 10000;
      case 1679: return 10000;
      case 1680: return 10000;
      case 1681: return 10000;
      case 1682: return 10000;
      case 1683: return 10000;
      case 1684: return 10000;
      case 1685: return 10000;
      case 1686: return 10000;
      case 1687: return 10000;
      case 1688: return 10000;
      case 1689: return 10000;
      case 1690: return 10000;
      case 1691: return 10000;
      case 1692: return 10000;
      case 1693: return 10000;
      case 1694: return 10000;
      case 1695: return 10000;
      case 1696: return 10000;
      case 1697: return 10000;
      case 1698: return 10000;
      case 1699: return 10000;
      case 1700: return 10000;
      case 1701: return 10000;
      case 1702: return 10000;
      case 1703: return 10000;
      case 1704: return 10000;
      case 1705: return 10000;
      case 1706: return 10000;
      case 1707: return 10000;
      case 1708: return 10000;
      case 1709: return 10000;
      case 1710: return 10000;
      case 1711: return 10000;
      case 1712: return 10000;
      case 1713: return 10000;
      case 1714: return 10000;
      case 1715: return 10000;
      case 1716: return 10000;
      case 1717: return 10000;
      case 1718: return 10000;
      case 1719: return 10000;
      case 1720: return 10000;
      case 1721: return 10000;
      case 1722: return 10000;
      case 1723: return 10000;
      case 1724: return 10000;
      case 1725: return 10000;
      case 1726: return 10000;
      case 1727: return 10000;
      case 1728: return 10000;
      case 1729: return 10000;
      case 1730: return 10000;
      case 1731: return 10000;
      case 1732: return 10000;
      case 1733: return 10000;
      case 1734: return 10000;
      case 1735: return 10000;
      case 1736: return 10000;
      case 1737: return 10000;
      case 1738: return 10000;
      case 1739: return 10000;
      case 1740: return 10000;
      case 1741: return 10000;
      case 1742: return 10000;
      case 1743: return 10000;
      case 1744: return 10000;
      case 1745: return 10000;
      case 1746: return 10000;
      case 1747: return 10000;
      case 1748: return 10000;
      case 1749: return 10000;
      case 1750: return 10000;
      case 1751: return 10000;
      case 1752: return 10000;
      case 1753: return 10000;
      case 1754: return 10000;
      case 1755: return 10000;
      case 1756: return 10000;
      case 1757: return 10000;
      case 1758: return 10000;
      case 1759: return 10000;
      case 1760: return 10000;
      case 1761: return 10000;
      case 1762: return 10000;
      case 1763: return 10000;
      case 1764: return 10000;
      case 1765: return 10000;
      case 1766: return 10000;
      case 1767: return 10000;
      case 1768: return 10000;
      case 1769: return 10000;
      case 1770: return 10000;
      case 1771: return 10000;
      case 1772: return 10000;
      case 1773: return 10000;
      case 1774: return 10000;
      case 1775: return 10000;
      case 1776: return 10000;
      case 1777: return 10000;
      case 1778: return 10000;
      case 1779: return 10000;
      case 1780: return 10000;
      case 1781: return 10000;
      case 1782: return 10000;
      case 1783: return 10000;
      case 1784: return 10000;
      case 1785: return 10000;
      case 1786: return 10000;
      case 1787: return 10000;
      case 1788: return 10000;
      case 1789: return 10000;
      case 1790: return 10000;
      case 1791: return 10000;
      case 1792: return 10000;
      case 1793: return 10000;
      case 1794: return 10000;
      case 1795: return 10000;
      case 1796: return 10000;
      case 1797: return 10000;
      case 1798: return 10000;
      case 1799: return 10000;
      case 1800: return 10000;
      case 1801: return 10000;
      case 1802: return 10000;
      case 1803: return 10000;
      case 1804: return 10000;
      case 1805: return 10000;
      case 1806: return 10000;
      case 1807: return 10000;
      case 1808: return 10000;
      case 1809: return 10000;
      case 1810: return 10000;
      case 1811: return 10000;
      case 1812: return 10000;
      case 1813: return 10000;
      case 1814: return 10000;
      case 1815: return 10000;
      case 1816: return 10000;
      case 1817: return 10000;
      case 1818: return 10000;
      case 1819: return 10000;
      case 1820: return 10000;
      case 1821: return 10000;
      case 1822: return 10000;
      case 1823: return 10000;
      case 1824: return 10000;
      case 1825: return 10000;
      case 1826: return 10000;
      case 1827: return 10000;
      case 1828: return 10000;
      case 1829: return 10000;
      case 1830: return 10000;
      case 1831: return 10000;
      case 1832: return 10000;
      case 1833: return 10000;
      case 1834: return 10000;
      case 1835: return 10000;
      case 1836: return 10000;
      case 1837: return 10000;
      case 1838: return 10000;
      case 1839: return 10000;
      case 1840: return 10000;
      case 1841: return 10000;
      case 1842: return 10000;
      case 1843: return 10000;
      case 1844: return 10000;
      case 1845: return 10000;
      case 1846: return 10000;
      case 1847: return 10000;
      case 1848: return 10000;
      case 1849: return 10000;
      case 1850: return 10000;
      case 1851: return 10000;
      case 1852: return 10000;
      case 1853: return 10000;
      case 1854: return 10000;
      case 1855: return 10000;
      case 1856: return 10000;
      case 1857: return 10000;
      case 1858: return 10000;
      case 1859: return 10000;
      case 1860: return 10000;
      case 1861: return 10000;
      case 1862: return 10000;
      case 1863: return 10000;
      case 1864: return 10000;
      case 1865: return 10000;
      case 1866: return 10000;
      case 1867: return 10000;
      case 1868: return 10000;
      case 1869: return 10000;
      case 1870: return 10000;
      case 1871: return 10000;
      case 1872: return 10000;
      case 1873: return 10000;
      case 1874: return 10000;
      case 1875: return 10000;
      case 1876: return 10000;
      case 1877: return 10000;
      case 1878: return 10000;
      case 1879: return 10000;
      case 1880: return 10000;
      case 1881: return 10000;
      case 1882: return 10000;
      case 1883: return 10000;
      case 1884: return 10000;
      case 1885: return 10000;
      case 1886: return 10000;
      case 1887: return 10000;
      case 1888: return 10000;
      case 1889: return 10000;
      case 1890: return 10000;
      case 1891: return 10000;
      case 1892: return 10000;
      case 1893: return 10000;
      case 1894: return 10000;
      case 1895: return 10000;
      case 1896: return 10000;
      case 1897: return 10000;
      case 1898: return 10000;
      case 1899: return 10000;
      case 1900: return 10000;
      case 1901: return 10000;
      case 1902: return 10000;
      case 1903: return 10000;
      case 1904: return 10000;
      case 1905: return 10000;
      case 1906: return 10000;
      case 1907: return 10000;
      case 1908: return 10000;
      case 1909: return 10000;
      case 1910: return 10000;
      case 1911: return 10000;
      case 1912: return 10000;
      case 1913: return 10000;
      case 1914: return 10000;
      case 1915: return 10000;
      case 1916: return 10000;
      case 1917: return 10000;
      case 1918: return 10000;
      case 1919: return 10000;
      case 1920: return 10000;
      case 1921: return 10000;
      case 1922: return 10000;
      case 1923: return 10000;
      case 1924: return 10000;
      case 1925: return 10000;
      case 1926: return 10000;
      case 1927: return 10000;
      case 1928: return 10000;
      case 1929: return 10000;
      case 1930: return 10000;
      case 1931: return 10000;
      case 1932: return 10000;
      case 1933: return 10000;
      case 1934: return 10000;
      case 1935: return 10000;
      case 1936: return 10000;
      case 1937: return 10000;
      case 1938: return 10000;
      case 1939: return 10000;
      case 1940: return 10000;
      case 1941: return 10000;
      case 1942: return 10000;
      case 1943: return 10000;
      case 1944: return 10000;
      case 1945: return 10000;
      case 1946: return 10000;
      case 1947: return 10000;
      case 1948: return 10000;
      case 1949: return 10000;
      case 1950: return 10000;
      case 1951: return 10000;
      case 1952: return 10000;
      case 1953: return 10000;
      case 1954: return 10000;
      case 1955: return 10000;
      case 1956: return 10000;
      case 1957: return 10000;
      case 1958: return 10000;
      case 1959: return 10000;
      case 1960: return 10000;
      case 1961: return 10000;
      case 1962: return 10000;
      case 1963: return 10000;
      case 1964: return 10000;
      case 1965: return 10000;
      case 1966: return 10000;
      case 1967: return 10000;
      case 1968: return 10000;
      case 1969: return 10000;
      case 1970: return 10000;
      case 1971: return 10000;
      case 1972: return 10000;
      case 1973: return 10000;
      case 1974: return 10000;
      case 1975: return 10000;
      case 1976: return 10000;
      case 1977: return 10000;
      case 1978: return 10000;
      case 1979: return 10000;
      case 1980: return 10000;
      case 1981: return 10000;
      case 1982: return 10000;
      case 1983: return 10000;
      case 1984: return 10000;
      case 1985: return 10000;
      case 1986: return 10000;
      case 1987: return 10000;
      case 1988: return 10000;
      case 1989: return 10000;
      case 1990: return 10000;
      case 1991: return 10000;
      case 1992: return 10000;
      case 1993: return 10000;
      case 1994: return 10000;
      case 1995: return 10000;
      case 1996: return 10000;
      case 1997: return 10000;
      case 1998: return 10000;
      case 1999: return 10000;
      case 2000: return 10000;
      case 2001: return 10000;
      case 2002: return 10000;
      case 2003: return 10000;
      case 2004: return 10000;
      case 2005: return 10000;
      case 2006: return 10000;
      case 2007: return 10000;
      case 2008: return 10000;
      case 2009: return 10000;
      case 2010: return 10000;
      case 2011: return 10000;
      case 2012: return 10000;
      case 2013: return 10000;
      case 2014: return 10000;
      case 2015: return 10000;
      case 2016: return 10000;
      case 2017: return 10000;
      case 2018: return 10000;
      case 2019: return 10000;
      case 2020: return 10000;
      case 2021: return 10000;
      case 2022: return 10000;
      case 2023: return 10000;
      case 2024: return 10000;
      case 2025: return 10000;
      case 2026: return 10000;
      case 2027: return 10000;
      case 2028: return 10000;
      case 2029: return 10000;
      case 2030: return 10000;
      case 2031: return 10000;
      case 2032: return 10000;
      case 2033: return 10000;
      case 2034: return 10000;
      case 2035: return 10000;
      case 2036: return 10000;
      case 2037: return 10000;
      case 2038: return 10000;
      case 2039: return 10000;
      case 2040: return 10000;
      case 2041: return 10000;
      case 2042: return 10000;
      case 2043: return 10000;
      case 2044: return 10000;
      case 2045: return 10000;
      case 2046: return 10000;
      case 2047: return 10000;
      case 2048: return 10000;
      case 2049: return 10000;
      case 2050: return 10000;
      case 2051: return 10000;
      case 2052: return 10000;
      case 2053: return 10000;
      case 2054: return 10000;
      case 2055: return 10000;
      case 2056: return 10000;
      case 2057: return 10000;
      case 2058: return 10000;
      case 2059: return 10000;
      case 2060: return 10000;
      case 2061: return 10000;
      case 2062: return 10000;
      case 2063: return 10000;
      case 2064: return 10000;
      case 2065: return 10000;
      case 2066: return 10000;
      case 2067: return 10000;
      case 2068: return 10000;
      case 2069: return 10000;
      case 2070: return 10000;
      case 2071: return 10000;
      case 2072: return 10000;
      case 2073: return 10000;
      case 2074: return 10000;
      case 2075: return 10000;
      case 2076: return 10000;
      case 2077: return 10000;
      case 2078: return 10000;
      case 2079: return 10000;
      case 2080: return 10000;
      case 2081: return 10000;
      case 2082: return 10000;
      case 2083: return 10000;
      case 2084: return 10000;
      case 2085: return 10000;
      case 2086: return 10000;
      case 2087: return 10000;
      case 2088: return 10000;
      case 2089: return 10000;
      case 2090: return 10000;
      case 2091: return 10000;
      case 2092: return 10000;
      case 2093: return 10000;
      case 2094: return 10000;
      case 2095: return 10000;
      case 2096: return 10000;
      case 2097: return 10000;
      case 2098: return 10000;
      case 2099: return 10000;
      case 2100: return 10000;
      case 2101: return 10000;
      case 2102: return 10000;
      case 2103: return 10000;
      case 2104: return 10000;
      case 2105: return 10000;
      case 2106: return 10000;
      case 2107: return 10000;
      case 2108: return 10000;
      case 2109: return 10000;
      case 2110: return 10000;
      case 2111: return 10000;
      case 2112: return 10000;
      case 2113: return 10000;
      case 2114: return 10000;
      case 2115: return 10000;
      case 2116: return 10000;
      case 2117: return 10000;
      case 2118: return 10000;
      case 2119: return 10000;
      case 2120: return 10000;
      case 2121: return 10000;
      case 2122: return 10000;
      case 2123: return 10000;
      case 2124: return 10000;
      case 2125: return 10000;
      case 2126: return 10000;
      case 2127: return 10000;
      case 2128: return 10000;
      case 2129: return 10000;
      case 2130: return 10000;
      case 2131: return 10000;
      case 2132: return 10000;
      case 2133: return 10000;
      case 2134: return 10000;
      case 2135: return 10000;
      case 2136: return 10000;
      case 2137: return 10000;
      case 2138: return 10000;
      case 2139: return 10000;
      case 2140: return 10000;
      case 2141: return 10000;
      case 2142: return 10000;
      case 2143: return 10000;
      case 2144: return 10000;
      case 2145: return 10000;
      case 2146: return 10000;
      case 2147: return 10000;
      case 2148: return 10000;
      case 2149: return 10000;
      case 2150: return 10000;
      case 2151: return 10000;
      case 2152: return 10000;
      case 2153: return 10000;
      case 2154: return 10000;
      case 2155: return 10000;
      case 2156: return 10000;
      case 2157: return 10000;
      case 2158: return 10000;
      case 2159: return 10000;
      case 2160: return 10000;
      case 2161: return 10000;
      case 2162: return 10000;
      case 2163: return 10000;
      case 2164: return 10000;
      case 2165: return 10000;
      case 2166: return 10000;
      case 2167: return 10000;
      case 2168: return 10000;
      case 2169: return 10000;
      case 2170: return 10000;
      case 2171: return 10000;
      case 2172: return 10000;
      case 2173: return 10000;
      case 2174: return 10000;
      case 2175: return 10000;
      case 2176: return 10000;
      case 2177: return 10000;
      case 2178: return 10000;
      case 2179: return 10000;
      case 2180: return 10000;
      case 2181: return 10000;
      case 2182: return 10000;
      case 2183: return 10000;
      case 2184: return 10000;
      case 2185: return 10000;
      case 2186: return 10000;
      case 2187: return 10000;
      case 2188: return 10000;
      case 2189: return 10000;
      case 2190: return 10000;
      case 2191: return 10000;
      case 2192: return 10000;
      case 2193: return 10000;
      case 2194: return 10000;
      case 2195: return 10000;
      case 2196: return 10000;
      case 2197: return 10000;
      case 2198: return 10000;
      case 2199: return 10000;
      case 2200: return 10000;
      case 2201: return 10000;
      case 2202: return 10000;
      case 2203: return 10000;
      case 2204: return 10000;
      case 2205: return 10000;
      case 2206: return 10000;
      case 2207: return 10000;
      case 2208: return 10000;
      case 2209: return 10000;
      case 2210: return 10000;
      case 2211: return 10000;
      case 2212: return 10000;
      case 2213: return 10000;
      case 2214: return 10000;
      case 2215: return 10000;
      case 2216: return 10000;
      case 2217: return 10000;
      case 2218: return 10000;
      case 2219: return 10000;
      case 2220: return 10000;
      case 2221: return 10000;
      case 2222: return 10000;
      case 2223: return 10000;
      case 2224: return 10000;
      case 2225: return 10000;
      case 2226: return 10000;
      case 2227: return 10000;
      case 2228: return 10000;
      case 2229: return 10000;
      case 2230: return 10000;
      case 2231: return 10000;
      case 2232: return 10000;
      case 2233: return 10000;
      case 2234: return 10000;
      case 2235: return 10000;
      case 2236: return 10000;
      case 2237: return 10000;
      case 2238: return 10000;
      case 2239: return 10000;
      case 2240: return 10000;
      case 2241: return 10000;
      case 2242: return 10000;
      case 2243: return 10000;
      case 2244: return 10000;
      case 2245: return 10000;
      case 2246: return 10000;
      case 2247: return 10000;
      case 2248: return 10000;
      case 2249: return 10000;
      case 2250: return 10000;
      case 2251: return 10000;
      case 2252: return 10000;
      case 2253: return 10000;
      case 2254: return 10000;
      case 2255: return 10000;
      case 2256: return 10000;
      case 2257: return 10000;
      case 2258: return 10000;
      case 2259: return 10000;
      case 2260: return 10000;
      case 2261: return 10000;
      case 2262: return 10000;
      case 2263: return 10000;
      case 2264: return 10000;
      case 2265: return 10000;
      case 2266: return 10000;
      case 2267: return 10000;
      case 2268: return 10000;
      case 2269: return 10000;
      case 2270: return 10000;
      case 2271: return 10000;
      case 2272: return 10000;
      case 2273: return 10000;
      case 2274: return 10000;
      case 2275: return 10000;
      case 2276: return 10000;
      case 2277: return 10000;
      case 2278: return 10000;
      case 2279: return 10000;
      case 2280: return 10000;
      case 2281: return 10000;
      case 2282: return 10000;
      case 2283: return 10000;
      case 2284: return 10000;
      case 2285: return 10000;
      case 2286: return 10000;
      case 2287: return 10000;
      case 2288: return 10000;
      case 2289: return 10000;
      case 2290: return 10000;
      case 2291: return 10000;
      case 2292: return 10000;
      case 2293: return 10000;
      case 2294: return 10000;
      case 2295: return 10000;
      case 2296: return 10000;
      case 2297: return 10000;
      case 2298: return 10000;
      case 2299: return 10000;
      case 2300: return 10000;
      case 2301: return 10000;
      case 2302: return 10000;
      case 2303: return 10000;
      case 2304: return 10000;
      case 2305: return 10000;
      case 2306: return 10000;
      case 2307: return 10000;
      case 2308: return 10000;
      case 2309: return 10000;
      case 2310: return 10000;
      case 2311: return 10000;
      case 2312: return 10000;
      case 2313: return 10000;
      case 2314: return 10000;
      case 2315: return 10000;
      case 2316: return 10000;
      case 2317: return 10000;
      case 2318: return 10000;
      case 2319: return 10000;
      case 2320: return 10000;
      case 2321: return 10000;
      case 2322: return 10000;
      case 2323: return 10000;
      case 2324: return 10000;
      case 2325: return 10000;
      case 2326: return 10000;
      case 2327: return 10000;
      case 2328: return 10000;
      case 2329: return 10000;
      case 2330: return 10000;
      case 2331: return 10000;
      case 2332: return 10000;
      case 2333: return 10000;
      case 2334: return 10000;
      case 2335: return 10000;
      case 2336: return 10000;
      case 2337: return 10000;
      case 2338: return 10000;
      case 2339: return 10000;
      case 2340: return 10000;
      case 2341: return 10000;
      case 2342: return 10000;
      case 2343: return 10000;
      case 2344: return 10000;
      case 2345: return 10000;
      case 2346: return 10000;
      case 2347: return 10000;
      case 2348: return 10000;
      case 2349: return 10000;
      case 2350: return 10000;
      case 2351: return 10000;
      case 2352: return 10000;
      case 2353: return 10000;
      case 2354: return 10000;
      case 2355: return 10000;
      case 2356: return 10000;
      case 2357: return 10000;
      case 2358: return 10000;
      case 2359: return 10000;
      case 2360: return 10000;
      case 2361: return 10000;
      case 2362: return 10000;
      case 2363: return 10000;
      case 2364: return 10000;
      case 2365: return 10000;
      case 2366: return 10000;
      case 2367: return 10000;
      case 2368: return 10000;
      case 2369: return 10000;
      case 2370: return 10000;
      case 2371: return 10000;
      case 2372: return 10000;
      case 2373: return 10000;
      case 2374: return 10000;
      case 2375: return 10000;
      case 2376: return 10000;
      case 2377: return 10000;
      case 2378: return 10000;
      case 2379: return 10000;
      case 2380: return 10000;
      case 2381: return 10000;
      case 2382: return 10000;
      case 2383: return 10000;
      case 2384: return 10000;
      case 2385: return 10000;
      case 2386: return 10000;
      case 2387: return 10000;
      case 2388: return 10000;
      case 2389: return 10000;
      case 2390: return 10000;
      case 2391: return 10000;
      case 2392: return 10000;
      case 2393: return 10000;
      case 2394: return 10000;
      case 2395: return 10000;
      case 2396: return 10000;
      case 2397: return 10000;
      case 2398: return 10000;
      case 2399: return 10000;
      case 2400: return 10000;
      case 2401: return 10000;
      case 2402: return 10000;
      case 2403: return 10000;
      case 2404: return 10000;
      case 2405: return 10000;
      case 2406: return 10000;
      case 2407: return 10000;
      case 2408: return 10000;
      case 2409: return 10000;
      case 2410: return 10000;
      case 2411: return 10000;
      case 2412: return 10000;
      case 2413: return 10000;
      case 2414: return 10000;
      case 2415: return 10000;
      case 2416: return 10000;
      case 2417: return 10000;
      case 2418: return 10000;
      case 2419: return 10000;
      case 2420: return 10000;
      case 2421: return 10000;
      case 2422: return 10000;
      case 2423: return 10000;
      case 2424: return 10000;
      case 2425: return 10000;
      case 2426: return 10000;
      case 2427: return 10000;
      case 2428: return 10000;
      case 2429: return 10000;
      case 2430: return 10000;
      case 2431: return 10000;
      case 2432: return 10000;
      case 2433: return 10000;
      case 2434: return 10000;
      case 2435: return 10000;
      case 2436: return 10000;
      case 2437: return 10000;
      case 2438: return 10000;
      case 2439: return 10000;
      case 2440: return 10000;
      case 2441: return 10000;
      case 2442: return 10000;
      case 2443: return 10000;
      case 2444: return 10000;
      case 2445: return 10000;
      case 2446: return 10000;
      case 2447: return 10000;
      case 2448: return 10000;
      case 2449: return 10000;
      case 2450: return 10000;
      case 2451: return 10000;
      case 2452: return 10000;
      case 2453: return 10000;
      case 2454: return 10000;
      case 2455: return 10000;
      case 2456: return 10000;
      case 2457: return 10000;
      case 2458: return 10000;
      case 2459: return 10000;
      case 2460: return 10000;
      case 2461: return 10000;
      case 2462: return 10000;
      case 2463: return 10000;
      case 2464: return 10000;
      case 2465: return 10000;
      case 2466: return 10000;
      case 2467: return 10000;
      case 2468: return 10000;
      case 2469: return 10000;
      case 2470: return 10000;
      case 2471: return 10000;
      case 2472: return 10000;
      case 2473: return 10000;
      case 2474: return 10000;
      case 2475: return 10000;
      case 2476: return 10000;
      case 2477: return 10000;
      case 2478: return 10000;
      case 2479: return 10000;
      case 2480: return 10000;
      case 2481: return 10000;
      case 2482: return 10000;
      case 2483: return 10000;
      case 2484: return 10000;
      case 2485: return 10000;
      case 2486: return 10000;
      case 2487: return 10000;
      case 2488: return 10000;
      case 2489: return 10000;
      case 2490: return 10000;
      case 2491: return 10000;
      case 2492: return 10000;
      case 2493: return 10000;
      case 2494: return 10000;
      case 2495: return 10000;
      case 2496: return 10000;
      case 2497: return 10000;
      case 2498: return 10000;
      case 2499: return 10000;
      case 2500: return 10000;
      case 2501: return 10000;
      case 2502: return 10000;
      case 2503: return 10000;
      case 2504: return 10000;
      case 2505: return 10000;
      case 2506: return 10000;
      case 2507: return 10000;
      case 2508: return 10000;
      case 2509: return 10000;
      case 2510: return 10000;
      case 2511: return 10000;
      case 2512: return 10000;
      case 2513: return 10000;
      case 2514: return 10000;
      case 2515: return 10000;
      case 2516: return 10000;
      case 2517: return 10000;
      case 2518: return 10000;
      case 2519: return 10000;
      case 2520: return 10000;
      case 2521: return 10000;
      case 2522: return 10000;
      case 2523: return 10000;
      case 2524: return 10000;
      case 2525: return 10000;
      case 2526: return 10000;
      case 2527: return 10000;
      case 2528: return 10000;
      case 2529: return 10000;
      case 2530: return 10000;
      case 2531: return 10000;
      case 2532: return 10000;
      case 2533: return 10000;
      case 2534: return 10000;
      case 2535: return 10000;
      case 2536: return 10000;
      case 2537: return 10000;
      case 2538: return 10000;
      case 2539: return 10000;
      case 2540: return 10000;
      case 2541: return 10000;
      case 2542: return 10000;
      case 2543: return 10000;
      case 2544: return 10000;
      case 2545: return 10000;
      case 2546: return 10000;
      case 2547: return 10000;
      case 2548: return 10000;
      case 2549: return 10000;
      case 2550: return 10000;
      case 2551: return 10000;
      case 2552: return 10000;
      case 2553: return 10000;
      case 2554: return 10000;
      case 2555: return 10000;
      case 2556: return 10000;
      case 2557: return 10000;
      case 2558: return 10000;
      case 2559: return 10000;
      case 2560: return 10000;
      case 2561: return 10000;
      case 2562: return 10000;
      case 2563: return 10000;
      case 2564: return 10000;
      case 2565: return 10000;
      case 2566: return 10000;
      case 2567: return 10000;
      case 2568: return 10000;
      case 2569: return 10000;
      case 2570: return 10000;
      case 2571: return 10000;
      case 2572: return 10000;
      case 2573: return 10000;
      case 2574: return 10000;
      case 2575: return 10000;
      case 2576: return 10000;
      case 2577: return 10000;
      case 2578: return 10000;
      case 2579: return 10000;
      case 2580: return 10000;
      case 2581: return 10000;
      case 2582: return 10000;
      case 2583: return 10000;
      case 2584: return 10000;
      case 2585: return 10000;
      case 2586: return 10000;
      case 2587: return 10000;
      case 2588: return 10000;
      case 2589: return 10000;
      case 2590: return 10000;
      case 2591: return 10000;
      case 2592: return 10000;
      case 2593: return 10000;
      case 2594: return 10000;
      case 2595: return 10000;
      case 2596: return 10000;
      case 2597: return 10000;
      case 2598: return 10000;
      case 2599: return 10000;
      case 2600: return 10000;
      case 2601: return 10000;
      case 2602: return 10000;
      case 2603: return 10000;
      case 2604: return 10000;
      case 2605: return 10000;
      case 2606: return 10000;
      case 2607: return 10000;
      case 2608: return 10000;
      case 2609: return 10000;
      case 2610: return 10000;
      case 2611: return 10000;
      case 2612: return 10000;
      case 2613: return 10000;
      case 2614: return 10000;
      case 2615: return 10000;
      case 2616: return 10000;
      case 2617: return 10000;
      case 2618: return 10000;
      case 2619: return 10000;
      case 2620: return 10000;
      case 2621: return 10000;
      case 2622: return 10000;
      case 2623: return 10000;
      case 2624: return 10000;
      case 2625: return 10000;
      case 2626: return 10000;
      case 2627: return 10000;
      case 2628: return 10000;
      case 2629: return 10000;
      case 2630: return 10000;
      case 2631: return 10000;
      case 2632: return 10000;
      case 2633: return 10000;
      case 2634: return 10000;
      case 2635: return 10000;
      case 2636: return 10000;
      case 2637: return 10000;
      case 2638: return 10000;
      case 2639: return 10000;
      case 2640: return 10000;
      case 2641: return 10000;
      case 2642: return 10000;
      case 2643: return 10000;
      case 2644: return 10000;
      case 2645: return 10000;
      case 2646: return 10000;
      case 2647: return 10000;
      case 2648: return 10000;
      case 2649: return 10000;
      case 2650: return 10000;
      case 2651: return 10000;
      case 2652: return 10000;
      case 2653: return 10000;
      case 2654: return 10000;
      case 2655: return 10000;
      case 2656: return 10000;
      case 2657: return 10000;
      case 2658: return 10000;
      case 2659: return 10000;
      case 2660: return 10000;
      case 2661: return 10000;
      case 2662: return 10000;
      case 2663: return 10000;
      case 2664: return 10000;
      case 2665: return 10000;
      case 2666: return 10000;
      case 2667: return 10000;
      case 2668: return 10000;
      case 2669: return 10000;
      case 2670: return 10000;
      case 2671: return 10000;
      case 2672: return 10000;
      case 2673: return 10000;
      case 2674: return 10000;
      case 2675: return 10000;
      case 2676: return 10000;
      case 2677: return 10000;
      case 2678: return 10000;
      case 2679: return 10000;
      case 2680: return 10000;
      case 2681: return 10000;
      case 2682: return 10000;
      case 2683: return 10000;
      case 2684: return 10000;
      case 2685: return 10000;
      case 2686: return 10000;
      case 2687: return 10000;
      case 2688: return 10000;
      case 2689: return 10000;
      case 2690: return 10000;
      case 2691: return 10000;
      case 2692: return 10000;
      case 2693: return 10000;
      case 2694: return 10000;
      case 2695: return 10000;
      case 2696: return 10000;
      case 2697: return 10000;
      case 2698: return 10000;
      case 2699: return 10000;
      case 2700: return 10000;
      case 2701: return 10000;
      case 2702: return 10000;
      case 2703: return 10000;
      case 2704: return 10000;
      case 2705: return 10000;
      case 2706: return 10000;
      case 2707: return 10000;
      case 2708: return 10000;
      case 2709: return 10000;
      case 2710: return 10000;
      case 2711: return 10000;
      case 2712: return 10000;
      case 2713: return 10000;
      case 2714: return 10000;
      case 2715: return 10000;
      case 2716: return 10000;
      case 2717: return 10000;
      case 2718: return 10000;
      case 2719: return 10000;
      case 2720: return 10000;
      case 2721: return 10000;
      case 2722: return 10000;
      case 2723: return 10000;
      case 2724: return 10000;
      case 2725: return 10000;
      case 2726: return 10000;
      case 2727: return 10000;
      case 2728: return 10000;
      case 2729: return 10000;
      case 2730: return 10000;
      case 2731: return 10000;
      case 2732: return 10000;
      case 2733: return 10000;
      case 2734: return 10000;
      case 2735: return 10000;
      case 2736: return 10000;
      case 2737: return 10000;
      case 2738: return 10000;
      case 2739: return 10000;
      case 2740: return 10000;
      case 2741: return 10000;
      case 2742: return 10000;
      case 2743: return 10000;
      case 2744: return 10000;
      case 2745: return 10000;
      case 2746: return 10000;
      case 2747: return 10000;
      case 2748: return 10000;
      case 2749: return 10000;
      case 2750: return 10000;
      case 2751: return 10000;
      case 2752: return 10000;
      case 2753: return 10000;
      case 2754: return 10000;
      case 2755: return 10000;
      case 2756: return 10000;
      case 2757: return 10000;
      case 2758: return 10000;
      case 2759: return 10000;
      case 2760: return 10000;
      case 2761: return 10000;
      case 2762: return 10000;
      case 2763: return 10000;
      case 2764: return 10000;
      case 2765: return 10000;
      case 2766: return 10000;
      case 2767: return 10000;
      case 2768: return 10000;
      case 2769: return 10000;
      case 2770: return 10000;
      case 2771: return 10000;
      case 2772: return 10000;
      case 2773: return 10000;
      case 2774: return 10000;
      case 2775: return 10000;
      case 2776: return 10000;
      case 2777: return 10000;
      case 2778: return 10000;
      case 2779: return 10000;
      case 2780: return 10000;
      case 2781: return 10000;
      case 2782: return 10000;
      case 2783: return 10000;
      case 2784: return 10000;
      case 2785: return 10000;
      case 2786: return 10000;
      case 2787: return 10000;
      case 2788: return 10000;
      case 2789: return 10000;
      case 2790: return 10000;
      case 2791: return 10000;
      case 2792: return 10000;
      case 2793: return 10000;
      case 2794: return 10000;
      case 2795: return 10000;
      case 2796: return 10000;
      case 2797: return 10000;
      case 2798: return 10000;
      case 2799: return 10000;
      case 2800: return 10000;
      case 2801: return 10000;
      case 2802: return 10000;
      case 2803: return 10000;
      case 2804: return 10000;
      case 2805: return 10000;
      case 2806: return 10000;
      case 2807: return 10000;
      case 2808: return 10000;
      case 2809: return 10000;
      case 2810: return 10000;
      case 2811: return 10000;
      case 2812: return 10000;
      case 2813: return 10000;
      case 2814: return 10000;
      case 2815: return 10000;
      case 2816: return 10000;
      case 2817: return 10000;
      case 2818: return 10000;
      case 2819: return 10000;
      case 2820: return 10000;
      case 2821: return 10000;
      case 2822: return 10000;
      case 2823: return 10000;
      case 2824: return 10000;
      case 2825: return 10000;
      case 2826: return 10000;
      case 2827: return 10000;
      case 2828: return 10000;
      case 2829: return 10000;
      case 2830: return 10000;
      case 2831: return 10000;
      case 2832: return 10000;
      case 2833: return 10000;
      case 2834: return 10000;
      case 2835: return 10000;
      case 2836: return 10000;
      case 2837: return 10000;
      case 2838: return 10000;
      case 2839: return 10000;
      case 2840: return 10000;
      case 2841: return 10000;
      case 2842: return 10000;
      case 2843: return 10000;
      case 2844: return 10000;
      case 2845: return 10000;
      case 2846: return 10000;
      case 2847: return 10000;
      case 2848: return 10000;
      case 2849: return 10000;
      case 2850: return 10000;
      case 2851: return 10000;
      case 2852: return 10000;
      case 2853: return 10000;
      case 2854: return 10000;
      case 2855: return 10000;
      case 2856: return 10000;
      case 2857: return 10000;
      case 2858: return 10000;
      case 2859: return 10000;
      case 2860: return 10000;
      case 2861: return 10000;
      case 2862: return 10000;
      case 2863: return 10000;
      case 2864: return 10000;
      case 2865: return 10000;
      case 2866: return 10000;
      case 2867: return 10000;
      case 2868: return 10000;
      case 2869: return 10000;
      case 2870: return 10000;
      case 2871: return 10000;
      case 2872: return 10000;
      case 2873: return 10000;
      case 2874: return 10000;
      case 2875: return 10000;
      case 2876: return 10000;
      case 2877: return 10000;
      case 2878: return 10000;
      case 2879: return 10000;
      case 2880: return 10000;
      case 2881: return 10000;
      case 2882: return 10000;
      case 2883: return 10000;
      case 2884: return 10000;
      case 2885: return 10000;
      case 2886: return 10000;
      case 2887: return 10000;
      case 2888: return 10000;
      case 2889: return 10000;
      case 2890: return 10000;
      case 2891: return 10000;
      case 2892: return 10000;
      case 2893: return 10000;
      case 2894: return 10000;
      case 2895: return 10000;
      case 2896: return 10000;
      case 2897: return 210000;
      case 2898: return 210000;
      case 2899: return 210000;
      case 2900: return 210000;
      case 2901: return 210000;
      case 2902: return 210000;
      case 2903: return 210000;
      case 2904: return 210000;
      case 2905: return 210000;
      case 2906: return 210000;
      case 2907: return 210000;
      case 2908: return 210000;
      case 2909: return 210000;
      case 2910: return 210000;
      case 2911: return 210000;
      case 2912: return 210000;
      case 2913: return 210000;
      case 2914: return 210000;
      case 2915: return 210000;
      case 2916: return 210000;
      case 2917: return 210000;
      case 2918: return 210000;
      case 2919: return 210000;
      case 2920: return 210000;
      case 2921: return 210000;
      case 2922: return 210000;
      case 2923: return 210000;
      case 2924: return 210000;
      case 2925: return 210000;
      case 2926: return 210000;
      case 2927: return 210000;
      case 2928: return 210000;
      case 2929: return 210000;
      case 2930: return 210000;
      case 2931: return 210000;
      case 2932: return 210000;
      case 2933: return 210000;
      case 2934: return 210000;
      case 2935: return 210000;
      case 2936: return 210000;
      case 2937: return 210000;
      case 2938: return 210000;
      case 2939: return 210000;
      case 2940: return 210000;
      case 2941: return 210000;
      case 2942: return 210000;
      case 2943: return 210000;
      case 2944: return 210000;
      case 2945: return 210000;
      case 2946: return 210000;
      case 2947: return 210000;
      case 2948: return 210000;
      case 2949: return 210000;
      case 2950: return 210000;
      case 2951: return 210000;
      case 2952: return 210000;
      case 2953: return 210000;
      case 2954: return 210000;
      case 2955: return 210000;
      case 2956: return 210000;
      case 2957: return 210000;
      case 2958: return 210000;
      case 2959: return 210000;
      case 2960: return 210000;
      case 2961: return 210000;
      case 2962: return 210000;
      case 2963: return 210000;
      case 2964: return 210000;
      case 2965: return 210000;
      case 2966: return 210000;
      case 2967: return 210000;
      case 2968: return 210000;
      case 2969: return 210000;
      case 2970: return 210000;
      case 2971: return 210000;
      case 2972: return 210000;
      case 2973: return 210000;
      case 2974: return 210000;
      case 2975: return 210000;
      case 2976: return 210000;
      case 2977: return 210000;
      case 2978: return 210000;
      case 2979: return 210000;
      case 2980: return 210000;
      case 2981: return 210000;
      case 2982: return 210000;
      case 2983: return 210000;
      case 2984: return 210000;
      case 2985: return 210000;
      case 2986: return 210000;
      case 2987: return 210000;
      case 2988: return 210000;
      case 2989: return 210000;
      case 2990: return 210000;
      case 2991: return 210000;
      case 2992: return 210000;
      case 2993: return 210000;
      case 2994: return 210000;
      case 2995: return 210000;
      case 2996: return 210000;
      case 2997: return 210000;
      case 2998: return 210000;
      case 2999: return 210000;
      case 3000: return 210000;
      case 3001: return 210000;
      case 3002: return 210000;
      case 3003: return 210000;
      case 3004: return 210000;
      case 3005: return 210000;
      case 3006: return 210000;
      case 3007: return 210000;
      case 3008: return 210000;
      case 3009: return 210000;
      case 3010: return 210000;
      case 3011: return 210000;
      case 3012: return 210000;
      case 3013: return 210000;
      case 3014: return 210000;
      case 3015: return 210000;
      case 3016: return 210000;
      case 3017: return 210000;
      case 3018: return 210000;
      case 3019: return 210000;
      case 3020: return 210000;
      case 3021: return 210000;
      case 3022: return 210000;
      case 3023: return 210000;
      case 3024: return 210000;
      case 3025: return 10000;
      case 3026: return 10000;
      case 3027: return 10000;
      case 3028: return 10000;
      case 3029: return 10000;
      case 3030: return 10000;
      case 3031: return 10000;
      case 3032: return 10000;
      case 3033: return 10000;
      case 3034: return 10000;
      case 3035: return 10000;
      case 3036: return 10000;
      case 3037: return 10000;
      case 3038: return 10000;
      case 3039: return 10000;
      case 3040: return 10000;
      case 3041: return 10000;
      case 3042: return 10000;
      case 3043: return 10000;
      case 3044: return 10000;
      case 3045: return 10000;
      case 3046: return 10000;
      case 3047: return 10000;
      case 3048: return 10000;
      case 3049: return 10000;
      case 3050: return 10000;
      case 3051: return 10000;
      case 3052: return 10000;
      case 3053: return 10000;
      case 3054: return 10000;
      case 3055: return 10000;
      case 3056: return 10000;
      case 3057: return 10000;
      case 3058: return 10000;
      case 3059: return 10000;
      case 3060: return 10000;
      case 3061: return 10000;
      case 3062: return 10000;
      case 3063: return 10000;
      case 3064: return 10000;
      case 3065: return 10000;
      case 3066: return 10000;
      case 3067: return 10000;
      case 3068: return 10000;
      case 3069: return 10000;
      case 3070: return 10000;
      case 3071: return 10000;
      case 3072: return 10000;
      case 3073: return 10000;
      case 3074: return 10000;
      case 3075: return 10000;
      case 3076: return 10000;
      case 3077: return 10000;
      case 3078: return 10000;
      case 3079: return 10000;
      case 3080: return 10000;
      case 3081: return 10000;
      case 3082: return 10000;
      case 3083: return 10000;
      case 3084: return 10000;
      case 3085: return 10000;
      case 3086: return 10000;
      case 3087: return 10000;
      case 3088: return 10000;
      case 3089: return 10000;
      case 3090: return 10000;
      case 3091: return 10000;
      case 3092: return 10000;
      case 3093: return 10000;
      case 3094: return 10000;
      case 3095: return 10000;
      case 3096: return 10000;
      case 3097: return 10000;
      case 3098: return 10000;
      case 3099: return 10000;
      case 3100: return 10000;
      case 3101: return 10000;
      case 3102: return 10000;
      case 3103: return 10000;
      case 3104: return 10000;
      case 3105: return 10000;
      case 3106: return 10000;
      case 3107: return 10000;
      case 3108: return 10000;
      case 3109: return 10000;
      case 3110: return 10000;
      case 3111: return 10000;
      case 3112: return 10000;
      case 3113: return 10000;
      case 3114: return 10000;
      case 3115: return 10000;
      case 3116: return 10000;
      case 3117: return 10000;
      case 3118: return 10000;
      case 3119: return 10000;
      case 3120: return 10000;
      case 3121: return 10000;
      case 3122: return 10000;
      case 3123: return 10000;
      case 3124: return 10000;
      case 3125: return 10000;
      case 3126: return 10000;
      case 3127: return 10000;
      case 3128: return 10000;
      case 3129: return 10000;
      case 3130: return 10000;
      case 3131: return 10000;
      case 3132: return 10000;
      case 3133: return 10000;
      case 3134: return 10000;
      case 3135: return 10000;
      case 3136: return 10000;
      case 3137: return 10000;
      case 3138: return 10000;
      case 3139: return 10000;
      case 3140: return 10000;
      case 3141: return 10000;
      case 3142: return 10000;
      case 3143: return 10000;
      case 3144: return 10000;
      case 3145: return 10000;
      case 3146: return 10000;
      case 3147: return 10000;
      case 3148: return 10000;
      case 3149: return 10000;
      case 3150: return 10000;
      case 3151: return 10000;
      case 3152: return 10000;
      case 3153: return 10000;
      case 3154: return 10000;
      case 3155: return 10000;
      case 3156: return 10000;
      case 3157: return 10000;
      case 3158: return 10000;
      case 3159: return 10000;
      case 3160: return 10000;
      case 3161: return 10000;
      case 3162: return 10000;
      case 3163: return 10000;
      case 3164: return 10000;
      case 3165: return 10000;
      case 3166: return 10000;
      case 3167: return 10000;
      case 3168: return 10000;
      case 3169: return 10000;
      case 3170: return 10000;
      case 3171: return 10000;
      case 3172: return 10000;
      case 3173: return 10000;
      case 3174: return 10000;
      case 3175: return 10000;
      case 3176: return 10000;
      case 3177: return 10000;
      case 3178: return 10000;
      case 3179: return 10000;
      case 3180: return 10000;
      case 3181: return 10000;
      case 3182: return 10000;
      case 3183: return 10000;
      case 3184: return 10000;
      case 3185: return 10000;
      case 3186: return 10000;
      case 3187: return 10000;
      case 3188: return 10000;
      case 3189: return 10000;
      case 3190: return 10000;
      case 3191: return 10000;
      case 3192: return 10000;
      case 3193: return 10000;
      case 3194: return 10000;
      case 3195: return 10000;
      case 3196: return 10000;
      case 3197: return 10000;
      case 3198: return 10000;
      case 3199: return 10000;
      case 3200: return 10000;
      case 3201: return 10000;
      case 3202: return 10000;
      case 3203: return 10000;
      case 3204: return 10000;
      case 3205: return 10000;
      case 3206: return 10000;
      case 3207: return 10000;
      case 3208: return 10000;
      case 3209: return 10000;
      case 3210: return 10000;
      case 3211: return 10000;
      case 3212: return 10000;
      case 3213: return 10000;
      case 3214: return 10000;
      case 3215: return 10000;
      case 3216: return 10000;
      case 3217: return 10000;
      case 3218: return 10000;
      case 3219: return 10000;
      case 3220: return 10000;
      case 3221: return 10000;
      case 3222: return 10000;
      case 3223: return 10000;
      case 3224: return 10000;
      case 3225: return 10000;
      case 3226: return 10000;
      case 3227: return 10000;
      case 3228: return 10000;
      case 3229: return 10000;
      case 3230: return 10000;
      case 3231: return 10000;
      case 3232: return 10000;
      case 3233: return 10000;
      case 3234: return 10000;
      case 3235: return 10000;
      case 3236: return 10000;
      case 3237: return 10000;
      case 3238: return 10000;
      case 3239: return 10000;
      case 3240: return 10000;
      case 3241: return 10000;
      case 3242: return 10000;
      case 3243: return 10000;
      case 3244: return 10000;
      case 3245: return 10000;
      case 3246: return 10000;
      case 3247: return 10000;
      case 3248: return 10000;
      case 3249: return 10000;
      case 3250: return 10000;
      case 3251: return 10000;
      case 3252: return 10000;
      case 3253: return 10000;
      case 3254: return 10000;
      case 3255: return 10000;
      case 3256: return 10000;
      case 3257: return 10000;
      case 3258: return 10000;
      case 3259: return 10000;
      case 3260: return 10000;
      case 3261: return 10000;
      case 3262: return 10000;
      case 3263: return 10000;
      case 3264: return 10000;
      case 3265: return 10000;
      case 3266: return 10000;
      case 3267: return 10000;
      case 3268: return 10000;
      case 3269: return 10000;
      case 3270: return 10000;
      case 3271: return 10000;
      case 3272: return 10000;
      case 3273: return 10000;
      case 3274: return 10000;
      case 3275: return 10000;
      case 3276: return 10000;
      case 3277: return 10000;
      case 3278: return 10000;
      case 3279: return 10000;
      case 3280: return 10000;
      case 3281: return 10000;
      case 3282: return 10000;
      case 3283: return 10000;
      case 3284: return 10000;
      case 3285: return 10000;
      case 3286: return 10000;
      case 3287: return 10000;
      case 3288: return 10000;
      case 3289: return 10000;
      case 3290: return 10000;
      case 3291: return 10000;
      case 3292: return 10000;
      case 3293: return 10000;
      case 3294: return 10000;
      case 3295: return 10000;
      case 3296: return 10000;
      case 3297: return 10000;
      case 3298: return 10000;
      case 3299: return 10000;
      case 3300: return 10000;
      case 3301: return 10000;
      case 3302: return 10000;
      case 3303: return 10000;
      case 3304: return 10000;
      case 3305: return 10000;
      case 3306: return 10000;
      case 3307: return 10000;
      case 3308: return 10000;
      case 3309: return 10000;
      case 3310: return 10000;
      case 3311: return 10000;
      case 3312: return 10000;
      case 3313: return 10000;
      case 3314: return 10000;
      case 3315: return 10000;
      case 3316: return 10000;
      case 3317: return 10000;
      case 3318: return 10000;
      case 3319: return 10000;
      case 3320: return 10000;
      case 3321: return 10000;
      case 3322: return 10000;
      case 3323: return 10000;
      case 3324: return 10000;
      case 3325: return 10000;
      case 3326: return 10000;
      case 3327: return 10000;
      case 3328: return 10000;
      case 3329: return 10000;
      case 3330: return 10000;
      case 3331: return 10000;
      case 3332: return 10000;
      case 3333: return 10000;
      case 3334: return 10000;
      case 3335: return 10000;
      case 3336: return 10000;
      case 3337: return 10000;
      case 3338: return 10000;
      case 3339: return 10000;
      case 3340: return 10000;
      case 3341: return 10000;
      case 3342: return 10000;
      case 3343: return 10000;
      case 3344: return 10000;
      case 3345: return 10000;
      case 3346: return 10000;
      case 3347: return 10000;
      case 3348: return 10000;
      case 3349: return 10000;
      case 3350: return 10000;
      case 3351: return 10000;
      case 3352: return 10000;
      case 3353: return 10000;
      case 3354: return 10000;
      case 3355: return 10000;
      case 3356: return 10000;
      case 3357: return 10000;
      case 3358: return 10000;
      case 3359: return 10000;
      case 3360: return 10000;
      case 3361: return 10000;
      case 3362: return 10000;
      case 3363: return 10000;
      case 3364: return 10000;
      case 3365: return 10000;
      case 3366: return 10000;
      case 3367: return 10000;
      case 3368: return 10000;
      case 3369: return 10000;
      case 3370: return 10000;
      case 3371: return 10000;
      case 3372: return 10000;
      case 3373: return 10000;
      case 3374: return 10000;
      case 3375: return 10000;
      case 3376: return 10000;
      case 3377: return 10000;
      case 3378: return 10000;
      case 3379: return 10000;
      case 3380: return 10000;
      case 3381: return 10000;
      case 3382: return 10000;
      case 3383: return 10000;
      case 3384: return 10000;
      case 3385: return 10000;
      case 3386: return 10000;
      case 3387: return 10000;
      case 3388: return 10000;
      case 3389: return 10000;
      case 3390: return 10000;
      case 3391: return 10000;
      case 3392: return 10000;
      case 3393: return 10000;
      case 3394: return 10000;
      case 3395: return 10000;
      case 3396: return 10000;
      case 3397: return 10000;
      case 3398: return 10000;
      case 3399: return 10000;
      case 3400: return 10000;
      case 3401: return 10000;
      case 3402: return 10000;
      case 3403: return 10000;
      case 3404: return 10000;
      case 3405: return 10000;
      case 3406: return 10000;
      case 3407: return 10000;
      case 3408: return 10000;
      case 3409: return 10000;
      case 3410: return 10000;
      case 3411: return 10000;
      case 3412: return 10000;
      case 3413: return 10000;
      case 3414: return 10000;
      case 3415: return 10000;
      case 3416: return 10000;
      case 3417: return 10000;
      case 3418: return 10000;
      case 3419: return 10000;
      case 3420: return 10000;
      case 3421: return 10000;
      case 3422: return 10000;
      case 3423: return 10000;
      case 3424: return 10000;
      case 3425: return 10000;
      case 3426: return 10000;
      case 3427: return 10000;
      case 3428: return 10000;
      case 3429: return 10000;
      case 3430: return 10000;
      case 3431: return 10000;
      case 3432: return 10000;
      case 3433: return 10000;
      case 3434: return 10000;
      case 3435: return 10000;
      case 3436: return 10000;
      case 3437: return 10000;
      case 3438: return 10000;
      case 3439: return 10000;
      case 3440: return 10000;
      case 3441: return 10000;
      case 3442: return 10000;
      case 3443: return 10000;
      case 3444: return 10000;
      case 3445: return 10000;
      case 3446: return 10000;
      case 3447: return 10000;
      case 3448: return 10000;
      case 3449: return 10000;
      case 3450: return 10000;
      case 3451: return 10000;
      case 3452: return 10000;
      case 3453: return 10000;
      case 3454: return 10000;
      case 3455: return 10000;
      case 3456: return 10000;
      case 3457: return 10000;
      case 3458: return 10000;
      case 3459: return 10000;
      case 3460: return 10000;
      case 3461: return 10000;
      case 3462: return 10000;
      case 3463: return 10000;
      case 3464: return 10000;
      case 3465: return 10000;
      case 3466: return 10000;
      case 3467: return 10000;
      case 3468: return 10000;
      case 3469: return 10000;
      case 3470: return 10000;
      case 3471: return 10000;
      case 3472: return 10000;
      case 3473: return 10000;
      case 3474: return 10000;
      case 3475: return 10000;
      case 3476: return 10000;
      case 3477: return 10000;
      case 3478: return 10000;
      case 3479: return 10000;
      case 3480: return 10000;
      case 3481: return 10000;
      case 3482: return 10000;
      case 3483: return 10000;
      case 3484: return 10000;
      case 3485: return 10000;
      case 3486: return 10000;
      case 3487: return 10000;
      case 3488: return 10000;
      case 3489: return 10000;
      case 3490: return 10000;
      case 3491: return 10000;
      case 3492: return 10000;
      case 3493: return 10000;
      case 3494: return 10000;
      case 3495: return 10000;
      case 3496: return 10000;
      case 3497: return 10000;
      case 3498: return 10000;
      case 3499: return 10000;
      case 3500: return 10000;
      case 3501: return 10000;
      case 3502: return 10000;
      case 3503: return 10000;
      case 3504: return 10000;
      case 3505: return 10000;
      case 3506: return 10000;
      case 3507: return 10000;
      case 3508: return 10000;
      case 3509: return 10000;
      case 3510: return 10000;
      case 3511: return 10000;
      case 3512: return 10000;
      case 3513: return 10000;
      case 3514: return 10000;
      case 3515: return 10000;
      case 3516: return 10000;
      case 3517: return 10000;
      case 3518: return 10000;
      case 3519: return 10000;
      case 3520: return 10000;
      case 3521: return 10000;
      case 3522: return 10000;
      case 3523: return 10000;
      case 3524: return 10000;
      case 3525: return 10000;
      case 3526: return 10000;
      case 3527: return 10000;
      case 3528: return 10000;
      case 3529: return 10000;
      case 3530: return 10000;
      case 3531: return 10000;
      case 3532: return 10000;
      case 3533: return 10000;
      case 3534: return 10000;
      case 3535: return 10000;
      case 3536: return 10000;
      case 3537: return 10000;
      case 3538: return 10000;
      case 3539: return 10000;
      case 3540: return 10000;
      case 3541: return 10000;
      case 3542: return 10000;
      case 3543: return 10000;
      case 3544: return 10000;
      case 3545: return 10000;
      case 3546: return 10000;
      case 3547: return 10000;
      case 3548: return 10000;
      case 3549: return 10000;
      case 3550: return 10000;
      case 3551: return 10000;
      case 3552: return 10000;
      case 3553: return 10000;
      case 3554: return 10000;
      case 3555: return 10000;
      case 3556: return 10000;
      case 3557: return 10000;
      case 3558: return 10000;
      case 3559: return 10000;
      case 3560: return 10000;
      case 3561: return 10000;
      case 3562: return 10000;
      case 3563: return 10000;
      case 3564: return 10000;
      case 3565: return 10000;
      case 3566: return 10000;
      case 3567: return 10000;
      case 3568: return 10000;
      case 3569: return 10000;
      case 3570: return 10000;
      case 3571: return 10000;
      case 3572: return 10000;
      case 3573: return 10000;
      case 3574: return 10000;
      case 3575: return 10000;
      case 3576: return 10000;
      case 3577: return 10000;
      case 3578: return 10000;
      case 3579: return 10000;
      case 3580: return 10000;
      case 3581: return 10000;
      case 3582: return 10000;
      case 3583: return 10000;
      case 3584: return 10000;
      case 3585: return 10000;
      case 3586: return 10000;
      case 3587: return 10000;
      case 3588: return 10000;
      case 3589: return 10000;
      case 3590: return 10000;
      case 3591: return 10000;
      case 3592: return 10000;
      case 3593: return 10000;
      case 3594: return 10000;
      case 3595: return 10000;
      case 3596: return 10000;
      case 3597: return 10000;
      case 3598: return 10000;
      case 3599: return 10000;
      case 3600: return 10000;
      case 3601: return 10000;
      case 3602: return 10000;
      case 3603: return 10000;
      case 3604: return 10000;
      case 3605: return 10000;
      case 3606: return 10000;
      case 3607: return 10000;
      case 3608: return 10000;
      case 3609: return 10000;
      case 3610: return 10000;
      case 3611: return 10000;
      case 3612: return 10000;
      case 3613: return 10000;
      case 3614: return 10000;
      case 3615: return 10000;
      case 3616: return 10000;
      case 3617: return 10000;
      case 3618: return 10000;
      case 3619: return 10000;
      case 3620: return 10000;
      case 3621: return 10000;
      case 3622: return 10000;
      case 3623: return 10000;
      case 3624: return 10000;
      case 3625: return 10000;
      case 3626: return 10000;
      case 3627: return 10000;
      case 3628: return 10000;
      case 3629: return 10000;
      case 3630: return 10000;
      case 3631: return 10000;
      case 3632: return 10000;
      case 3633: return 10000;
      case 3634: return 10000;
      case 3635: return 10000;
      case 3636: return 10000;
      case 3637: return 10000;
      case 3638: return 10000;
      case 3639: return 10000;
      case 3640: return 10000;
      case 3641: return 10000;
      case 3642: return 10000;
      case 3643: return 10000;
      case 3644: return 10000;
      case 3645: return 10000;
      case 3646: return 10000;
      case 3647: return 10000;
      case 3648: return 10000;
      case 3649: return 10000;
      case 3650: return 10000;
      case 3651: return 10000;
      case 3652: return 10000;
      case 3653: return 10000;
      case 3654: return 10000;
      case 3655: return 10000;
      case 3656: return 10000;
      case 3657: return 10000;
      case 3658: return 10000;
      case 3659: return 10000;
      case 3660: return 10000;
      case 3661: return 10000;
      case 3662: return 10000;
      case 3663: return 10000;
      case 3664: return 10000;
      case 3665: return 10000;
      case 3666: return 10000;
      case 3667: return 10000;
      case 3668: return 10000;
      case 3669: return 10000;
      case 3670: return 10000;
      case 3671: return 10000;
      case 3672: return 10000;
      case 3673: return 10000;
      case 3674: return 10000;
      case 3675: return 10000;
      case 3676: return 10000;
      case 3677: return 10000;
      case 3678: return 10000;
      case 3679: return 10000;
      case 3680: return 10000;
      case 3681: return 10000;
      case 3682: return 10000;
      case 3683: return 10000;
      case 3684: return 10000;
      case 3685: return 10000;
      case 3686: return 10000;
      case 3687: return 10000;
      case 3688: return 10000;
      case 3689: return 10000;
      case 3690: return 10000;
      case 3691: return 10000;
      case 3692: return 10000;
      case 3693: return 10000;
      case 3694: return 10000;
      case 3695: return 10000;
      case 3696: return 10000;
      case 3697: return 10000;
      case 3698: return 10000;
      case 3699: return 10000;
      case 3700: return 10000;
      case 3701: return 10000;
      case 3702: return 10000;
      case 3703: return 10000;
      case 3704: return 10000;
      case 3705: return 10000;
      case 3706: return 10000;
      case 3707: return 10000;
      case 3708: return 10000;
      case 3709: return 10000;
      case 3710: return 10000;
      case 3711: return 10000;
      case 3712: return 10000;
      case 3713: return 10000;
      case 3714: return 10000;
      case 3715: return 10000;
      case 3716: return 10000;
      case 3717: return 10000;
      case 3718: return 10000;
      case 3719: return 10000;
      case 3720: return 10000;
      case 3721: return 10000;
      case 3722: return 10000;
      case 3723: return 10000;
      case 3724: return 10000;
      case 3725: return 10000;
      case 3726: return 10000;
      case 3727: return 10000;
      case 3728: return 10000;
      case 3729: return 10000;
      case 3730: return 10000;
      case 3731: return 10000;
      case 3732: return 10000;
      case 3733: return 10000;
      case 3734: return 10000;
      case 3735: return 10000;
      case 3736: return 10000;
      case 3737: return 10000;
      case 3738: return 10000;
      case 3739: return 10000;
      case 3740: return 10000;
      case 3741: return 10000;
      case 3742: return 10000;
      case 3743: return 10000;
      case 3744: return 10000;
      case 3745: return 10000;
      case 3746: return 10000;
      case 3747: return 10000;
      case 3748: return 10000;
      case 3749: return 10000;
      case 3750: return 10000;
      case 3751: return 10000;
      case 3752: return 10000;
      case 3753: return 10000;
      case 3754: return 10000;
      case 3755: return 10000;
      case 3756: return 10000;
      case 3757: return 10000;
      case 3758: return 10000;
      case 3759: return 10000;
      case 3760: return 10000;
      case 3761: return 10000;
      case 3762: return 10000;
      case 3763: return 10000;
      case 3764: return 10000;
      case 3765: return 10000;
      case 3766: return 10000;
      case 3767: return 10000;
      case 3768: return 10000;
      case 3769: return 10000;
      case 3770: return 10000;
      case 3771: return 10000;
      case 3772: return 10000;
      case 3773: return 10000;
      case 3774: return 10000;
      case 3775: return 10000;
      case 3776: return 10000;
      case 3777: return 10000;
      case 3778: return 10000;
      case 3779: return 10000;
      case 3780: return 10000;
      case 3781: return 10000;
      case 3782: return 10000;
      case 3783: return 10000;
      case 3784: return 10000;
      case 3785: return 10000;
      case 3786: return 10000;
      case 3787: return 10000;
      case 3788: return 10000;
      case 3789: return 10000;
      case 3790: return 10000;
      case 3791: return 10000;
      case 3792: return 10000;
      case 3793: return 10000;
      case 3794: return 10000;
      case 3795: return 10000;
      case 3796: return 10000;
      case 3797: return 10000;
      case 3798: return 10000;
      case 3799: return 10000;
      case 3800: return 10000;
      case 3801: return 10000;
      case 3802: return 10000;
      case 3803: return 10000;
      case 3804: return 10000;
      case 3805: return 10000;
      case 3806: return 10000;
      case 3807: return 10000;
      case 3808: return 10000;
      case 3809: return 10000;
      case 3810: return 10000;
      case 3811: return 10000;
      case 3812: return 10000;
      case 3813: return 10000;
      case 3814: return 10000;
      case 3815: return 10000;
      case 3816: return 10000;
      case 3817: return 10000;
      case 3818: return 10000;
      case 3819: return 10000;
      case 3820: return 10000;
      case 3821: return 10000;
      case 3822: return 10000;
      case 3823: return 10000;
      case 3824: return 10000;
      case 3825: return 10000;
      case 3826: return 10000;
      case 3827: return 10000;
      case 3828: return 10000;
      case 3829: return 10000;
      case 3830: return 10000;
      case 3831: return 10000;
      case 3832: return 10000;
      case 3833: return 10000;
      case 3834: return 10000;
      case 3835: return 10000;
      case 3836: return 10000;
      case 3837: return 10000;
      case 3838: return 10000;
      case 3839: return 10000;
      case 3840: return 10000;
      case 3841: return 10000;
      case 3842: return 10000;
      case 3843: return 10000;
      case 3844: return 10000;
      case 3845: return 10000;
      case 3846: return 10000;
      case 3847: return 10000;
      case 3848: return 10000;
      case 3849: return 10000;
      case 3850: return 10000;
      case 3851: return 10000;
      case 3852: return 10000;
      case 3853: return 10000;
      case 3854: return 10000;
      case 3855: return 10000;
      case 3856: return 10000;
      case 3857: return 10000;
      case 3858: return 10000;
      case 3859: return 10000;
      case 3860: return 10000;
      case 3861: return 10000;
      case 3862: return 10000;
      case 3863: return 10000;
      case 3864: return 10000;
      case 3865: return 10000;
      case 3866: return 10000;
      case 3867: return 10000;
      case 3868: return 10000;
      case 3869: return 10000;
      case 3870: return 10000;
      case 3871: return 10000;
      case 3872: return 10000;
      case 3873: return 10000;
      case 3874: return 10000;
      case 3875: return 10000;
      case 3876: return 10000;
      case 3877: return 10000;
      case 3878: return 10000;
      case 3879: return 10000;
      case 3880: return 10000;
      case 3881: return 10000;
      case 3882: return 10000;
      case 3883: return 10000;
      case 3884: return 10000;
      case 3885: return 10000;
      case 3886: return 10000;
      case 3887: return 10000;
      case 3888: return 10000;
      case 3889: return 10000;
      case 3890: return 10000;
      case 3891: return 10000;
      case 3892: return 10000;
      case 3893: return 10000;
      case 3894: return 10000;
      case 3895: return 10000;
      case 3896: return 10000;
      case 3897: return 10000;
      case 3898: return 10000;
      case 3899: return 10000;
      case 3900: return 10000;
      case 3901: return 10000;
      case 3902: return 10000;
      case 3903: return 10000;
      case 3904: return 10000;
      case 3905: return 10000;
      case 3906: return 10000;
      case 3907: return 10000;
      case 3908: return 10000;
      case 3909: return 10000;
      case 3910: return 10000;
      case 3911: return 10000;
      case 3912: return 10000;
      case 3913: return 10000;
      case 3914: return 10000;
      case 3915: return 10000;
      case 3916: return 10000;
      case 3917: return 10000;
      case 3918: return 10000;
      case 3919: return 10000;
      case 3920: return 10000;
      case 3921: return 10000;
      case 3922: return 10000;
      case 3923: return 10000;
      case 3924: return 10000;
      case 3925: return 10000;
      case 3926: return 10000;
      case 3927: return 10000;
      case 3928: return 10000;
      case 3929: return 10000;
      case 3930: return 10000;
      case 3931: return 10000;
      case 3932: return 10000;
      case 3933: return 10000;
      case 3934: return 10000;
      case 3935: return 10000;
      case 3936: return 10000;
      case 3937: return 10000;
      case 3938: return 10000;
      case 3939: return 10000;
      case 3940: return 10000;
      case 3941: return 10000;
      case 3942: return 10000;
      case 3943: return 10000;
      case 3944: return 10000;
      case 3945: return 10000;
      case 3946: return 10000;
      case 3947: return 10000;
      case 3948: return 10000;
      case 3949: return 10000;
      case 3950: return 10000;
      case 3951: return 10000;
      case 3952: return 10000;
      case 3953: return 10000;
      case 3954: return 10000;
      case 3955: return 10000;
      case 3956: return 10000;
      case 3957: return 10000;
      case 3958: return 10000;
      case 3959: return 10000;
      case 3960: return 10000;
      case 3961: return 10000;
      case 3962: return 10000;
      case 3963: return 10000;
      case 3964: return 10000;
      case 3965: return 10000;
      case 3966: return 10000;
      case 3967: return 10000;
      case 3968: return 10000;
      case 3969: return 10000;
      case 3970: return 10000;
      case 3971: return 10000;
      case 3972: return 10000;
      case 3973: return 10000;
      case 3974: return 10000;
      case 3975: return 10000;
      case 3976: return 10000;
      case 3977: return 10000;
      case 3978: return 10000;
      case 3979: return 10000;
      case 3980: return 10000;
      case 3981: return 10000;
      case 3982: return 10000;
      case 3983: return 10000;
      case 3984: return 10000;
      case 3985: return 10000;
      case 3986: return 10000;
      case 3987: return 10000;
      case 3988: return 10000;
      case 3989: return 10000;
      case 3990: return 10000;
      case 3991: return 10000;
      case 3992: return 10000;
      case 3993: return 10000;
      case 3994: return 10000;
      case 3995: return 10000;
      case 3996: return 10000;
      case 3997: return 10000;
      case 3998: return 10000;
      case 3999: return 10000;
      case 4000: return 10000;
      case 4001: return 10000;
      case 4002: return 10000;
      case 4003: return 10000;
      case 4004: return 10000;
      case 4005: return 10000;
      case 4006: return 10000;
      case 4007: return 10000;
      case 4008: return 10000;
      case 4009: return 10000;
      case 4010: return 10000;
      case 4011: return 10000;
      case 4012: return 10000;
      case 4013: return 10000;
      case 4014: return 10000;
      case 4015: return 10000;
      case 4016: return 10000;
      case 4017: return 10000;
      case 4018: return 10000;
      case 4019: return 10000;
      case 4020: return 10000;
      case 4021: return 10000;
      case 4022: return 10000;
      case 4023: return 10000;
      case 4024: return 10000;
      case 4025: return 10000;
      case 4026: return 10000;
      case 4027: return 10000;
      case 4028: return 10000;
      case 4029: return 10000;
      case 4030: return 10000;
      case 4031: return 10000;
      case 4032: return 10000;
      case 4033: return 10000;
      case 4034: return 10000;
      case 4035: return 10000;
      case 4036: return 10000;
      case 4037: return 10000;
      case 4038: return 10000;
      case 4039: return 10000;
      case 4040: return 10000;
      case 4041: return 10000;
      case 4042: return 10000;
      case 4043: return 10000;
      case 4044: return 10000;
      case 4045: return 10000;
      case 4046: return 10000;
      case 4047: return 10000;
      case 4048: return 10000;
      case 4049: return 10000;
      case 4050: return 10000;
      case 4051: return 10000;
      case 4052: return 10000;
      case 4053: return 10000;
      case 4054: return 10000;
      case 4055: return 10000;
      case 4056: return 10000;
      case 4057: return 10000;
      case 4058: return 10000;
      case 4059: return 10000;
      case 4060: return 10000;
      case 4061: return 10000;
      case 4062: return 10000;
      case 4063: return 10000;
      case 4064: return 10000;
      case 4065: return 10000;
      case 4066: return 10000;
      case 4067: return 10000;
      case 4068: return 10000;
      case 4069: return 10000;
      case 4070: return 10000;
      case 4071: return 10000;
      case 4072: return 10000;
      case 4073: return 10000;
      case 4074: return 10000;
      case 4075: return 10000;
      case 4076: return 10000;
      case 4077: return 10000;
      case 4078: return 10000;
      case 4079: return 10000;
      case 4080: return 10000;
      case 4081: return 10000;
      case 4082: return 10000;
      case 4083: return 10000;
      case 4084: return 10000;
      case 4085: return 10000;
      case 4086: return 10000;
      case 4087: return 10000;
      case 4088: return 10000;
      case 4089: return 10000;
      case 4090: return 10000;
      case 4091: return 10000;
      case 4092: return 10000;
      case 4093: return 10000;
      case 4094: return 10000;
      case 4095: return 10000;
      case 4096: return 10000;
      case 4097: return 10000;
      case 4098: return 10000;
      case 4099: return 10000;
      case 4100: return 10000;
      case 4101: return 10000;
      case 4102: return 10000;
      case 4103: return 10000;
      case 4104: return 10000;
      case 4105: return 10000;
      case 4106: return 10000;
      case 4107: return 10000;
      case 4108: return 10000;
      case 4109: return 10000;
      case 4110: return 10000;
      case 4111: return 10000;
      case 4112: return 10000;
      case 4113: return 10000;
      case 4114: return 10000;
      case 4115: return 10000;
      case 4116: return 10000;
      case 4117: return 10000;
      case 4118: return 10000;
      case 4119: return 10000;
      case 4120: return 10000;
      case 4121: return 10000;
      case 4122: return 10000;
      case 4123: return 10000;
      case 4124: return 10000;
      case 4125: return 10000;
      case 4126: return 10000;
      case 4127: return 10000;
      case 4128: return 10000;
      case 4129: return 10000;
      case 4130: return 10000;
      case 4131: return 10000;
      case 4132: return 10000;
      case 4133: return 10000;
      case 4134: return 10000;
      case 4135: return 10000;
      case 4136: return 10000;
      case 4137: return 10000;
      case 4138: return 10000;
      case 4139: return 10000;
      case 4140: return 10000;
      case 4141: return 10000;
      case 4142: return 10000;
      case 4143: return 10000;
      case 4144: return 10000;
      case 4145: return 10000;
      case 4146: return 10000;
      case 4147: return 10000;
      case 4148: return 10000;
      case 4149: return 10000;
      case 4150: return 10000;
      case 4151: return 10000;
      case 4152: return 10000;
      case 4153: return 10000;
      case 4154: return 10000;
      case 4155: return 10000;
      case 4156: return 10000;
      case 4157: return 10000;
      case 4158: return 10000;
      case 4159: return 10000;
      case 4160: return 10000;
      case 4161: return 10000;
      case 4162: return 10000;
      case 4163: return 10000;
      case 4164: return 10000;
      case 4165: return 10000;
      case 4166: return 10000;
      case 4167: return 10000;
      case 4168: return 10000;
      case 4169: return 10000;
      case 4170: return 10000;
      case 4171: return 10000;
      case 4172: return 10000;
      case 4173: return 10000;
      case 4174: return 10000;
      case 4175: return 10000;
      case 4176: return 10000;
      case 4177: return 10000;
      case 4178: return 10000;
      case 4179: return 10000;
      case 4180: return 10000;
      case 4181: return 10000;
      case 4182: return 10000;
      case 4183: return 10000;
      case 4184: return 10000;
      case 4185: return 10000;
      case 4186: return 10000;
      case 4187: return 10000;
      case 4188: return 10000;
      case 4189: return 10000;
      case 4190: return 10000;
      case 4191: return 10000;
      case 4192: return 10000;
      case 4193: return 10000;
      case 4194: return 10000;
      case 4195: return 10000;
      case 4196: return 10000;
      case 4197: return 10000;
      case 4198: return 10000;
      case 4199: return 10000;
      case 4200: return 10000;
      case 4201: return 10000;
      case 4202: return 10000;
      case 4203: return 10000;
      case 4204: return 10000;
      case 4205: return 10000;
      case 4206: return 10000;
      case 4207: return 10000;
      case 4208: return 10000;
      case 4209: return 10000;
      case 4210: return 10000;
      case 4211: return 10000;
      case 4212: return 10000;
      case 4213: return 10000;
      case 4214: return 10000;
      case 4215: return 10000;
      case 4216: return 10000;
      case 4217: return 10000;
      case 4218: return 10000;
      case 4219: return 10000;
      case 4220: return 10000;
      case 4221: return 10000;
      case 4222: return 10000;
      case 4223: return 10000;
      case 4224: return 10000;
      case 4225: return 10000;
      case 4226: return 10000;
      case 4227: return 10000;
      case 4228: return 10000;
      case 4229: return 10000;
      case 4230: return 10000;
      case 4231: return 10000;
      case 4232: return 10000;
      case 4233: return 10000;
      case 4234: return 10000;
      case 4235: return 10000;
      case 4236: return 10000;
      case 4237: return 10000;
      case 4238: return 10000;
      case 4239: return 10000;
      case 4240: return 10000;
      case 4241: return 10000;
      case 4242: return 10000;
      case 4243: return 10000;
      case 4244: return 10000;
      case 4245: return 10000;
      case 4246: return 10000;
      case 4247: return 10000;
      case 4248: return 10000;
      case 4249: return 10000;
      case 4250: return 10000;
      case 4251: return 10000;
      case 4252: return 10000;
      case 4253: return 10000;
      case 4254: return 10000;
      case 4255: return 10000;
      case 4256: return 10000;
      case 4257: return 10000;
      case 4258: return 10000;
      case 4259: return 10000;
      case 4260: return 10000;
      case 4261: return 10000;
      case 4262: return 10000;
      case 4263: return 10000;
      case 4264: return 10000;
      case 4265: return 10000;
      case 4266: return 10000;
      case 4267: return 10000;
      case 4268: return 10000;
      case 4269: return 10000;
      case 4270: return 10000;
      case 4271: return 10000;
      case 4272: return 10000;
      case 4273: return 10000;
      case 4274: return 10000;
      case 4275: return 10000;
      case 4276: return 10000;
      case 4277: return 10000;
      case 4278: return 10000;
      case 4279: return 10000;
      case 4280: return 10000;
      case 4281: return 10000;
      case 4282: return 10000;
      case 4283: return 10000;
      case 4284: return 10000;
      case 4285: return 10000;
      case 4286: return 10000;
      case 4287: return 10000;
      case 4288: return 10000;
      case 4289: return 10000;
      case 4290: return 10000;
      case 4291: return 10000;
      case 4292: return 10000;
      case 4293: return 10000;
      case 4294: return 10000;
      case 4295: return 10000;
      case 4296: return 10000;
      case 4297: return 10000;
      case 4298: return 10000;
      case 4299: return 10000;
      case 4300: return 10000;
      case 4301: return 10000;
      case 4302: return 10000;
      case 4303: return 10000;
      case 4304: return 10000;
      case 4305: return 10000;
      case 4306: return 10000;
      case 4307: return 10000;
      case 4308: return 10000;
      case 4309: return 10000;
      case 4310: return 10000;
      case 4311: return 10000;
      case 4312: return 10000;
      case 4313: return 10000;
      case 4314: return 10000;
      case 4315: return 10000;
      case 4316: return 10000;
      case 4317: return 10000;
      case 4318: return 10000;
      case 4319: return 10000;
      case 4320: return 10000;
      case 4321: return 10000;
      case 4322: return 10000;
      case 4323: return 10000;
      case 4324: return 10000;
      case 4325: return 10000;
      case 4326: return 10000;
      case 4327: return 10000;
      case 4328: return 10000;
      case 4329: return 10000;
      case 4330: return 10000;
      case 4331: return 10000;
      case 4332: return 10000;
      case 4333: return 10000;
      case 4334: return 10000;
      case 4335: return 10000;
      case 4336: return 10000;
      case 4337: return 10000;
      case 4338: return 10000;
      case 4339: return 10000;
      case 4340: return 10000;
      case 4341: return 10000;
      case 4342: return 10000;
      case 4343: return 10000;
      case 4344: return 10000;
      case 4345: return 10000;
      case 4346: return 10000;
      case 4347: return 10000;
      case 4348: return 10000;
      case 4349: return 10000;
      case 4350: return 10000;
      case 4351: return 10000;
      case 4352: return 10000;
      case 4353: return 10000;
      case 4354: return 10000;
      case 4355: return 10000;
      case 4356: return 10000;
      case 4357: return 10000;
      case 4358: return 10000;
      case 4359: return 10000;
      case 4360: return 10000;
      case 4361: return 10000;
      case 4362: return 10000;
      case 4363: return 10000;
      case 4364: return 10000;
      case 4365: return 10000;
      case 4366: return 10000;
      case 4367: return 10000;
      case 4368: return 10000;
      case 4369: return 10000;
      case 4370: return 10000;
      case 4371: return 10000;
      case 4372: return 10000;
      case 4373: return 10000;
      case 4374: return 10000;
      case 4375: return 10000;
      case 4376: return 10000;
      case 4377: return 10000;
      case 4378: return 10000;
      case 4379: return 10000;
      case 4380: return 10000;
      case 4381: return 10000;
      case 4382: return 10000;
      case 4383: return 10000;
      case 4384: return 10000;
      case 4385: return 10000;
      case 4386: return 10000;
      case 4387: return 10000;
      case 4388: return 10000;
      case 4389: return 10000;
      case 4390: return 10000;
      case 4391: return 10000;
      case 4392: return 10000;
      case 4393: return 10000;
      case 4394: return 10000;
      case 4395: return 10000;
      case 4396: return 10000;
      case 4397: return 10000;
      case 4398: return 10000;
      case 4399: return 10000;
      case 4400: return 10000;
      case 4401: return 10000;
      case 4402: return 10000;
      case 4403: return 10000;
      case 4404: return 10000;
      case 4405: return 10000;
      case 4406: return 10000;
      case 4407: return 10000;
      case 4408: return 10000;
      case 4409: return 10000;
      case 4410: return 10000;
      case 4411: return 10000;
      case 4412: return 10000;
      case 4413: return 10000;
      case 4414: return 10000;
      case 4415: return 10000;
      case 4416: return 10000;
      case 4417: return 10000;
      case 4418: return 10000;
      case 4419: return 10000;
      case 4420: return 10000;
      case 4421: return 10000;
      case 4422: return 10000;
      case 4423: return 10000;
      case 4424: return 10000;
      case 4425: return 10000;
      case 4426: return 10000;
      case 4427: return 10000;
      case 4428: return 10000;
      case 4429: return 10000;
      case 4430: return 10000;
      case 4431: return 10000;
      case 4432: return 10000;
      case 4433: return 10000;
      case 4434: return 10000;
      case 4435: return 10000;
      case 4436: return 10000;
      case 4437: return 10000;
      case 4438: return 10000;
      case 4439: return 10000;
      case 4440: return 10000;
      case 4441: return 10000;
      case 4442: return 10000;
      case 4443: return 10000;
      case 4444: return 10000;
      case 4445: return 10000;
      case 4446: return 10000;
      case 4447: return 10000;
      case 4448: return 10000;
      case 4449: return 10000;
      case 4450: return 10000;
      case 4451: return 10000;
      case 4452: return 10000;
      case 4453: return 10000;
      case 4454: return 10000;
      case 4455: return 10000;
      case 4456: return 10000;
      case 4457: return 10000;
      case 4458: return 10000;
      case 4459: return 10000;
      case 4460: return 10000;
      case 4461: return 10000;
      case 4462: return 10000;
      case 4463: return 10000;
      case 4464: return 10000;
      case 4465: return 10000;
      case 4466: return 10000;
      case 4467: return 10000;
      case 4468: return 10000;
      case 4469: return 10000;
      case 4470: return 10000;
      case 4471: return 10000;
      case 4472: return 10000;
      case 4473: return 10000;
      case 4474: return 10000;
      case 4475: return 10000;
      case 4476: return 10000;
      case 4477: return 10000;
      case 4478: return 10000;
      case 4479: return 10000;
      case 4480: return 10000;
      case 4481: return 10000;
      case 4482: return 10000;
      case 4483: return 10000;
      case 4484: return 10000;
      case 4485: return 10000;
      case 4486: return 10000;
      case 4487: return 10000;
      case 4488: return 10000;
      case 4489: return 10000;
      case 4490: return 10000;
      case 4491: return 10000;
      case 4492: return 10000;
      case 4493: return 10000;
      case 4494: return 10000;
      case 4495: return 10000;
      case 4496: return 10000;
      case 4497: return 10000;
      case 4498: return 10000;
      case 4499: return 10000;
      case 4500: return 10000;
      case 4501: return 10000;
      case 4502: return 10000;
      case 4503: return 10000;
      case 4504: return 10000;
      case 4505: return 10000;
      case 4506: return 10000;
      case 4507: return 10000;
      case 4508: return 10000;
      case 4509: return 10000;
      case 4510: return 10000;
      case 4511: return 10000;
      case 4512: return 10000;
      case 4513: return 10000;
      case 4514: return 10000;
      case 4515: return 10000;
      case 4516: return 10000;
      case 4517: return 10000;
      case 4518: return 10000;
      case 4519: return 10000;
      case 4520: return 10000;
      case 4521: return 10000;
      case 4522: return 10000;
      case 4523: return 10000;
      case 4524: return 10000;
      case 4525: return 10000;
      case 4526: return 10000;
      case 4527: return 10000;
      case 4528: return 10000;
      case 4529: return 10000;
      case 4530: return 10000;
      case 4531: return 10000;
      case 4532: return 10000;
      case 4533: return 10000;
      case 4534: return 10000;
      case 4535: return 10000;
      case 4536: return 10000;
      case 4537: return 10000;
      case 4538: return 10000;
      case 4539: return 10000;
      case 4540: return 10000;
      case 4541: return 10000;
      case 4542: return 10000;
      case 4543: return 10000;
      case 4544: return 10000;
      case 4545: return 10000;
      case 4546: return 10000;
      case 4547: return 10000;
      case 4548: return 10000;
      case 4549: return 10000;
      case 4550: return 10000;
      case 4551: return 10000;
      case 4552: return 10000;
      case 4553: return 10000;
      case 4554: return 10000;
      case 4555: return 10000;
      case 4556: return 10000;
      case 4557: return 10000;
      case 4558: return 10000;
      case 4559: return 10000;
      case 4560: return 10000;
      case 4561: return 10000;
      case 4562: return 10000;
      case 4563: return 10000;
      case 4564: return 10000;
      case 4565: return 10000;
      case 4566: return 10000;
      case 4567: return 10000;
      case 4568: return 10000;
      case 4569: return 10000;
      case 4570: return 10000;
      case 4571: return 10000;
      case 4572: return 10000;
      case 4573: return 10000;
      case 4574: return 10000;
      case 4575: return 10000;
      case 4576: return 10000;
      case 4577: return 10000;
      case 4578: return 10000;
      case 4579: return 10000;
      case 4580: return 10000;
      case 4581: return 10000;
      case 4582: return 10000;
      case 4583: return 10000;
      case 4584: return 10000;
      case 4585: return 10000;
      case 4586: return 10000;
      case 4587: return 10000;
      case 4588: return 10000;
      case 4589: return 10000;
      case 4590: return 10000;
      case 4591: return 10000;
      case 4592: return 10000;
      case 4593: return 10000;
      case 4594: return 10000;
      case 4595: return 10000;
      case 4596: return 10000;
      case 4597: return 10000;
      case 4598: return 10000;
      case 4599: return 10000;
      case 4600: return 10000;
      case 4601: return 10000;
      case 4602: return 10000;
      case 4603: return 10000;
      case 4604: return 10000;
      case 4605: return 10000;
      case 4606: return 10000;
      case 4607: return 10000;
      case 4608: return 10000;
      case 4609: return 10000;
      case 4610: return 10000;
      case 4611: return 10000;
      case 4612: return 10000;
      case 4613: return 10000;
      case 4614: return 10000;
      case 4615: return 10000;
      case 4616: return 10000;
      case 4617: return 10000;
      case 4618: return 10000;
      case 4619: return 10000;
      case 4620: return 10000;
      case 4621: return 10000;
      case 4622: return 10000;
      case 4623: return 10000;
      case 4624: return 10000;
      case 4625: return 10000;
      case 4626: return 10000;
      case 4627: return 10000;
      case 4628: return 10000;
      case 4629: return 10000;
      case 4630: return 10000;
      case 4631: return 10000;
      case 4632: return 10000;
      case 4633: return 10000;
      case 4634: return 10000;
      case 4635: return 10000;
      case 4636: return 10000;
      case 4637: return 10000;
      case 4638: return 10000;
      case 4639: return 10000;
      case 4640: return 10000;
      case 4641: return 10000;
      case 4642: return 10000;
      case 4643: return 10000;
      case 4644: return 10000;
      case 4645: return 10000;
      case 4646: return 10000;
      case 4647: return 10000;
      case 4648: return 10000;
      case 4649: return 10000;
      case 4650: return 10000;
      case 4651: return 10000;
      case 4652: return 10000;
      case 4653: return 10000;
      case 4654: return 10000;
      case 4655: return 10000;
      case 4656: return 10000;
      case 4657: return 10000;
      case 4658: return 10000;
      case 4659: return 10000;
      case 4660: return 10000;
      case 4661: return 10000;
      case 4662: return 10000;
      case 4663: return 10000;
      case 4664: return 10000;
      case 4665: return 10000;
      case 4666: return 10000;
      case 4667: return 10000;
      case 4668: return 10000;
      case 4669: return 10000;
      case 4670: return 10000;
      case 4671: return 10000;
      case 4672: return 10000;
      case 4673: return 10000;
      case 4674: return 10000;
      case 4675: return 10000;
      case 4676: return 10000;
      case 4677: return 10000;
      case 4678: return 10000;
      case 4679: return 10000;
      case 4680: return 10000;
      case 4681: return 10000;
      case 4682: return 10000;
      case 4683: return 10000;
      case 4684: return 10000;
      case 4685: return 10000;
      case 4686: return 10000;
      case 4687: return 10000;
      case 4688: return 10000;
      case 4689: return 10000;
      case 4690: return 10000;
      case 4691: return 10000;
      case 4692: return 10000;
      case 4693: return 10000;
      case 4694: return 10000;
      case 4695: return 10000;
      case 4696: return 10000;
      case 4697: return 10000;
      case 4698: return 10000;
      case 4699: return 10000;
      case 4700: return 10000;
      case 4701: return 10000;
      case 4702: return 10000;
      case 4703: return 10000;
      case 4704: return 10000;
      case 4705: return 10000;
      case 4706: return 10000;
      case 4707: return 10000;
      case 4708: return 10000;
      case 4709: return 10000;
      case 4710: return 10000;
      case 4711: return 10000;
      case 4712: return 10000;
      case 4713: return 10000;
      case 4714: return 10000;
      case 4715: return 10000;
      case 4716: return 10000;
      case 4717: return 10000;
      case 4718: return 10000;
      case 4719: return 10000;
      case 4720: return 10000;
      case 4721: return 10000;
      case 4722: return 10000;
      case 4723: return 10000;
      case 4724: return 10000;
      case 4725: return 10000;
      case 4726: return 10000;
      case 4727: return 10000;
      case 4728: return 10000;
      case 4729: return 10000;
      case 4730: return 10000;
      case 4731: return 10000;
      case 4732: return 10000;
      case 4733: return 10000;
      case 4734: return 10000;
      case 4735: return 10000;
      case 4736: return 10000;
      case 4737: return 10000;
      case 4738: return 10000;
      case 4739: return 10000;
      case 4740: return 10000;
      case 4741: return 10000;
      case 4742: return 10000;
      case 4743: return 10000;
      case 4744: return 10000;
      case 4745: return 10000;
      case 4746: return 10000;
      case 4747: return 10000;
      case 4748: return 10000;
      case 4749: return 10000;
      case 4750: return 10000;
      case 4751: return 10000;
      case 4752: return 10000;
      case 4753: return 10000;
      case 4754: return 10000;
      case 4755: return 10000;
      case 4756: return 10000;
      case 4757: return 10000;
      case 4758: return 10000;
      case 4759: return 10000;
      case 4760: return 10000;
      case 4761: return 10000;
      case 4762: return 10000;
      case 4763: return 10000;
      case 4764: return 10000;
      case 4765: return 10000;
      case 4766: return 10000;
      case 4767: return 10000;
      case 4768: return 10000;
      case 4769: return 10000;
      case 4770: return 10000;
      case 4771: return 10000;
      case 4772: return 10000;
      case 4773: return 10000;
      case 4774: return 10000;
      case 4775: return 10000;
      case 4776: return 10000;
      case 4777: return 10000;
      case 4778: return 10000;
      case 4779: return 10000;
      case 4780: return 10000;
      case 4781: return 10000;
      case 4782: return 10000;
      case 4783: return 10000;
      case 4784: return 10000;
      case 4785: return 10000;
      case 4786: return 10000;
      case 4787: return 10000;
      case 4788: return 10000;
      case 4789: return 10000;
      case 4790: return 10000;
      case 4791: return 10000;
      case 4792: return 10000;
      case 4793: return 10000;
      case 4794: return 10000;
      case 4795: return 10000;
      case 4796: return 10000;
      case 4797: return 10000;
      case 4798: return 10000;
      case 4799: return 10000;
      case 4800: return 10000;
      case 4801: return 10000;
      case 4802: return 10000;
      case 4803: return 10000;
      case 4804: return 10000;
      case 4805: return 10000;
      case 4806: return 10000;
      case 4807: return 10000;
      case 4808: return 10000;
      case 4809: return 10000;
      case 4810: return 10000;
      case 4811: return 10000;
      case 4812: return 10000;
      case 4813: return 10000;
      case 4814: return 10000;
      case 4815: return 10000;
      case 4816: return 10000;
      case 4817: return 10000;
      case 4818: return 10000;
      case 4819: return 10000;
      case 4820: return 10000;
      case 4821: return 10000;
      case 4822: return 10000;
      case 4823: return 10000;
      case 4824: return 10000;
      case 4825: return 10000;
      case 4826: return 10000;
      case 4827: return 10000;
      case 4828: return 10000;
      case 4829: return 10000;
      case 4830: return 10000;
      case 4831: return 10000;
      case 4832: return 10000;
      case 4833: return 10000;
      case 4834: return 10000;
      case 4835: return 10000;
      case 4836: return 10000;
      case 4837: return 10000;
      case 4838: return 10000;
      case 4839: return 10000;
      case 4840: return 10000;
      case 4841: return 10000;
      case 4842: return 10000;
      case 4843: return 10000;
      case 4844: return 10000;
      case 4845: return 10000;
      case 4846: return 10000;
      case 4847: return 10000;
      case 4848: return 10000;
      case 4849: return 10000;
      case 4850: return 10000;
      case 4851: return 10000;
      case 4852: return 10000;
      case 4853: return 10000;
      case 4854: return 10000;
      case 4855: return 10000;
      case 4856: return 10000;
      case 4857: return 10000;
      case 4858: return 10000;
      case 4859: return 10000;
      case 4860: return 10000;
      case 4861: return 10000;
      case 4862: return 10000;
      case 4863: return 10000;
      case 4864: return 10000;
      case 4865: return 10000;
      case 4866: return 10000;
      case 4867: return 10000;
      case 4868: return 10000;
      case 4869: return 10000;
      case 4870: return 10000;
      case 4871: return 10000;
      case 4872: return 10000;
      case 4873: return 10000;
      case 4874: return 10000;
      case 4875: return 10000;
      case 4876: return 10000;
      case 4877: return 10000;
      case 4878: return 10000;
      case 4879: return 10000;
      case 4880: return 10000;
      case 4881: return 10000;
      case 4882: return 10000;
      case 4883: return 10000;
      case 4884: return 10000;
      case 4885: return 10000;
      case 4886: return 10000;
      case 4887: return 10000;
      case 4888: return 10000;
      case 4889: return 10000;
      case 4890: return 10000;
      case 4891: return 10000;
      case 4892: return 10000;
      case 4893: return 10000;
      case 4894: return 10000;
      case 4895: return 10000;
      case 4896: return 10000;
      case 4897: return 10000;
      case 4898: return 10000;
      case 4899: return 10000;
      case 4900: return 10000;
      case 4901: return 10000;
      case 4902: return 10000;
      case 4903: return 10000;
      case 4904: return 10000;
      case 4905: return 10000;
      case 4906: return 10000;
      case 4907: return 10000;
      case 4908: return 10000;
      case 4909: return 10000;
      case 4910: return 10000;
      case 4911: return 10000;
      case 4912: return 10000;
      case 4913: return 10000;
      case 4914: return 10000;
      case 4915: return 10000;
      case 4916: return 10000;
      case 4917: return 10000;
      case 4918: return 10000;
      case 4919: return 10000;
      case 4920: return 10000;
      case 4921: return 10000;
      case 4922: return 10000;
      case 4923: return 10000;
      case 4924: return 10000;
      case 4925: return 10000;
      case 4926: return 10000;
      case 4927: return 10000;
      case 4928: return 10000;
      case 4929: return 10000;
      case 4930: return 10000;
      case 4931: return 10000;
      case 4932: return 10000;
      case 4933: return 10000;
      case 4934: return 10000;
      case 4935: return 10000;
      case 4936: return 10000;
      case 4937: return 10000;
      case 4938: return 10000;
      case 4939: return 10000;
      case 4940: return 10000;
      case 4941: return 10000;
      case 4942: return 10000;
      case 4943: return 10000;
      case 4944: return 10000;
      case 4945: return 10000;
      case 4946: return 10000;
      case 4947: return 10000;
      case 4948: return 10000;
      case 4949: return 10000;
      case 4950: return 10000;
      case 4951: return 10000;
      case 4952: return 10000;
      case 4953: return 10000;
      case 4954: return 10000;
      case 4955: return 10000;
      case 4956: return 10000;
      case 4957: return 10000;
      case 4958: return 10000;
      case 4959: return 10000;
      case 4960: return 10000;
      case 4961: return 10000;
      case 4962: return 10000;
      case 4963: return 10000;
      case 4964: return 10000;
      case 4965: return 10000;
      case 4966: return 10000;
      case 4967: return 10000;
      case 4968: return 10000;
      case 4969: return 10000;
      case 4970: return 10000;
      case 4971: return 10000;
      case 4972: return 10000;
      case 4973: return 10000;
      case 4974: return 10000;
      case 4975: return 10000;
      case 4976: return 10000;
      case 4977: return 10000;
      case 4978: return 10000;
      case 4979: return 10000;
      case 4980: return 10000;
      case 4981: return 10000;
      case 4982: return 10000;
      case 4983: return 10000;
      case 4984: return 10000;
      case 4985: return 10000;
      case 4986: return 10000;
      case 4987: return 10000;
      case 4988: return 10000;
      case 4989: return 10000;
      case 4990: return 10000;
      case 4991: return 10000;
      case 4992: return 10000;
      case 4993: return 10000;
      case 4994: return 10000;
      case 4995: return 10000;
      case 4996: return 10000;
      case 4997: return 10000;
      case 4998: return 10000;
      case 4999: return 10000;
      case 5000: return 10000;
      case 5001: return 10000;
      case 5002: return 10000;
      case 5003: return 10000;
      case 5004: return 10000;
      case 5005: return 10000;
      case 5006: return 10000;
      case 5007: return 10000;
      case 5008: return 10000;
      case 5009: return 10000;
      case 5010: return 10000;
      case 5011: return 10000;
      case 5012: return 10000;
      case 5013: return 10000;
      case 5014: return 10000;
      case 5015: return 10000;
      case 5016: return 10000;
      case 5017: return 10000;
      case 5018: return 10000;
      case 5019: return 10000;
      case 5020: return 10000;
      case 5021: return 10000;
      case 5022: return 10000;
      case 5023: return 10000;
      case 5024: return 10000;
      case 5025: return 10000;
      case 5026: return 10000;
      case 5027: return 10000;
      case 5028: return 10000;
      case 5029: return 10000;
      case 5030: return 10000;
      case 5031: return 10000;
      case 5032: return 10000;
      case 5033: return 10000;
      case 5034: return 10000;
      case 5035: return 10000;
      case 5036: return 10000;
      case 5037: return 10000;
      case 5038: return 10000;
      case 5039: return 10000;
      case 5040: return 10000;
      case 5041: return 10000;
      case 5042: return 10000;
      case 5043: return 10000;
      case 5044: return 10000;
      case 5045: return 10000;
      case 5046: return 10000;
      case 5047: return 10000;
      case 5048: return 10000;
      case 5049: return 10000;
      case 5050: return 10000;
      case 5051: return 10000;
      case 5052: return 10000;
      case 5053: return 10000;
      case 5054: return 10000;
      case 5055: return 10000;
      case 5056: return 10000;
      case 5057: return 10000;
      case 5058: return 10000;
      case 5059: return 10000;
      case 5060: return 10000;
      case 5061: return 10000;
      case 5062: return 10000;
      case 5063: return 10000;
      case 5064: return 10000;
      case 5065: return 10000;
      case 5066: return 10000;
      case 5067: return 10000;
      case 5068: return 10000;
      case 5069: return 10000;
      case 5070: return 10000;
      case 5071: return 10000;
      case 5072: return 10000;
      case 5073: return 10000;
      case 5074: return 10000;
      case 5075: return 10000;
      case 5076: return 10000;
      case 5077: return 10000;
      case 5078: return 10000;
      case 5079: return 10000;
      case 5080: return 10000;
      case 5081: return 10000;
      case 5082: return 10000;
      case 5083: return 10000;
      case 5084: return 10000;
      case 5085: return 10000;
      case 5086: return 10000;
      case 5087: return 10000;
      case 5088: return 10000;
      case 5089: return 10000;
      case 5090: return 10000;
      case 5091: return 10000;
      case 5092: return 10000;
      case 5093: return 10000;
      case 5094: return 10000;
      case 5095: return 10000;
      case 5096: return 10000;
      case 5097: return 10000;
      case 5098: return 10000;
      case 5099: return 10000;
      case 5100: return 10000;
      case 5101: return 10000;
      case 5102: return 10000;
      case 5103: return 10000;
      case 5104: return 10000;
      case 5105: return 10000;
      case 5106: return 10000;
      case 5107: return 10000;
      case 5108: return 10000;
      case 5109: return 10000;
      case 5110: return 10000;
      case 5111: return 10000;
      case 5112: return 10000;
      case 5113: return 10000;
      case 5114: return 10000;
      case 5115: return 10000;
      case 5116: return 10000;
      case 5117: return 10000;
      case 5118: return 10000;
      case 5119: return 10000;
      case 5120: return 10000;
      case 5121: return 10000;
      case 5122: return 10000;
      case 5123: return 10000;
      case 5124: return 10000;
      case 5125: return 10000;
      case 5126: return 10000;
      case 5127: return 10000;
      case 5128: return 10000;
      case 5129: return 10000;
      case 5130: return 10000;
      case 5131: return 10000;
      case 5132: return 10000;
      case 5133: return 10000;
      case 5134: return 10000;
      case 5135: return 10000;
      case 5136: return 10000;
      case 5137: return 10000;
      case 5138: return 10000;
      case 5139: return 10000;
      case 5140: return 10000;
      case 5141: return 10000;
      case 5142: return 10000;
      case 5143: return 10000;
      case 5144: return 10000;
      case 5145: return 10000;
      case 5146: return 10000;
      case 5147: return 10000;
      case 5148: return 10000;
      case 5149: return 10000;
      case 5150: return 10000;
      case 5151: return 10000;
      case 5152: return 10000;
      case 5153: return 10000;
      case 5154: return 10000;
      case 5155: return 10000;
      case 5156: return 10000;
      case 5157: return 10000;
      case 5158: return 10000;
      case 5159: return 10000;
      case 5160: return 10000;
      case 5161: return 10000;
      case 5162: return 10000;
      case 5163: return 10000;
      case 5164: return 10000;
      case 5165: return 10000;
      case 5166: return 10000;
      case 5167: return 10000;
      case 5168: return 10000;
      case 5169: return 10000;
      case 5170: return 10000;
      case 5171: return 10000;
      case 5172: return 10000;
      case 5173: return 10000;
      case 5174: return 10000;
      case 5175: return 10000;
      case 5176: return 10000;
      case 5177: return 10000;
      case 5178: return 10000;
      case 5179: return 10000;
      case 5180: return 10000;
      case 5181: return 10000;
      case 5182: return 10000;
      case 5183: return 10000;
      case 5184: return 10000;
      case 5185: return 10000;
      case 5186: return 10000;
      case 5187: return 10000;
      case 5188: return 10000;
      case 5189: return 10000;
      case 5190: return 10000;
      case 5191: return 10000;
      case 5192: return 10000;
      case 5193: return 10000;
      case 5194: return 10000;
      case 5195: return 10000;
      case 5196: return 10000;
      case 5197: return 10000;
      case 5198: return 10000;
      case 5199: return 10000;
      case 5200: return 10000;
      case 5201: return 10000;
      case 5202: return 10000;
      case 5203: return 10000;
      case 5204: return 10000;
      case 5205: return 10000;
      case 5206: return 10000;
      case 5207: return 10000;
      case 5208: return 10000;
      case 5209: return 10000;
      case 5210: return 10000;
      case 5211: return 10000;
      case 5212: return 10000;
      case 5213: return 10000;
      case 5214: return 10000;
      case 5215: return 10000;
      case 5216: return 10000;
      case 5217: return 10000;
      case 5218: return 10000;
      case 5219: return 10000;
      case 5220: return 10000;
      case 5221: return 10000;
      case 5222: return 10000;
      case 5223: return 10000;
      case 5224: return 10000;
      case 5225: return 10000;
      case 5226: return 10000;
      case 5227: return 10000;
      case 5228: return 10000;
      case 5229: return 10000;
      case 5230: return 10000;
      case 5231: return 10000;
      case 5232: return 10000;
      case 5233: return 10000;
      case 5234: return 10000;
      case 5235: return 10000;
      case 5236: return 10000;
      case 5237: return 10000;
      case 5238: return 10000;
      case 5239: return 10000;
      case 5240: return 10000;
      case 5241: return 10000;
      case 5242: return 10000;
      case 5243: return 10000;
      case 5244: return 10000;
      case 5245: return 10000;
      case 5246: return 10000;
      case 5247: return 10000;
      case 5248: return 10000;
      case 5249: return 10000;
      case 5250: return 10000;
      case 5251: return 10000;
      case 5252: return 10000;
      case 5253: return 10000;
      case 5254: return 10000;
      case 5255: return 10000;
      case 5256: return 10000;
      case 5257: return 10000;
      case 5258: return 10000;
      case 5259: return 10000;
      case 5260: return 10000;
      case 5261: return 10000;
      case 5262: return 10000;
      case 5263: return 10000;
      case 5264: return 10000;
      case 5265: return 10000;
      case 5266: return 10000;
      case 5267: return 10000;
      case 5268: return 10000;
      case 5269: return 10000;
      case 5270: return 10000;
      case 5271: return 10000;
      case 5272: return 10000;
      case 5273: return 10000;
      case 5274: return 10000;
      case 5275: return 10000;
      case 5276: return 10000;
      case 5277: return 10000;
      case 5278: return 10000;
      case 5279: return 10000;
      case 5280: return 10000;
      case 5281: return 10000;
      case 5282: return 10000;
      case 5283: return 10000;
      case 5284: return 10000;
      case 5285: return 10000;
      case 5286: return 10000;
      case 5287: return 10000;
      case 5288: return 10000;
      case 5289: return 10000;
      case 5290: return 10000;
      case 5291: return 10000;
      case 5292: return 10000;
      case 5293: return 10000;
      case 5294: return 10000;
      case 5295: return 10000;
      case 5296: return 10000;
      case 5297: return 10000;
      case 5298: return 10000;
      case 5299: return 10000;
      case 5300: return 10000;
      case 5301: return 10000;
      case 5302: return 10000;
      case 5303: return 10000;
      case 5304: return 10000;
      case 5305: return 10000;
      case 5306: return 10000;
      case 5307: return 10000;
      case 5308: return 10000;
      case 5309: return 10000;
      case 5310: return 10000;
      case 5311: return 10000;
      case 5312: return 10000;
      case 5313: return 10000;
      case 5314: return 10000;
      case 5315: return 10000;
      case 5316: return 10000;
      case 5317: return 10000;
      case 5318: return 10000;
      case 5319: return 10000;
      case 5320: return 10000;
      case 5321: return 10000;
      case 5322: return 10000;
      case 5323: return 10000;
      case 5324: return 10000;
      case 5325: return 10000;
      case 5326: return 10000;
      case 5327: return 10000;
      case 5328: return 10000;
      case 5329: return 10000;
      case 5330: return 10000;
      case 5331: return 10000;
      case 5332: return 10000;
      case 5333: return 10000;
      case 5334: return 10000;
      case 5335: return 10000;
      case 5336: return 10000;
      case 5337: return 10000;
      case 5338: return 10000;
      case 5339: return 10000;
      case 5340: return 10000;
      case 5341: return 10000;
      case 5342: return 10000;
      case 5343: return 10000;
      case 5344: return 10000;
      case 5345: return 10000;
      case 5346: return 10000;
      case 5347: return 10000;
      case 5348: return 10000;
      case 5349: return 10000;
      case 5350: return 10000;
      case 5351: return 10000;
      case 5352: return 10000;
      case 5353: return 10000;
      case 5354: return 10000;
      case 5355: return 10000;
      case 5356: return 10000;
      case 5357: return 10000;
      case 5358: return 10000;
      case 5359: return 10000;
      case 5360: return 10000;
      case 5361: return 10000;
      case 5362: return 10000;
      case 5363: return 10000;
      case 5364: return 10000;
      case 5365: return 10000;
      case 5366: return 10000;
      case 5367: return 10000;
      case 5368: return 10000;
      case 5369: return 10000;
      case 5370: return 10000;
      case 5371: return 10000;
      case 5372: return 10000;
      case 5373: return 10000;
      case 5374: return 10000;
      case 5375: return 10000;
      case 5376: return 10000;
      case 5377: return 10000;
      case 5378: return 10000;
      case 5379: return 10000;
      case 5380: return 10000;
      case 5381: return 10000;
      case 5382: return 10000;
      case 5383: return 10000;
      case 5384: return 10000;
      case 5385: return 10000;
      case 5386: return 10000;
      case 5387: return 10000;
      case 5388: return 10000;
      case 5389: return 10000;
      case 5390: return 10000;
      case 5391: return 10000;
      case 5392: return 10000;
      case 5393: return 10000;
      case 5394: return 10000;
      case 5395: return 10000;
      case 5396: return 10000;
      case 5397: return 10000;
      case 5398: return 10000;
      case 5399: return 10000;
      case 5400: return 10000;
      case 5401: return 10000;
      case 5402: return 10000;
      case 5403: return 10000;
      case 5404: return 10000;
      case 5405: return 10000;
      case 5406: return 10000;
      case 5407: return 10000;
      case 5408: return 10000;
      case 5409: return 10000;
      case 5410: return 10000;
      case 5411: return 10000;
      case 5412: return 10000;
      case 5413: return 10000;
      case 5414: return 10000;
      case 5415: return 10000;
      case 5416: return 10000;
      case 5417: return 10000;
      case 5418: return 10000;
      case 5419: return 10000;
      case 5420: return 10000;
      case 5421: return 10000;
      case 5422: return 10000;
      case 5423: return 10000;
      case 5424: return 10000;
      case 5425: return 10000;
      case 5426: return 10000;
      case 5427: return 10000;
      case 5428: return 10000;
      case 5429: return 10000;
      case 5430: return 10000;
      case 5431: return 10000;
      case 5432: return 10000;
      case 5433: return 10000;
      case 5434: return 10000;
      case 5435: return 10000;
      case 5436: return 10000;
      case 5437: return 10000;
      case 5438: return 10000;
      case 5439: return 10000;
      case 5440: return 10000;
      case 5441: return 10000;
      case 5442: return 10000;
      case 5443: return 10000;
      case 5444: return 10000;
      case 5445: return 10000;
      case 5446: return 10000;
      case 5447: return 10000;
      case 5448: return 10000;
      case 5449: return 10000;
      case 5450: return 10000;
      case 5451: return 10000;
      case 5452: return 10000;
      case 5453: return 10000;
      case 5454: return 10000;
      case 5455: return 10000;
      case 5456: return 10000;
      case 5457: return 10000;
      case 5458: return 10000;
      case 5459: return 10000;
      case 5460: return 10000;
      case 5461: return 10000;
      case 5462: return 10000;
      case 5463: return 10000;
      case 5464: return 10000;
      case 5465: return 10000;
      case 5466: return 10000;
      case 5467: return 10000;
      case 5468: return 10000;
      case 5469: return 10000;
      case 5470: return 10000;
      case 5471: return 10000;
      case 5472: return 10000;
      case 5473: return 10000;
      case 5474: return 10000;
      case 5475: return 10000;
      case 5476: return 10000;
      case 5477: return 10000;
      case 5478: return 10000;
      case 5479: return 10000;
      case 5480: return 10000;
      case 5481: return 10000;
      case 5482: return 10000;
      case 5483: return 10000;
      case 5484: return 10000;
      case 5485: return 10000;
      case 5486: return 10000;
      case 5487: return 10000;
      case 5488: return 10000;
      case 5489: return 10000;
      case 5490: return 10000;
      case 5491: return 10000;
      case 5492: return 10000;
      case 5493: return 10000;
      case 5494: return 10000;
      case 5495: return 10000;
      case 5496: return 10000;
      case 5497: return 10000;
      case 5498: return 10000;
      case 5499: return 10000;
      case 5500: return 10000;
      case 5501: return 10000;
      case 5502: return 10000;
      case 5503: return 10000;
      case 5504: return 10000;
      case 5505: return 10000;
      case 5506: return 10000;
      case 5507: return 10000;
      case 5508: return 10000;
      case 5509: return 10000;
      case 5510: return 10000;
      case 5511: return 10000;
      case 5512: return 10000;
      case 5513: return 10000;
      case 5514: return 10000;
      case 5515: return 10000;
      case 5516: return 10000;
      case 5517: return 10000;
      case 5518: return 10000;
      case 5519: return 10000;
      case 5520: return 10000;
      case 5521: return 10000;
      case 5522: return 10000;
      case 5523: return 10000;
      case 5524: return 10000;
      case 5525: return 10000;
      case 5526: return 10000;
      case 5527: return 10000;
      case 5528: return 10000;
      case 5529: return 10000;
      case 5530: return 10000;
      case 5531: return 10000;
      case 5532: return 10000;
      case 5533: return 10000;
      case 5534: return 10000;
      case 5535: return 10000;
      case 5536: return 10000;
      case 5537: return 10000;
      case 5538: return 10000;
      case 5539: return 10000;
      case 5540: return 10000;
      case 5541: return 10000;
      case 5542: return 10000;
      case 5543: return 10000;
      case 5544: return 10000;
      case 5545: return 10000;
      case 5546: return 10000;
      case 5547: return 10000;
      case 5548: return 10000;
      case 5549: return 10000;
      case 5550: return 10000;
      case 5551: return 10000;
      case 5552: return 10000;
      case 5553: return 10000;
      case 5554: return 10000;
      case 5555: return 10000;
      case 5556: return 10000;
      case 5557: return 10000;
      case 5558: return 10000;
      case 5559: return 10000;
      case 5560: return 10000;
      case 5561: return 10000;
      case 5562: return 10000;
      case 5563: return 10000;
      case 5564: return 10000;
      case 5565: return 10000;
      case 5566: return 10000;
      case 5567: return 10000;
      case 5568: return 10000;
      case 5569: return 10000;
      case 5570: return 10000;
      case 5571: return 10000;
      case 5572: return 10000;
      case 5573: return 10000;
      case 5574: return 10000;
      case 5575: return 10000;
      case 5576: return 10000;
      case 5577: return 10000;
      case 5578: return 10000;
      case 5579: return 10000;
      case 5580: return 10000;
      case 5581: return 10000;
      case 5582: return 10000;
      case 5583: return 10000;
      case 5584: return 10000;
      case 5585: return 10000;
      case 5586: return 10000;
      case 5587: return 10000;
      case 5588: return 10000;
      case 5589: return 10000;
      case 5590: return 10000;
      case 5591: return 10000;
      case 5592: return 10000;
      case 5593: return 10000;
      case 5594: return 10000;
      case 5595: return 10000;
      case 5596: return 10000;
      case 5597: return 10000;
      case 5598: return 10000;
      case 5599: return 10000;
      case 5600: return 10000;
      case 5601: return 10000;
      case 5602: return 10000;
      case 5603: return 10000;
      case 5604: return 10000;
      case 5605: return 10000;
      case 5606: return 10000;
      case 5607: return 10000;
      case 5608: return 10000;
      case 5609: return 10000;
      case 5610: return 10000;
      case 5611: return 10000;
      case 5612: return 10000;
      case 5613: return 10000;
      case 5614: return 10000;
      case 5615: return 10000;
      case 5616: return 10000;
      case 5617: return 10000;
      case 5618: return 10000;
      case 5619: return 10000;
      case 5620: return 10000;
      case 5621: return 10000;
      case 5622: return 10000;
      case 5623: return 10000;
      case 5624: return 10000;
      case 5625: return 10000;
      case 5626: return 10000;
      case 5627: return 10000;
      case 5628: return 10000;
      case 5629: return 10000;
      case 5630: return 10000;
      case 5631: return 10000;
      case 5632: return 10000;
      case 5633: return 10000;
      case 5634: return 10000;
      case 5635: return 10000;
      case 5636: return 10000;
      case 5637: return 10000;
      case 5638: return 10000;
      case 5639: return 10000;
      case 5640: return 10000;
      case 5641: return 10000;
      case 5642: return 10000;
      case 5643: return 10000;
      case 5644: return 10000;
      case 5645: return 10000;
      case 5646: return 10000;
      case 5647: return 10000;
      case 5648: return 10000;
      case 5649: return 10000;
      case 5650: return 10000;
      case 5651: return 10000;
      case 5652: return 10000;
      case 5653: return 10000;
      case 5654: return 10000;
      case 5655: return 10000;
      case 5656: return 10000;
      case 5657: return 10000;
      case 5658: return 10000;
      case 5659: return 10000;
      case 5660: return 10000;
      case 5661: return 10000;
      case 5662: return 10000;
      case 5663: return 10000;
      case 5664: return 10000;
      case 5665: return 10000;
      case 5666: return 10000;
      case 5667: return 10000;
      case 5668: return 10000;
      case 5669: return 10000;
      case 5670: return 10000;
      case 5671: return 10000;
      case 5672: return 10000;
      case 5673: return 10000;
      case 5674: return 10000;
      case 5675: return 10000;
      case 5676: return 10000;
      case 5677: return 10000;
      case 5678: return 10000;
      case 5679: return 10000;
      case 5680: return 10000;
      case 5681: return 10000;
      case 5682: return 10000;
      case 5683: return 10000;
      case 5684: return 10000;
      case 5685: return 10000;
      case 5686: return 10000;
      case 5687: return 10000;
      case 5688: return 10000;
      case 5689: return 10000;
      case 5690: return 10000;
      case 5691: return 10000;
      case 5692: return 10000;
      case 5693: return 10000;
      case 5694: return 10000;
      case 5695: return 10000;
      case 5696: return 10000;
      case 5697: return 10000;
      case 5698: return 10000;
      case 5699: return 10000;
      case 5700: return 10000;
      case 5701: return 10000;
      case 5702: return 10000;
      case 5703: return 10000;
      case 5704: return 10000;
      case 5705: return 10000;
      case 5706: return 10000;
      case 5707: return 10000;
      case 5708: return 10000;
      case 5709: return 10000;
      case 5710: return 10000;
      case 5711: return 10000;
      case 5712: return 10000;
      case 5713: return 10000;
      case 5714: return 10000;
      case 5715: return 10000;
      case 5716: return 10000;
      case 5717: return 10000;
      case 5718: return 10000;
      case 5719: return 10000;
      case 5720: return 10000;
      case 5721: return 10000;
      case 5722: return 10000;
      case 5723: return 10000;
      case 5724: return 10000;
      case 5725: return 10000;
      case 5726: return 10000;
      case 5727: return 10000;
      case 5728: return 10000;
      case 5729: return 10000;
      case 5730: return 10000;
      case 5731: return 10000;
      case 5732: return 10000;
      case 5733: return 10000;
      case 5734: return 10000;
      case 5735: return 10000;
      case 5736: return 10000;
      case 5737: return 10000;
      case 5738: return 10000;
      case 5739: return 10000;
      case 5740: return 10000;
      case 5741: return 10000;
      case 5742: return 10000;
      case 5743: return 10000;
      case 5744: return 10000;
      case 5745: return 10000;
      case 5746: return 10000;
      case 5747: return 10000;
      case 5748: return 10000;
      case 5749: return 10000;
      case 5750: return 10000;
      case 5751: return 10000;
      case 5752: return 10000;
      case 5753: return 10000;
      case 5754: return 10000;
      case 5755: return 10000;
      case 5756: return 10000;
      case 5757: return 10000;
      case 5758: return 10000;
      case 5759: return 10000;
      case 5760: return 10000;
      case 5761: return 10000;
      case 5762: return 10000;
      case 5763: return 10000;
      case 5764: return 10000;
      case 5765: return 10000;
      case 5766: return 10000;
      case 5767: return 10000;
      case 5768: return 10000;
      case 5769: return 10000;
      case 5770: return 10000;
      case 5771: return 10000;
      case 5772: return 10000;
      case 5773: return 10000;
      case 5774: return 10000;
      case 5775: return 10000;
      case 5776: return 6;
      case 5777: return 6;
      case 5778: return 0;
      case 5779: return 6;
      case 5780: return 6;
      case 5781: return 6;
      case 5782: return 6;
      case 5783: return 6;
      case 5784: return 6;
      case 5785: return 6;
      case 5786: return 6;
      case 5787: return 6;
      case 5788: return 6;
      case 5789: return 6;
      case 5790: return 6;
      case 5791: return 1;
      case 5792: return 6;
      case 5793: return 6;
      case 5794: return 0;
      case 5795: return 6;
      case 5796: return 6;
      case 5797: return 1;
      case 5798: return 6;
      case 5799: return 6;
      case 5800: return 0;
      case 5801: return 6;
      case 5802: return 6;
      case 5803: return 0;
      case 5804: return 6;
      case 5805: return 6;
      case 5806: return 0;
      case 5807: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "init_array") {
      switch(AccessId) {
      case 0: return 2;
      case 1: return 2;
      case 2: return 2;
      case 3: return 2;
      case 4: return 2;
      case 5: return 2;
      case 6: return 2;
      case 7: return 2;
      case 8: return 2;
      case 9: return 2;
      case 10: return 2;
      case 11: return 2;
      case 12: return 2;
      case 13: return 2;
      case 14: return 2;
      case 15: return 2;
      case 16: return 2;
      case 17: return 2;
      case 18: return 2;
      case 19: return 2;
      case 20: return 2;
      case 21: return 2;
      case 22: return 2;
      case 23: return 2;
      case 24: return 2;
      case 25: return 2;
      case 26: return 2;
      case 27: return 2;
      case 28: return 2;
      case 29: return 2;
      case 30: return 2;
      case 31: return 2;
      case 32: return 2;
      case 33: return 2;
      case 34: return 2;
      case 35: return 2;
      case 36: return 2;
      case 37: return 2;
      case 38: return 2;
      case 39: return 2;
      case 40: return 2;
      case 41: return 2;
      case 42: return 2;
      case 43: return 2;
      case 44: return 2;
      case 45: return 2;
      case 46: return 2;
      case 47: return 2;
      case 48: return 2;
      case 49: return 2;
      case 50: return 2;
      case 51: return 2;
      case 52: return 2;
      case 53: return 2;
      case 54: return 2;
      case 55: return 2;
      case 56: return 2;
      case 57: return 2;
      case 58: return 2;
      case 59: return 2;
      case 60: return 2;
      case 61: return 2;
      case 62: return 2;
      case 63: return 2;
      case 64: return 2;
      case 65: return 2;
      case 66: return 2;
      case 67: return 2;
      case 68: return 2;
      case 69: return 2;
      case 70: return 2;
      case 71: return 2;
      case 72: return 2;
      case 73: return 2;
      case 74: return 2;
      case 75: return 2;
      case 76: return 2;
      case 77: return 2;
      case 78: return 2;
      case 79: return 2;
      case 80: return 2;
      case 81: return 2;
      case 82: return 2;
      case 83: return 2;
      case 84: return 2;
      case 85: return 2;
      case 86: return 2;
      case 87: return 2;
      case 88: return 2;
      case 89: return 2;
      case 90: return 2;
      case 91: return 2;
      case 92: return 2;
      case 93: return 2;
      case 94: return 2;
      case 95: return 2;
      case 96: return 2;
      case 97: return 2;
      case 98: return 2;
      case 99: return 2;
      case 100: return 2;
      case 101: return 2;
      case 102: return 2;
      case 103: return 2;
      case 104: return 2;
      case 105: return 2;
      case 106: return 2;
      case 107: return 2;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Polybench/medley/floyd-warshall/floyd-warshall.c") {
    if (FunctionName == "polybench_timer_start") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_stop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_timer_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "polybench_alloc_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 262144;
      case 7: return 262144;
      case 8: return 262144;
      case 9: return 262144;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 536870912;
      case 18: return 536870912;
      case 19: return 536870912;
      case 20: return 536870912;
      case 21: return 536870912;
      case 22: return 536870912;
      case 23: return 536870912;
      case 24: return 536870912;
      case 25: return 262144;
      case 26: return 262144;
      case 27: return 262144;
      case 28: return 262144;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 536870912;
      case 37: return 536870912;
      case 38: return 536870912;
      case 39: return 536870912;
      case 40: return 536870912;
      case 41: return 536870912;
      case 42: return 536870912;
      case 43: return 536870912;
      case 44: return 524288;
      case 45: return 524288;
      case 46: return 0;
      case 47: return 524288;
      case 48: return 524288;
      case 49: return 1;
      case 50: return 1048576;
      case 51: return 1048576;
      case 52: return 1048576;
      case 53: return 1048576;
      case 54: return 1048576;
      case 55: return 1048576;
      case 56: return 1048576;
      case 57: return 1048576;
      case 58: return 1048576;
      case 59: return 1048576;
      case 60: return 1048576;
      case 61: return 1048576;
      case 62: return 1048576;
      case 63: return 1048576;
      case 64: return 1048576;
      case 65: return 1048576;
      case 66: return 1048576;
      case 67: return 1024;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Adobe-C++/stepanov_vector.cpp") {
    if (FunctionName == "_Z13record_resultdPKc") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z9summarizePKciiii") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z17summarize_simplefP8_IO_FILEPKc") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z11start_timerv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z5timerv") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 62;
      case 9: return 62;
      case 10: return 62;
      case 11: return 62;
      case 12: return 62;
      case 13: return 62;
      case 14: return 62;
      case 15: return 62;
      case 16: return 62;
      case 17: return 62;
      case 18: return 62;
      case 19: return 62;
      case 20: return 62;
      case 21: return 62;
      case 22: return 62;
      case 23: return 62;
      case 24: return 4;
      case 25: return 4;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 62;
      case 32: return 62;
      case 33: return 62;
      case 34: return 62;
      case 35: return 62;
      case 36: return 62;
      case 37: return 62;
      case 38: return 62;
      case 39: return 62;
      case 40: return 62;
      case 41: return 62;
      case 42: return 62;
      case 43: return 62;
      case 44: return 62;
      case 45: return 62;
      case 46: return 62;
      case 47: return 4;
      case 48: return 4;
      case 49: return 0;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 15000000;
      case 58: return 15000000;
      case 59: return 15000000;
      case 60: return 15000000;
      case 61: return 15000000;
      case 62: return 15000000;
      case 63: return 15000000;
      case 64: return 15000000;
      case 65: return 60000;
      case 66: return 0;
      case 67: return 0;
      case 68: return 1;
      case 69: return 1;
      case 70: return 0;
      case 71: return 0;
      case 72: return 0;
      case 73: return 0;
      case 74: return 15000000;
      case 75: return 15000000;
      case 76: return 15000000;
      case 77: return 15000000;
      case 78: return 15000000;
      case 79: return 15000000;
      case 80: return 15000000;
      case 81: return 15000000;
      case 82: return 60000;
      case 83: return 0;
      case 84: return 0;
      case 85: return 1;
      case 86: return 1;
      case 87: return 0;
      case 88: return 0;
      case 89: return 0;
      case 90: return 0;
      case 91: return 15000000;
      case 92: return 15000000;
      case 93: return 15000000;
      case 94: return 15000000;
      case 95: return 15000000;
      case 96: return 15000000;
      case 97: return 15000000;
      case 98: return 15000000;
      case 99: return 60000;
      case 100: return 0;
      case 101: return 0;
      case 102: return 1;
      case 103: return 1;
      case 104: return 0;
      case 105: return 0;
      case 106: return 0;
      case 107: return 0;
      case 108: return 15000000;
      case 109: return 15000000;
      case 110: return 15000000;
      case 111: return 15000000;
      case 112: return 15000000;
      case 113: return 15000000;
      case 114: return 15000000;
      case 115: return 15000000;
      case 116: return 60000;
      case 117: return 0;
      case 118: return 0;
      case 119: return 0;
      case 120: return 0;
      case 121: return 0;
      case 122: return 0;
      case 123: return 15000000;
      case 124: return 15000000;
      case 125: return 15000000;
      case 126: return 15000000;
      case 127: return 15000000;
      case 128: return 15000000;
      case 129: return 15000000;
      case 130: return 15000000;
      case 131: return 60000;
      case 132: return 0;
      case 133: return 0;
      case 134: return 1;
      case 135: return 1;
      case 136: return 0;
      case 137: return 0;
      case 138: return 0;
      case 139: return 0;
      case 140: return 15000000;
      case 141: return 15000000;
      case 142: return 15000000;
      case 143: return 15000000;
      case 144: return 15000000;
      case 145: return 15000000;
      case 146: return 15000000;
      case 147: return 15000000;
      case 148: return 60000;
      case 149: return 0;
      case 150: return 0;
      case 151: return 0;
      case 152: return 0;
      case 153: return 0;
      case 154: return 0;
      case 155: return 15000000;
      case 156: return 15000000;
      case 157: return 15000000;
      case 158: return 15000000;
      case 159: return 15000000;
      case 160: return 15000000;
      case 161: return 15000000;
      case 162: return 15000000;
      case 163: return 60000;
      case 164: return 0;
      case 165: return 0;
      case 166: return 0;
      case 167: return 0;
      case 168: return 0;
      case 169: return 0;
      case 170: return 15000000;
      case 171: return 15000000;
      case 172: return 15000000;
      case 173: return 15000000;
      case 174: return 15000000;
      case 175: return 15000000;
      case 176: return 15000000;
      case 177: return 15000000;
      case 178: return 60000;
      case 179: return 0;
      case 180: return 0;
      case 181: return 1;
      case 182: return 1;
      case 183: return 1;
      case 184: return 1;
      case 185: return 0;
      case 186: return 2000;
      case 187: return 1;
      case 188: return 1;
      case 189: return 1;
      case 190: return 125;
      case 191: return 125;
      case 192: return 125;
      case 193: return 125;
      case 194: return 125;
      case 195: return 125;
      case 196: return 125;
      case 197: return 125;
      case 198: return 125;
      case 199: return 125;
      case 200: return 125;
      case 201: return 125;
      case 202: return 125;
      case 203: return 125;
      case 204: return 125;
      case 205: return 125;
      case 206: return 0;
      case 207: return 0;
      case 208: return 0;
      case 209: return 0;
      case 210: return 0;
      case 211: return 0;
      case 212: return 0;
      case 213: return 0;
      case 214: return 0;
      case 215: return 0;
      case 216: return 0;
      case 217: return 0;
      case 218: return 0;
      case 219: return 0;
      case 220: return 0;
      case 221: return 0;
      case 222: return 0;
      case 223: return 0;
      case 224: return 0;
      case 225: return 0;
      case 226: return 0;
      case 227: return 0;
      case 228: return 1;
      case 229: return 1;
      case 230: return 1;
      case 231: return 1;
      case 232: return 1;
      case 233: return 1;
      case 234: return 1;
      case 235: return 1;
      case 236: return 1;
      case 237: return 1;
      case 238: return 1;
      case 239: return 1;
      case 240: return 0;
      case 241: return 0;
      case 242: return 0;
      case 243: return 0;
      case 244: return 0;
      case 245: return 0;
      case 246: return 0;
      case 247: return 0;
      case 248: return 0;
      case 249: return 0;
      case 250: return 0;
      case 251: return 0;
      case 252: return 0;
      case 253: return 0;
      case 254: return 0;
      case 255: return 15000;
      case 256: return 15000;
      case 257: return 15000;
      case 258: return 15000;
      case 259: return 15000;
      case 260: return 15000;
      case 261: return 15000;
      case 262: return 15000;
      case 263: return 15000;
      case 264: return 15000;
      case 265: return 15000;
      case 266: return 15000;
      case 267: return 15000;
      case 268: return 15000;
      case 269: return 15000;
      case 270: return 15000;
      case 271: return 60;
      case 272: return 60;
      case 273: return 60;
      case 274: return 60;
      case 275: return 59940;
      case 276: return 30541080;
      case 277: return 30481500;
      case 278: return 59940;
      case 279: return 59940;
      case 280: return 119940;
      case 281: return 119940;
      case 282: return 0;
      case 283: return 0;
      case 284: return 1;
      case 285: return 1;
      case 286: return 1;
      case 287: return 1;
      case 288: return 0;
      case 289: return 0;
      case 290: return 0;
      case 291: return 0;
      case 292: return 0;
      case 293: return 0;
      case 294: return 0;
      case 295: return 0;
      case 296: return 0;
      case 297: return 0;
      case 298: return 0;
      case 299: return 0;
      case 300: return 0;
      case 301: return 0;
      case 302: return 0;
      case 303: return 15000;
      case 304: return 15000;
      case 305: return 15000;
      case 306: return 15000;
      case 307: return 15000;
      case 308: return 15000;
      case 309: return 15000;
      case 310: return 15000;
      case 311: return 15000;
      case 312: return 15000;
      case 313: return 15000;
      case 314: return 15000;
      case 315: return 15000;
      case 316: return 15000;
      case 317: return 15000;
      case 318: return 15000;
      case 319: return 60;
      case 320: return 60;
      case 321: return 60;
      case 322: return 60;
      case 323: return 59940;
      case 324: return 30541080;
      case 325: return 30481500;
      case 326: return 59940;
      case 327: return 59940;
      case 328: return 119940;
      case 329: return 119940;
      case 330: return 0;
      case 331: return 0;
      case 332: return 0;
      case 333: return 0;
      case 334: return 0;
      case 335: return 0;
      case 336: return 0;
      case 337: return 0;
      case 338: return 0;
      case 339: return 0;
      case 340: return 0;
      case 341: return 0;
      case 342: return 0;
      case 343: return 0;
      case 344: return 0;
      case 345: return 0;
      case 346: return 0;
      case 347: return 15000;
      case 348: return 15000;
      case 349: return 15000;
      case 350: return 15000;
      case 351: return 15000;
      case 352: return 15000;
      case 353: return 15000;
      case 354: return 15000;
      case 355: return 15000;
      case 356: return 15000;
      case 357: return 15000;
      case 358: return 15000;
      case 359: return 15000;
      case 360: return 15000;
      case 361: return 15000;
      case 362: return 15000;
      case 363: return 60;
      case 364: return 60;
      case 365: return 60;
      case 366: return 60;
      case 367: return 59940;
      case 368: return 30541080;
      case 369: return 30481500;
      case 370: return 59940;
      case 371: return 59940;
      case 372: return 119940;
      case 373: return 119940;
      case 374: return 0;
      case 375: return 0;
      case 376: return 1;
      case 377: return 1;
      case 378: return 1;
      case 379: return 1;
      case 380: return 0;
      case 381: return 0;
      case 382: return 0;
      case 383: return 0;
      case 384: return 0;
      case 385: return 0;
      case 386: return 0;
      case 387: return 0;
      case 388: return 0;
      case 389: return 0;
      case 390: return 0;
      case 391: return 0;
      case 392: return 0;
      case 393: return 0;
      case 394: return 0;
      case 395: return 15000;
      case 396: return 15000;
      case 397: return 15000;
      case 398: return 15000;
      case 399: return 15000;
      case 400: return 15000;
      case 401: return 15000;
      case 402: return 15000;
      case 403: return 15000;
      case 404: return 15000;
      case 405: return 15000;
      case 406: return 15000;
      case 407: return 15000;
      case 408: return 15000;
      case 409: return 15000;
      case 410: return 15000;
      case 411: return 60;
      case 412: return 60;
      case 413: return 0;
      case 414: return 60;
      case 415: return 59940;
      case 416: return 30203640;
      case 417: return 30143940;
      case 418: return 59940;
      case 419: return 59940;
      case 420: return 119940;
      case 421: return 119940;
      case 422: return 0;
      case 423: return 0;
      case 424: return 0;
      case 425: return 0;
      case 426: return 0;
      case 427: return 0;
      case 428: return 0;
      case 429: return 0;
      case 430: return 0;
      case 431: return 0;
      case 432: return 0;
      case 433: return 0;
      case 434: return 0;
      case 435: return 0;
      case 436: return 0;
      case 437: return 0;
      case 438: return 0;
      case 439: return 15000;
      case 440: return 15000;
      case 441: return 15000;
      case 442: return 15000;
      case 443: return 15000;
      case 444: return 15000;
      case 445: return 15000;
      case 446: return 15000;
      case 447: return 15000;
      case 448: return 15000;
      case 449: return 15000;
      case 450: return 15000;
      case 451: return 15000;
      case 452: return 15000;
      case 453: return 15000;
      case 454: return 15000;
      case 455: return 60;
      case 456: return 60;
      case 457: return 0;
      case 458: return 60;
      case 459: return 59940;
      case 460: return 30203640;
      case 461: return 30143940;
      case 462: return 59940;
      case 463: return 59940;
      case 464: return 119940;
      case 465: return 119940;
      case 466: return 0;
      case 467: return 0;
      case 468: return 0;
      case 469: return 0;
      case 470: return 0;
      case 471: return 0;
      case 472: return 0;
      case 473: return 0;
      case 474: return 0;
      case 475: return 0;
      case 476: return 0;
      case 477: return 0;
      case 478: return 0;
      case 479: return 0;
      case 480: return 0;
      case 481: return 0;
      case 482: return 0;
      case 483: return 15000;
      case 484: return 15000;
      case 485: return 15000;
      case 486: return 15000;
      case 487: return 15000;
      case 488: return 15000;
      case 489: return 15000;
      case 490: return 15000;
      case 491: return 15000;
      case 492: return 15000;
      case 493: return 15000;
      case 494: return 15000;
      case 495: return 15000;
      case 496: return 15000;
      case 497: return 15000;
      case 498: return 15000;
      case 499: return 60;
      case 500: return 60;
      case 501: return 0;
      case 502: return 60;
      case 503: return 59940;
      case 504: return 30203640;
      case 505: return 30143940;
      case 506: return 59940;
      case 507: return 59940;
      case 508: return 119940;
      case 509: return 119940;
      case 510: return 0;
      case 511: return 0;
      case 512: return 1;
      case 513: return 1;
      case 514: return 1;
      case 515: return 1;
      case 516: return 1;
      case 517: return 1;
      case 518: return 1;
      case 519: return 1;
      case 520: return 1;
      case 521: return 1;
      case 522: return 1;
      case 523: return 1;
      case 524: return 1;
      case 525: return 1;
      case 526: return 0;
      case 527: return 0;
      case 528: return 0;
      case 529: return 0;
      case 530: return 0;
      case 531: return 0;
      case 532: return 0;
      case 533: return 0;
      case 534: return 120000;
      case 535: return 120000;
      case 536: return 120000;
      case 537: return 120000;
      case 538: return 120000;
      case 539: return 120000;
      case 540: return 120000;
      case 541: return 120000;
      case 542: return 120000;
      case 543: return 120000;
      case 544: return 120000;
      case 545: return 120000;
      case 546: return 120000;
      case 547: return 120000;
      case 548: return 120000;
      case 549: return 120000;
      case 550: return 480;
      case 551: return 480;
      case 552: return 959520;
      case 553: return 959520;
      case 554: return 0;
      case 555: return 480;
      case 556: return 1;
      case 557: return 1;
      case 558: return 1;
      case 559: return 1;
      case 560: return 0;
      case 561: return 0;
      case 562: return 0;
      case 563: return 0;
      case 564: return 0;
      case 565: return 0;
      case 566: return 0;
      case 567: return 0;
      case 568: return 120000;
      case 569: return 120000;
      case 570: return 120000;
      case 571: return 120000;
      case 572: return 120000;
      case 573: return 120000;
      case 574: return 120000;
      case 575: return 120000;
      case 576: return 120000;
      case 577: return 120000;
      case 578: return 120000;
      case 579: return 120000;
      case 580: return 120000;
      case 581: return 120000;
      case 582: return 120000;
      case 583: return 120000;
      case 584: return 480;
      case 585: return 480;
      case 586: return 959520;
      case 587: return 959520;
      case 588: return 0;
      case 589: return 480;
      case 590: return 0;
      case 591: return 0;
      case 592: return 0;
      case 593: return 0;
      case 594: return 0;
      case 595: return 0;
      case 596: return 0;
      case 597: return 0;
      case 598: return 120000;
      case 599: return 120000;
      case 600: return 120000;
      case 601: return 120000;
      case 602: return 120000;
      case 603: return 120000;
      case 604: return 120000;
      case 605: return 120000;
      case 606: return 120000;
      case 607: return 120000;
      case 608: return 120000;
      case 609: return 120000;
      case 610: return 120000;
      case 611: return 120000;
      case 612: return 120000;
      case 613: return 120000;
      case 614: return 480;
      case 615: return 480;
      case 616: return 959520;
      case 617: return 959520;
      case 618: return 0;
      case 619: return 480;
      case 620: return 1;
      case 621: return 1;
      case 622: return 1;
      case 623: return 1;
      case 624: return 0;
      case 625: return 0;
      case 626: return 0;
      case 627: return 0;
      case 628: return 0;
      case 629: return 0;
      case 630: return 0;
      case 631: return 0;
      case 632: return 120000;
      case 633: return 120000;
      case 634: return 120000;
      case 635: return 120000;
      case 636: return 120000;
      case 637: return 120000;
      case 638: return 120000;
      case 639: return 120000;
      case 640: return 120000;
      case 641: return 120000;
      case 642: return 120000;
      case 643: return 120000;
      case 644: return 120000;
      case 645: return 120000;
      case 646: return 120000;
      case 647: return 120000;
      case 648: return 480;
      case 649: return 480;
      case 650: return 959520;
      case 651: return 959520;
      case 652: return 0;
      case 653: return 480;
      case 654: return 0;
      case 655: return 0;
      case 656: return 0;
      case 657: return 0;
      case 658: return 0;
      case 659: return 0;
      case 660: return 0;
      case 661: return 0;
      case 662: return 120000;
      case 663: return 120000;
      case 664: return 120000;
      case 665: return 120000;
      case 666: return 120000;
      case 667: return 120000;
      case 668: return 120000;
      case 669: return 120000;
      case 670: return 120000;
      case 671: return 120000;
      case 672: return 120000;
      case 673: return 120000;
      case 674: return 120000;
      case 675: return 120000;
      case 676: return 120000;
      case 677: return 120000;
      case 678: return 480;
      case 679: return 480;
      case 680: return 959520;
      case 681: return 959520;
      case 682: return 0;
      case 683: return 480;
      case 684: return 0;
      case 685: return 0;
      case 686: return 0;
      case 687: return 0;
      case 688: return 0;
      case 689: return 0;
      case 690: return 0;
      case 691: return 0;
      case 692: return 120000;
      case 693: return 120000;
      case 694: return 120000;
      case 695: return 120000;
      case 696: return 120000;
      case 697: return 120000;
      case 698: return 120000;
      case 699: return 120000;
      case 700: return 120000;
      case 701: return 120000;
      case 702: return 120000;
      case 703: return 120000;
      case 704: return 120000;
      case 705: return 120000;
      case 706: return 120000;
      case 707: return 120000;
      case 708: return 480;
      case 709: return 480;
      case 710: return 959520;
      case 711: return 959520;
      case 712: return 0;
      case 713: return 480;
      case 714: return 1;
      case 715: return 1;
      case 716: return 1;
      case 717: return 1;
      case 718: return 1;
      case 719: return 1;
      case 720: return 1;
      case 721: return 1;
      case 722: return 1;
      case 723: return 1;
      case 724: return 1;
      case 725: return 1;
      case 726: return 1;
      case 727: return 0;
      case 728: return 0;
      case 729: return 0;
      case 730: return 0;
      case 731: return 0;
      case 732: return 0;
      case 733: return 0;
      case 734: return 0;
      case 735: return 120000;
      case 736: return 120000;
      case 737: return 120000;
      case 738: return 120000;
      case 739: return 120000;
      case 740: return 120000;
      case 741: return 120000;
      case 742: return 120000;
      case 743: return 120000;
      case 744: return 120000;
      case 745: return 120000;
      case 746: return 120000;
      case 747: return 120000;
      case 748: return 120000;
      case 749: return 120000;
      case 750: return 120000;
      case 751: return 480;
      case 752: return 480;
      case 753: return 959520;
      case 754: return 959520;
      case 755: return 0;
      case 756: return 480;
      case 757: return 1;
      case 758: return 1;
      case 759: return 1;
      case 760: return 1;
      case 761: return 0;
      case 762: return 0;
      case 763: return 0;
      case 764: return 0;
      case 765: return 0;
      case 766: return 0;
      case 767: return 0;
      case 768: return 0;
      case 769: return 120000;
      case 770: return 120000;
      case 771: return 120000;
      case 772: return 120000;
      case 773: return 120000;
      case 774: return 120000;
      case 775: return 120000;
      case 776: return 120000;
      case 777: return 120000;
      case 778: return 120000;
      case 779: return 120000;
      case 780: return 120000;
      case 781: return 120000;
      case 782: return 120000;
      case 783: return 120000;
      case 784: return 120000;
      case 785: return 480;
      case 786: return 480;
      case 787: return 959520;
      case 788: return 959520;
      case 789: return 0;
      case 790: return 480;
      case 791: return 0;
      case 792: return 0;
      case 793: return 0;
      case 794: return 0;
      case 795: return 0;
      case 796: return 0;
      case 797: return 0;
      case 798: return 0;
      case 799: return 120000;
      case 800: return 120000;
      case 801: return 120000;
      case 802: return 120000;
      case 803: return 120000;
      case 804: return 120000;
      case 805: return 120000;
      case 806: return 120000;
      case 807: return 120000;
      case 808: return 120000;
      case 809: return 120000;
      case 810: return 120000;
      case 811: return 120000;
      case 812: return 120000;
      case 813: return 120000;
      case 814: return 120000;
      case 815: return 480;
      case 816: return 480;
      case 817: return 959520;
      case 818: return 959520;
      case 819: return 0;
      case 820: return 480;
      case 821: return 1;
      case 822: return 1;
      case 823: return 1;
      case 824: return 1;
      case 825: return 0;
      case 826: return 0;
      case 827: return 0;
      case 828: return 0;
      case 829: return 0;
      case 830: return 0;
      case 831: return 0;
      case 832: return 0;
      case 833: return 120000;
      case 834: return 120000;
      case 835: return 120000;
      case 836: return 120000;
      case 837: return 120000;
      case 838: return 120000;
      case 839: return 120000;
      case 840: return 120000;
      case 841: return 120000;
      case 842: return 120000;
      case 843: return 120000;
      case 844: return 120000;
      case 845: return 120000;
      case 846: return 120000;
      case 847: return 120000;
      case 848: return 120000;
      case 849: return 480;
      case 850: return 480;
      case 851: return 959520;
      case 852: return 959520;
      case 853: return 0;
      case 854: return 480;
      case 855: return 0;
      case 856: return 0;
      case 857: return 0;
      case 858: return 0;
      case 859: return 0;
      case 860: return 0;
      case 861: return 0;
      case 862: return 0;
      case 863: return 120000;
      case 864: return 120000;
      case 865: return 120000;
      case 866: return 120000;
      case 867: return 120000;
      case 868: return 120000;
      case 869: return 120000;
      case 870: return 120000;
      case 871: return 120000;
      case 872: return 120000;
      case 873: return 120000;
      case 874: return 120000;
      case 875: return 120000;
      case 876: return 120000;
      case 877: return 120000;
      case 878: return 120000;
      case 879: return 480;
      case 880: return 480;
      case 881: return 959520;
      case 882: return 959520;
      case 883: return 0;
      case 884: return 480;
      case 885: return 0;
      case 886: return 0;
      case 887: return 0;
      case 888: return 0;
      case 889: return 0;
      case 890: return 0;
      case 891: return 0;
      case 892: return 0;
      case 893: return 0;
      case 894: return 0;
      case 895: return 0;
      case 896: return 120000;
      case 897: return 120000;
      case 898: return 120000;
      case 899: return 120000;
      case 900: return 120000;
      case 901: return 120000;
      case 902: return 120000;
      case 903: return 120000;
      case 904: return 120000;
      case 905: return 120000;
      case 906: return 120000;
      case 907: return 120000;
      case 908: return 120000;
      case 909: return 120000;
      case 910: return 120000;
      case 911: return 120000;
      case 912: return 480;
      case 913: return 480;
      case 914: return 959520;
      case 915: return 959520;
      case 916: return 0;
      case 917: return 480;
      case 918: return 1;
      case 919: return 1;
      case 920: return 0;
      case 921: return 0;
      case 922: return 0;
      case 923: return 0;
      case 924: return 0;
      case 925: return 29532720;
      case 926: return 29472900;
      case 927: return 59940;
      case 928: return 0;
      case 929: return 0;
      case 930: return 0;
      case 931: return 29532720;
      case 932: return 29472900;
      case 933: return 59940;
      case 934: return 0;
      case 935: return 0;
      case 936: return 0;
      case 937: return 29532720;
      case 938: return 29472900;
      case 939: return 59940;
      case 940: return 0;
      case 941: return 0;
      case 942: return 0;
      case 943: return 29901180;
      case 944: return 29841600;
      case 945: return 59940;
      case 946: return 0;
      case 947: return 0;
      case 948: return 0;
      case 949: return 29901180;
      case 950: return 29841600;
      case 951: return 59940;
      case 952: return 0;
      case 953: return 0;
      case 954: return 0;
      case 955: return 29901180;
      case 956: return 29841600;
      case 957: return 59940;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 7500;
      case 15: return 7500;
      case 16: return 7500;
      case 17: return 7500;
      case 18: return 7500;
      case 19: return 7500;
      case 20: return 7500;
      case 21: return 7500;
      case 22: return 7500;
      case 23: return 7500;
      case 24: return 7500;
      case 25: return 7500;
      case 26: return 7500;
      case 27: return 7500;
      case 28: return 7500;
      case 29: return 7500;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 60;
      case 53: return 60;
      case 54: return 0;
      case 55: return 60;
      case 56: return 59940;
      case 57: return 30203640;
      case 58: return 30143940;
      case 59: return 59940;
      case 60: return 59940;
      case 61: return 119940;
      case 62: return 119940;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 29532720;
      case 69: return 29472900;
      case 70: return 59940;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z19test_insertion_sortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEvT_S7_S7_S7_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 7500;
      case 15: return 7500;
      case 16: return 7500;
      case 17: return 7500;
      case 18: return 7500;
      case 19: return 7500;
      case 20: return 7500;
      case 21: return 7500;
      case 22: return 7500;
      case 23: return 7500;
      case 24: return 7500;
      case 25: return 7500;
      case 26: return 7500;
      case 27: return 7500;
      case 28: return 7500;
      case 29: return 7500;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 60;
      case 53: return 60;
      case 54: return 0;
      case 55: return 60;
      case 56: return 59940;
      case 57: return 30203640;
      case 58: return 30143940;
      case 59: return 59940;
      case 60: return 59940;
      case 61: return 119940;
      case 62: return 119940;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 29532720;
      case 69: return 29472900;
      case 70: return 59940;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 60000;
      case 7: return 60000;
      case 8: return 60000;
      case 9: return 60000;
      case 10: return 60000;
      case 11: return 60000;
      case 12: return 60000;
      case 13: return 60000;
      case 14: return 60000;
      case 15: return 60000;
      case 16: return 60000;
      case 17: return 60000;
      case 18: return 60000;
      case 19: return 60000;
      case 20: return 60000;
      case 21: return 60000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 959520;
      case 45: return 959520;
      case 46: return 0;
      case 47: return 480;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEvT_S7_S7_S7_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 60000;
      case 7: return 60000;
      case 8: return 60000;
      case 9: return 60000;
      case 10: return 60000;
      case 11: return 60000;
      case 12: return 60000;
      case 13: return 60000;
      case 14: return 60000;
      case 15: return 60000;
      case 16: return 60000;
      case 17: return 60000;
      case 18: return 60000;
      case 19: return 60000;
      case 20: return 60000;
      case 21: return 60000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 959520;
      case 45: return 959520;
      case 46: return 0;
      case 47: return 480;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 60000;
      case 7: return 60000;
      case 8: return 60000;
      case 9: return 60000;
      case 10: return 60000;
      case 11: return 60000;
      case 12: return 60000;
      case 13: return 60000;
      case 14: return 60000;
      case 15: return 60000;
      case 16: return 60000;
      case 17: return 60000;
      case 18: return 60000;
      case 19: return 60000;
      case 20: return 60000;
      case 21: return 60000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 959520;
      case 45: return 959520;
      case 46: return 0;
      case 47: return 480;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_heap_sortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEvT_S7_S7_S7_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 60000;
      case 7: return 60000;
      case 8: return 60000;
      case 9: return 60000;
      case 10: return 60000;
      case 11: return 60000;
      case 12: return 60000;
      case 13: return 60000;
      case 14: return 60000;
      case 15: return 60000;
      case 16: return 60000;
      case 17: return 60000;
      case 18: return 60000;
      case 19: return 60000;
      case 20: return 60000;
      case 21: return 60000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 959520;
      case 45: return 959520;
      case 46: return 0;
      case 47: return 480;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEmRKd") {
      switch(AccessId) {
      case 0: return 2;
      case 1: return 2;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      case 62: return 0;
      case 63: return 0;
      case 64: return 0;
      case 65: return 2;
      case 66: return 2;
      case 67: return 124;
      case 68: return 124;
      case 69: return 124;
      case 70: return 124;
      case 71: return 124;
      case 72: return 124;
      case 73: return 124;
      case 74: return 124;
      case 75: return 124;
      case 76: return 124;
      case 77: return 124;
      case 78: return 124;
      case 79: return 124;
      case 80: return 124;
      case 81: return 124;
      case 82: return 124;
      case 83: return 8;
      case 84: return 8;
      case 85: return 0;
      case 86: return 2;
      case 87: return 2;
      case 88: return 2;
      case 89: return 2;
      case 90: return 2;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark9quicksortIPddEEvT_S2_") {
      switch(AccessId) {
      case 0: return 959520;
      case 1: return 9348480;
      case 2: return 5583840;
      case 3: return 2433600;
      case 4: return 2433600;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEEvT_S8_") {
      switch(AccessId) {
      case 0: return 959520;
      case 1: return 9348480;
      case 2: return 2704320;
      case 3: return 5583840;
      case 4: return 2433600;
      case 5: return 2433600;
      case 6: return 2433600;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark9quicksortISt16reverse_iteratorIPdEdEEvT_S4_") {
      switch(AccessId) {
      case 0: return 1919520;
      case 1: return 1919520;
      case 2: return 959520;
      case 3: return 9954240;
      case 4: return 2744640;
      case 5: return 5843040;
      case 6: return 2478720;
      case 7: return 2478720;
      case 8: return 2478720;
      case 9: return 2478720;
      case 10: return 959520;
      case 11: return 959520;
      case 12: return 959520;
      case 13: return 959520;
      case 14: return 959520;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark9quicksortISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEdEEvT_SA_") {
      switch(AccessId) {
      case 0: return 3839040;
      case 1: return 3839040;
      case 2: return 1919040;
      case 3: return 19908480;
      case 4: return 5489280;
      case 5: return 11686080;
      case 6: return 4957440;
      case 7: return 4957440;
      case 8: return 4957440;
      case 9: return 4957440;
      case 10: return 1919040;
      case 11: return 1919040;
      case 12: return 1919040;
      case 13: return 1919040;
      case 14: return 1919040;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEdEEvT_S5_") {
      switch(AccessId) {
      case 0: return 1919520;
      case 1: return 1919520;
      case 2: return 959520;
      case 3: return 9348480;
      case 4: return 2704320;
      case 5: return 5583840;
      case 6: return 2433600;
      case 7: return 2433600;
      case 8: return 2433600;
      case 9: return 959520;
      case 10: return 959520;
      case 11: return 959520;
      case 12: return 959520;
      case 13: return 959520;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEEvT_SB_") {
      switch(AccessId) {
      case 0: return 3839040;
      case 1: return 3839040;
      case 2: return 1919040;
      case 3: return 18696960;
      case 4: return 5408640;
      case 5: return 11167680;
      case 6: return 4867200;
      case 7: return 4867200;
      case 8: return 4867200;
      case 9: return 1919040;
      case 10: return 1919040;
      case 11: return 1919040;
      case 12: return 1919040;
      case 13: return 1919040;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark8heapsortIPddEEvT_S2_") {
      switch(AccessId) {
      case 0: return 480000;
      case 1: return 955200;
      case 2: return 955200;
      case 3: return 955200;
      case 4: return 955200;
      case 5: return 960;
      case 6: return 960;
      case 7: return 615360;
      case 8: return 234720;
      case 9: return 480000;
      case 10: return 959520;
      case 11: return 959520;
      case 12: return 959520;
      case 13: return 8167200;
      case 14: return 8167200;
      case 15: return 8167200;
      case 16: return 8167200;
      case 17: return 2880;
      case 18: return 2880;
      case 19: return 1136640;
      case 20: return 178080;
      case 21: return 959520;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark8heapsortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEEvT_S8_") {
      switch(AccessId) {
      case 0: return 480000;
      case 1: return 955200;
      case 2: return 955200;
      case 3: return 955200;
      case 4: return 955200;
      case 5: return 960;
      case 6: return 960;
      case 7: return 615360;
      case 8: return 234720;
      case 9: return 480000;
      case 10: return 959520;
      case 11: return 959520;
      case 12: return 959520;
      case 13: return 8167200;
      case 14: return 8167200;
      case 15: return 8167200;
      case 16: return 8167200;
      case 17: return 2880;
      case 18: return 2880;
      case 19: return 1136640;
      case 20: return 178080;
      case 21: return 959520;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark8heapsortISt16reverse_iteratorIPdEdEEvT_S4_") {
      switch(AccessId) {
      case 0: return 480;
      case 1: return 480;
      case 2: return 480000;
      case 3: return 954720;
      case 4: return 954720;
      case 5: return 954720;
      case 6: return 954720;
      case 7: return 960;
      case 8: return 960;
      case 9: return 625920;
      case 10: return 250560;
      case 11: return 480000;
      case 12: return 959520;
      case 13: return 959520;
      case 14: return 959520;
      case 15: return 8173920;
      case 16: return 8173920;
      case 17: return 8173920;
      case 18: return 8173920;
      case 19: return 5280;
      case 20: return 5280;
      case 21: return 1116480;
      case 22: return 157440;
      case 23: return 959520;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark8heapsortISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEdEEvT_SA_") {
      switch(AccessId) {
      case 0: return 960;
      case 1: return 960;
      case 2: return 960000;
      case 3: return 1909440;
      case 4: return 1909440;
      case 5: return 1909440;
      case 6: return 1909440;
      case 7: return 1920;
      case 8: return 1920;
      case 9: return 1251840;
      case 10: return 501120;
      case 11: return 960000;
      case 12: return 1919040;
      case 13: return 1919040;
      case 14: return 1919040;
      case 15: return 16347840;
      case 16: return 16347840;
      case 17: return 16347840;
      case 18: return 16347840;
      case 19: return 10560;
      case 20: return 10560;
      case 21: return 2232960;
      case 22: return 314880;
      case 23: return 1919040;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark8heapsortISt16reverse_iteratorIS1_IPdEEdEEvT_S5_") {
      switch(AccessId) {
      case 0: return 480;
      case 1: return 480;
      case 2: return 480000;
      case 3: return 955200;
      case 4: return 955200;
      case 5: return 955200;
      case 6: return 955200;
      case 7: return 960;
      case 8: return 960;
      case 9: return 615360;
      case 10: return 234720;
      case 11: return 480000;
      case 12: return 959520;
      case 13: return 959520;
      case 14: return 959520;
      case 15: return 8167200;
      case 16: return 8167200;
      case 17: return 8167200;
      case 18: return 8167200;
      case 19: return 2880;
      case 20: return 2880;
      case 21: return 1136640;
      case 22: return 178080;
      case 23: return 959520;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark8heapsortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEEvT_SB_") {
      switch(AccessId) {
      case 0: return 960;
      case 1: return 960;
      case 2: return 960000;
      case 3: return 1910400;
      case 4: return 1910400;
      case 5: return 1910400;
      case 6: return 1910400;
      case 7: return 1920;
      case 8: return 1920;
      case 9: return 1230720;
      case 10: return 469440;
      case 11: return 960000;
      case 12: return 1919040;
      case 13: return 1919040;
      case 14: return 1919040;
      case 15: return 16334400;
      case 16: return 16334400;
      case 17: return 16334400;
      case 18: return 16334400;
      case 19: return 5760;
      case 20: return 5760;
      case 21: return 2273280;
      case 22: return 356160;
      case 23: return 1919040;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Adobe-C++/loop_unroll.cpp") {
    if (FunctionName == "_Z13record_resultdPKc") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z9summarizePKciiii") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z17summarize_simplefP8_IO_FILEPKc") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z11start_timerv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z5timerv") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1;
      case 5: return 125;
      case 6: return 125;
      case 7: return 125;
      case 8: return 125;
      case 9: return 125;
      case 10: return 125;
      case 11: return 125;
      case 12: return 125;
      case 13: return 125;
      case 14: return 125;
      case 15: return 125;
      case 16: return 125;
      case 17: return 125;
      case 18: return 125;
      case 19: return 125;
      case 20: return 125;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 250;
      case 25: return 250;
      case 26: return 250;
      case 27: return 250;
      case 28: return 250;
      case 29: return 250;
      case 30: return 250;
      case 31: return 250;
      case 32: return 250;
      case 33: return 250;
      case 34: return 250;
      case 35: return 250;
      case 36: return 250;
      case 37: return 250;
      case 38: return 250;
      case 39: return 250;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 250000;
      case 5: return 250000;
      case 6: return 250000;
      case 7: return 250000;
      case 8: return 250000;
      case 9: return 250000;
      case 10: return 250000;
      case 11: return 250000;
      case 12: return 250000;
      case 13: return 250000;
      case 14: return 250000;
      case 15: return 250000;
      case 16: return 250000;
      case 17: return 250000;
      case 18: return 250000;
      case 19: return 250000;
      case 20: return 250000;
      case 21: return 250000;
      case 22: return 250000;
      case 23: return 250000;
      case 24: return 250000;
      case 25: return 250000;
      case 26: return 250000;
      case 27: return 250000;
      case 28: return 250000;
      case 29: return 250000;
      case 30: return 250000;
      case 31: return 250000;
      case 32: return 250000;
      case 33: return 250000;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 1000;
      case 42: return 0;
      case 43: return 1000;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      case 47: return 0;
      case 48: return 1;
      case 49: return 1;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 258000;
      case 3: return 258000;
      case 4: return 258000;
      case 5: return 258000;
      case 6: return 258000;
      case 7: return 258000;
      case 8: return 258000;
      case 9: return 258000;
      case 10: return 258000;
      case 11: return 258000;
      case 12: return 258000;
      case 13: return 258000;
      case 14: return 258000;
      case 15: return 258000;
      case 16: return 258000;
      case 17: return 258000;
      case 18: return 258000;
      case 19: return 258000;
      case 20: return 258000;
      case 21: return 258000;
      case 22: return 258000;
      case 23: return 258000;
      case 24: return 258000;
      case 25: return 258000;
      case 26: return 258000;
      case 27: return 258000;
      case 28: return 258000;
      case 29: return 258000;
      case 30: return 258000;
      case 31: return 258000;
      case 32: return 258000;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 2000;
      case 40: return 1000;
      case 41: return 0;
      case 42: return 1000;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      case 46: return 0;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      case 50: return 1;
      case 51: return 1;
      case 52: return 0;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 266000;
      case 3: return 266000;
      case 4: return 266000;
      case 5: return 266000;
      case 6: return 266000;
      case 7: return 266000;
      case 8: return 266000;
      case 9: return 266000;
      case 10: return 266000;
      case 11: return 266000;
      case 12: return 266000;
      case 13: return 266000;
      case 14: return 266000;
      case 15: return 266000;
      case 16: return 266000;
      case 17: return 266000;
      case 18: return 266000;
      case 19: return 266000;
      case 20: return 266000;
      case 21: return 266000;
      case 22: return 266000;
      case 23: return 266000;
      case 24: return 266000;
      case 25: return 266000;
      case 26: return 266000;
      case 27: return 266000;
      case 28: return 266000;
      case 29: return 266000;
      case 30: return 266000;
      case 31: return 266000;
      case 32: return 1000;
      case 33: return 1000;
      case 34: return 1000;
      case 35: return 1000;
      case 36: return 0;
      case 37: return 0;
      case 38: return 4000;
      case 39: return 1000;
      case 40: return 0;
      case 41: return 1000;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      case 45: return 0;
      case 46: return 1;
      case 47: return 1;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 275000;
      case 3: return 275000;
      case 4: return 275000;
      case 5: return 275000;
      case 6: return 275000;
      case 7: return 275000;
      case 8: return 275000;
      case 9: return 275000;
      case 10: return 275000;
      case 11: return 275000;
      case 12: return 275000;
      case 13: return 275000;
      case 14: return 275000;
      case 15: return 275000;
      case 16: return 275000;
      case 17: return 275000;
      case 18: return 275000;
      case 19: return 275000;
      case 20: return 275000;
      case 21: return 275000;
      case 22: return 275000;
      case 23: return 275000;
      case 24: return 275000;
      case 25: return 275000;
      case 26: return 275000;
      case 27: return 275000;
      case 28: return 275000;
      case 29: return 275000;
      case 30: return 275000;
      case 31: return 1000;
      case 32: return 1000;
      case 33: return 1000;
      case 34: return 1000;
      case 35: return 1000;
      case 36: return 1000;
      case 37: return 1000;
      case 38: return 1000;
      case 39: return 0;
      case 40: return 1000;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 0;
      case 45: return 1;
      case 46: return 1;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 285000;
      case 3: return 285000;
      case 4: return 285000;
      case 5: return 285000;
      case 6: return 285000;
      case 7: return 285000;
      case 8: return 285000;
      case 9: return 285000;
      case 10: return 285000;
      case 11: return 285000;
      case 12: return 285000;
      case 13: return 285000;
      case 14: return 285000;
      case 15: return 285000;
      case 16: return 285000;
      case 17: return 285000;
      case 18: return 285000;
      case 19: return 285000;
      case 20: return 285000;
      case 21: return 285000;
      case 22: return 285000;
      case 23: return 285000;
      case 24: return 285000;
      case 25: return 285000;
      case 26: return 285000;
      case 27: return 285000;
      case 28: return 285000;
      case 29: return 285000;
      case 30: return 1000;
      case 31: return 1000;
      case 32: return 1000;
      case 33: return 1000;
      case 34: return 0;
      case 35: return 0;
      case 36: return 4000;
      case 37: return 1000;
      case 38: return 0;
      case 39: return 1000;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 0;
      case 44: return 1;
      case 45: return 1;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 296000;
      case 3: return 296000;
      case 4: return 296000;
      case 5: return 296000;
      case 6: return 296000;
      case 7: return 296000;
      case 8: return 296000;
      case 9: return 296000;
      case 10: return 296000;
      case 11: return 296000;
      case 12: return 296000;
      case 13: return 296000;
      case 14: return 296000;
      case 15: return 296000;
      case 16: return 296000;
      case 17: return 296000;
      case 18: return 296000;
      case 19: return 296000;
      case 20: return 296000;
      case 21: return 296000;
      case 22: return 296000;
      case 23: return 296000;
      case 24: return 296000;
      case 25: return 296000;
      case 26: return 296000;
      case 27: return 296000;
      case 28: return 296000;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 1000;
      case 34: return 1000;
      case 35: return 0;
      case 36: return 1000;
      case 37: return 0;
      case 38: return 1000;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 0;
      case 43: return 1;
      case 44: return 1;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 1;
      case 50: return 1;
      case 51: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 307000;
      case 3: return 307000;
      case 4: return 307000;
      case 5: return 307000;
      case 6: return 307000;
      case 7: return 307000;
      case 8: return 307000;
      case 9: return 307000;
      case 10: return 307000;
      case 11: return 307000;
      case 12: return 307000;
      case 13: return 307000;
      case 14: return 307000;
      case 15: return 307000;
      case 16: return 307000;
      case 17: return 307000;
      case 18: return 307000;
      case 19: return 307000;
      case 20: return 307000;
      case 21: return 307000;
      case 22: return 307000;
      case 23: return 307000;
      case 24: return 307000;
      case 25: return 307000;
      case 26: return 307000;
      case 27: return 307000;
      case 28: return 1000;
      case 29: return 1000;
      case 30: return 1000;
      case 31: return 1000;
      case 32: return 0;
      case 33: return 0;
      case 34: return 2000;
      case 35: return 1000;
      case 36: return 0;
      case 37: return 1000;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      case 41: return 0;
      case 42: return 1;
      case 43: return 1;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 1;
      case 49: return 1;
      case 50: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 320000;
      case 3: return 320000;
      case 4: return 320000;
      case 5: return 320000;
      case 6: return 320000;
      case 7: return 320000;
      case 8: return 320000;
      case 9: return 320000;
      case 10: return 320000;
      case 11: return 320000;
      case 12: return 320000;
      case 13: return 320000;
      case 14: return 320000;
      case 15: return 320000;
      case 16: return 320000;
      case 17: return 320000;
      case 18: return 320000;
      case 19: return 320000;
      case 20: return 320000;
      case 21: return 320000;
      case 22: return 320000;
      case 23: return 320000;
      case 24: return 320000;
      case 25: return 320000;
      case 26: return 320000;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 1000;
      case 35: return 0;
      case 36: return 1000;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 0;
      case 41: return 1;
      case 42: return 1;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 333000;
      case 3: return 333000;
      case 4: return 333000;
      case 5: return 333000;
      case 6: return 333000;
      case 7: return 333000;
      case 8: return 333000;
      case 9: return 333000;
      case 10: return 333000;
      case 11: return 333000;
      case 12: return 333000;
      case 13: return 333000;
      case 14: return 333000;
      case 15: return 333000;
      case 16: return 333000;
      case 17: return 333000;
      case 18: return 333000;
      case 19: return 333000;
      case 20: return 333000;
      case 21: return 333000;
      case 22: return 333000;
      case 23: return 333000;
      case 24: return 333000;
      case 25: return 333000;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1000;
      case 31: return 1000;
      case 32: return 0;
      case 33: return 1000;
      case 34: return 0;
      case 35: return 1000;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 347000;
      case 3: return 347000;
      case 4: return 347000;
      case 5: return 347000;
      case 6: return 347000;
      case 7: return 347000;
      case 8: return 347000;
      case 9: return 347000;
      case 10: return 347000;
      case 11: return 347000;
      case 12: return 347000;
      case 13: return 347000;
      case 14: return 347000;
      case 15: return 347000;
      case 16: return 347000;
      case 17: return 347000;
      case 18: return 347000;
      case 19: return 347000;
      case 20: return 347000;
      case 21: return 347000;
      case 22: return 347000;
      case 23: return 347000;
      case 24: return 347000;
      case 25: return 1000;
      case 26: return 1000;
      case 27: return 1000;
      case 28: return 1000;
      case 29: return 0;
      case 30: return 0;
      case 31: return 3000;
      case 32: return 1000;
      case 33: return 0;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 0;
      case 39: return 1;
      case 40: return 1;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 363000;
      case 3: return 363000;
      case 4: return 363000;
      case 5: return 363000;
      case 6: return 363000;
      case 7: return 363000;
      case 8: return 363000;
      case 9: return 363000;
      case 10: return 363000;
      case 11: return 363000;
      case 12: return 363000;
      case 13: return 363000;
      case 14: return 363000;
      case 15: return 363000;
      case 16: return 363000;
      case 17: return 363000;
      case 18: return 363000;
      case 19: return 363000;
      case 20: return 363000;
      case 21: return 363000;
      case 22: return 363000;
      case 23: return 363000;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1000;
      case 29: return 1000;
      case 30: return 6000;
      case 31: return 1000;
      case 32: return 0;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 0;
      case 38: return 1;
      case 39: return 1;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 380000;
      case 3: return 380000;
      case 4: return 380000;
      case 5: return 380000;
      case 6: return 380000;
      case 7: return 380000;
      case 8: return 380000;
      case 9: return 380000;
      case 10: return 380000;
      case 11: return 380000;
      case 12: return 380000;
      case 13: return 380000;
      case 14: return 380000;
      case 15: return 380000;
      case 16: return 380000;
      case 17: return 380000;
      case 18: return 380000;
      case 19: return 380000;
      case 20: return 380000;
      case 21: return 380000;
      case 22: return 380000;
      case 23: return 1000;
      case 24: return 1000;
      case 25: return 1000;
      case 26: return 1000;
      case 27: return 0;
      case 28: return 0;
      case 29: return 4000;
      case 30: return 1000;
      case 31: return 0;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 0;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 400000;
      case 3: return 400000;
      case 4: return 400000;
      case 5: return 400000;
      case 6: return 400000;
      case 7: return 400000;
      case 8: return 400000;
      case 9: return 400000;
      case 10: return 400000;
      case 11: return 400000;
      case 12: return 400000;
      case 13: return 400000;
      case 14: return 400000;
      case 15: return 400000;
      case 16: return 400000;
      case 17: return 400000;
      case 18: return 400000;
      case 19: return 400000;
      case 20: return 400000;
      case 21: return 400000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1000;
      case 30: return 0;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 1;
      case 37: return 1;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 421000;
      case 3: return 421000;
      case 4: return 421000;
      case 5: return 421000;
      case 6: return 421000;
      case 7: return 421000;
      case 8: return 421000;
      case 9: return 421000;
      case 10: return 421000;
      case 11: return 421000;
      case 12: return 421000;
      case 13: return 421000;
      case 14: return 421000;
      case 15: return 421000;
      case 16: return 421000;
      case 17: return 421000;
      case 18: return 421000;
      case 19: return 421000;
      case 20: return 421000;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1000;
      case 28: return 1000;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 444000;
      case 3: return 444000;
      case 4: return 444000;
      case 5: return 444000;
      case 6: return 444000;
      case 7: return 444000;
      case 8: return 444000;
      case 9: return 444000;
      case 10: return 444000;
      case 11: return 444000;
      case 12: return 444000;
      case 13: return 444000;
      case 14: return 444000;
      case 15: return 444000;
      case 16: return 444000;
      case 17: return 444000;
      case 18: return 444000;
      case 19: return 444000;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 1000;
      case 25: return 1000;
      case 26: return 0;
      case 27: return 1000;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 470000;
      case 3: return 470000;
      case 4: return 470000;
      case 5: return 470000;
      case 6: return 470000;
      case 7: return 470000;
      case 8: return 470000;
      case 9: return 470000;
      case 10: return 470000;
      case 11: return 470000;
      case 12: return 470000;
      case 13: return 470000;
      case 14: return 470000;
      case 15: return 470000;
      case 16: return 470000;
      case 17: return 470000;
      case 18: return 470000;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1000;
      case 24: return 1000;
      case 25: return 2000;
      case 26: return 1000;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 500000;
      case 7: return 500000;
      case 8: return 500000;
      case 9: return 500000;
      case 10: return 500000;
      case 11: return 500000;
      case 12: return 500000;
      case 13: return 500000;
      case 14: return 500000;
      case 15: return 500000;
      case 16: return 500000;
      case 17: return 500000;
      case 18: return 500000;
      case 19: return 500000;
      case 20: return 500000;
      case 21: return 500000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 5000;
      case 6: return 533000;
      case 7: return 533000;
      case 8: return 533000;
      case 9: return 533000;
      case 10: return 533000;
      case 11: return 533000;
      case 12: return 533000;
      case 13: return 533000;
      case 14: return 533000;
      case 15: return 533000;
      case 16: return 533000;
      case 17: return 533000;
      case 18: return 533000;
      case 19: return 533000;
      case 20: return 533000;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 1;
      case 38: return 1;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 6000;
      case 6: return 571000;
      case 7: return 571000;
      case 8: return 571000;
      case 9: return 571000;
      case 10: return 571000;
      case 11: return 571000;
      case 12: return 571000;
      case 13: return 571000;
      case 14: return 571000;
      case 15: return 571000;
      case 16: return 571000;
      case 17: return 571000;
      case 18: return 571000;
      case 19: return 571000;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 1;
      case 37: return 1;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 5000;
      case 6: return 615000;
      case 7: return 615000;
      case 8: return 615000;
      case 9: return 615000;
      case 10: return 615000;
      case 11: return 615000;
      case 12: return 615000;
      case 13: return 615000;
      case 14: return 615000;
      case 15: return 615000;
      case 16: return 615000;
      case 17: return 615000;
      case 18: return 615000;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 666000;
      case 7: return 666000;
      case 8: return 666000;
      case 9: return 666000;
      case 10: return 666000;
      case 11: return 666000;
      case 12: return 666000;
      case 13: return 666000;
      case 14: return 666000;
      case 15: return 666000;
      case 16: return 666000;
      case 17: return 666000;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1000;
      case 23: return 1000;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 3000;
      case 6: return 727000;
      case 7: return 727000;
      case 8: return 727000;
      case 9: return 727000;
      case 10: return 727000;
      case 11: return 727000;
      case 12: return 727000;
      case 13: return 727000;
      case 14: return 727000;
      case 15: return 727000;
      case 16: return 727000;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 0;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 800000;
      case 7: return 800000;
      case 8: return 800000;
      case 9: return 800000;
      case 10: return 800000;
      case 11: return 800000;
      case 12: return 800000;
      case 13: return 800000;
      case 14: return 800000;
      case 15: return 800000;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 888000;
      case 7: return 888000;
      case 8: return 888000;
      case 9: return 888000;
      case 10: return 888000;
      case 11: return 888000;
      case 12: return 888000;
      case 13: return 888000;
      case 14: return 888000;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1000;
      case 20: return 1000;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 1000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 6000;
      case 6: return 1142000;
      case 7: return 1142000;
      case 8: return 1142000;
      case 9: return 1142000;
      case 10: return 1142000;
      case 11: return 1142000;
      case 12: return 1142000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 2000;
      case 6: return 1333000;
      case 7: return 1333000;
      case 8: return 1333000;
      case 9: return 1333000;
      case 10: return 1333000;
      case 11: return 1333000;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1600000;
      case 7: return 1600000;
      case 8: return 1600000;
      case 9: return 1600000;
      case 10: return 1600000;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 1000;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 2000;
      case 6: return 2666000;
      case 7: return 2666000;
      case 8: return 2666000;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 1000;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 1000;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 250000;
      case 5: return 250000;
      case 6: return 250000;
      case 7: return 250000;
      case 8: return 250000;
      case 9: return 250000;
      case 10: return 250000;
      case 11: return 250000;
      case 12: return 250000;
      case 13: return 250000;
      case 14: return 250000;
      case 15: return 250000;
      case 16: return 250000;
      case 17: return 250000;
      case 18: return 250000;
      case 19: return 250000;
      case 20: return 250000;
      case 21: return 250000;
      case 22: return 250000;
      case 23: return 250000;
      case 24: return 250000;
      case 25: return 250000;
      case 26: return 250000;
      case 27: return 250000;
      case 28: return 250000;
      case 29: return 250000;
      case 30: return 250000;
      case 31: return 250000;
      case 32: return 250000;
      case 33: return 250000;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 1000;
      case 42: return 0;
      case 43: return 1000;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      case 47: return 0;
      case 48: return 1;
      case 49: return 1;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 258000;
      case 3: return 258000;
      case 4: return 258000;
      case 5: return 258000;
      case 6: return 258000;
      case 7: return 258000;
      case 8: return 258000;
      case 9: return 258000;
      case 10: return 258000;
      case 11: return 258000;
      case 12: return 258000;
      case 13: return 258000;
      case 14: return 258000;
      case 15: return 258000;
      case 16: return 258000;
      case 17: return 258000;
      case 18: return 258000;
      case 19: return 258000;
      case 20: return 258000;
      case 21: return 258000;
      case 22: return 258000;
      case 23: return 258000;
      case 24: return 258000;
      case 25: return 258000;
      case 26: return 258000;
      case 27: return 258000;
      case 28: return 258000;
      case 29: return 258000;
      case 30: return 258000;
      case 31: return 258000;
      case 32: return 258000;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 2000;
      case 40: return 1000;
      case 41: return 0;
      case 42: return 1000;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      case 46: return 0;
      case 47: return 1;
      case 48: return 1;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 266000;
      case 3: return 266000;
      case 4: return 266000;
      case 5: return 266000;
      case 6: return 266000;
      case 7: return 266000;
      case 8: return 266000;
      case 9: return 266000;
      case 10: return 266000;
      case 11: return 266000;
      case 12: return 266000;
      case 13: return 266000;
      case 14: return 266000;
      case 15: return 266000;
      case 16: return 266000;
      case 17: return 266000;
      case 18: return 266000;
      case 19: return 266000;
      case 20: return 266000;
      case 21: return 266000;
      case 22: return 266000;
      case 23: return 266000;
      case 24: return 266000;
      case 25: return 266000;
      case 26: return 266000;
      case 27: return 266000;
      case 28: return 266000;
      case 29: return 266000;
      case 30: return 266000;
      case 31: return 266000;
      case 32: return 1000;
      case 33: return 1000;
      case 34: return 1000;
      case 35: return 1000;
      case 36: return 0;
      case 37: return 0;
      case 38: return 4000;
      case 39: return 1000;
      case 40: return 0;
      case 41: return 1000;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      case 45: return 0;
      case 46: return 1;
      case 47: return 1;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 275000;
      case 3: return 275000;
      case 4: return 275000;
      case 5: return 275000;
      case 6: return 275000;
      case 7: return 275000;
      case 8: return 275000;
      case 9: return 275000;
      case 10: return 275000;
      case 11: return 275000;
      case 12: return 275000;
      case 13: return 275000;
      case 14: return 275000;
      case 15: return 275000;
      case 16: return 275000;
      case 17: return 275000;
      case 18: return 275000;
      case 19: return 275000;
      case 20: return 275000;
      case 21: return 275000;
      case 22: return 275000;
      case 23: return 275000;
      case 24: return 275000;
      case 25: return 275000;
      case 26: return 275000;
      case 27: return 275000;
      case 28: return 275000;
      case 29: return 275000;
      case 30: return 275000;
      case 31: return 1000;
      case 32: return 1000;
      case 33: return 1000;
      case 34: return 1000;
      case 35: return 1000;
      case 36: return 1000;
      case 37: return 1000;
      case 38: return 1000;
      case 39: return 0;
      case 40: return 1000;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 0;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      case 50: return 0;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 285000;
      case 3: return 285000;
      case 4: return 285000;
      case 5: return 285000;
      case 6: return 285000;
      case 7: return 285000;
      case 8: return 285000;
      case 9: return 285000;
      case 10: return 285000;
      case 11: return 285000;
      case 12: return 285000;
      case 13: return 285000;
      case 14: return 285000;
      case 15: return 285000;
      case 16: return 285000;
      case 17: return 285000;
      case 18: return 285000;
      case 19: return 285000;
      case 20: return 285000;
      case 21: return 285000;
      case 22: return 285000;
      case 23: return 285000;
      case 24: return 285000;
      case 25: return 285000;
      case 26: return 285000;
      case 27: return 285000;
      case 28: return 285000;
      case 29: return 285000;
      case 30: return 1000;
      case 31: return 1000;
      case 32: return 1000;
      case 33: return 1000;
      case 34: return 0;
      case 35: return 0;
      case 36: return 4000;
      case 37: return 1000;
      case 38: return 0;
      case 39: return 1000;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 0;
      case 44: return 1;
      case 45: return 1;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 296000;
      case 3: return 296000;
      case 4: return 296000;
      case 5: return 296000;
      case 6: return 296000;
      case 7: return 296000;
      case 8: return 296000;
      case 9: return 296000;
      case 10: return 296000;
      case 11: return 296000;
      case 12: return 296000;
      case 13: return 296000;
      case 14: return 296000;
      case 15: return 296000;
      case 16: return 296000;
      case 17: return 296000;
      case 18: return 296000;
      case 19: return 296000;
      case 20: return 296000;
      case 21: return 296000;
      case 22: return 296000;
      case 23: return 296000;
      case 24: return 296000;
      case 25: return 296000;
      case 26: return 296000;
      case 27: return 296000;
      case 28: return 296000;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 1000;
      case 34: return 1000;
      case 35: return 0;
      case 36: return 1000;
      case 37: return 0;
      case 38: return 1000;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 0;
      case 43: return 1;
      case 44: return 1;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 1;
      case 50: return 1;
      case 51: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 307000;
      case 3: return 307000;
      case 4: return 307000;
      case 5: return 307000;
      case 6: return 307000;
      case 7: return 307000;
      case 8: return 307000;
      case 9: return 307000;
      case 10: return 307000;
      case 11: return 307000;
      case 12: return 307000;
      case 13: return 307000;
      case 14: return 307000;
      case 15: return 307000;
      case 16: return 307000;
      case 17: return 307000;
      case 18: return 307000;
      case 19: return 307000;
      case 20: return 307000;
      case 21: return 307000;
      case 22: return 307000;
      case 23: return 307000;
      case 24: return 307000;
      case 25: return 307000;
      case 26: return 307000;
      case 27: return 307000;
      case 28: return 1000;
      case 29: return 1000;
      case 30: return 1000;
      case 31: return 1000;
      case 32: return 0;
      case 33: return 0;
      case 34: return 2000;
      case 35: return 1000;
      case 36: return 0;
      case 37: return 1000;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      case 41: return 0;
      case 42: return 1;
      case 43: return 1;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 1;
      case 49: return 1;
      case 50: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 320000;
      case 3: return 320000;
      case 4: return 320000;
      case 5: return 320000;
      case 6: return 320000;
      case 7: return 320000;
      case 8: return 320000;
      case 9: return 320000;
      case 10: return 320000;
      case 11: return 320000;
      case 12: return 320000;
      case 13: return 320000;
      case 14: return 320000;
      case 15: return 320000;
      case 16: return 320000;
      case 17: return 320000;
      case 18: return 320000;
      case 19: return 320000;
      case 20: return 320000;
      case 21: return 320000;
      case 22: return 320000;
      case 23: return 320000;
      case 24: return 320000;
      case 25: return 320000;
      case 26: return 320000;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 1000;
      case 35: return 0;
      case 36: return 1000;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 0;
      case 41: return 1;
      case 42: return 1;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 333000;
      case 3: return 333000;
      case 4: return 333000;
      case 5: return 333000;
      case 6: return 333000;
      case 7: return 333000;
      case 8: return 333000;
      case 9: return 333000;
      case 10: return 333000;
      case 11: return 333000;
      case 12: return 333000;
      case 13: return 333000;
      case 14: return 333000;
      case 15: return 333000;
      case 16: return 333000;
      case 17: return 333000;
      case 18: return 333000;
      case 19: return 333000;
      case 20: return 333000;
      case 21: return 333000;
      case 22: return 333000;
      case 23: return 333000;
      case 24: return 333000;
      case 25: return 333000;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1000;
      case 31: return 1000;
      case 32: return 0;
      case 33: return 1000;
      case 34: return 0;
      case 35: return 1000;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 347000;
      case 3: return 347000;
      case 4: return 347000;
      case 5: return 347000;
      case 6: return 347000;
      case 7: return 347000;
      case 8: return 347000;
      case 9: return 347000;
      case 10: return 347000;
      case 11: return 347000;
      case 12: return 347000;
      case 13: return 347000;
      case 14: return 347000;
      case 15: return 347000;
      case 16: return 347000;
      case 17: return 347000;
      case 18: return 347000;
      case 19: return 347000;
      case 20: return 347000;
      case 21: return 347000;
      case 22: return 347000;
      case 23: return 347000;
      case 24: return 347000;
      case 25: return 1000;
      case 26: return 1000;
      case 27: return 1000;
      case 28: return 1000;
      case 29: return 0;
      case 30: return 0;
      case 31: return 3000;
      case 32: return 1000;
      case 33: return 0;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 0;
      case 39: return 1;
      case 40: return 1;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 363000;
      case 3: return 363000;
      case 4: return 363000;
      case 5: return 363000;
      case 6: return 363000;
      case 7: return 363000;
      case 8: return 363000;
      case 9: return 363000;
      case 10: return 363000;
      case 11: return 363000;
      case 12: return 363000;
      case 13: return 363000;
      case 14: return 363000;
      case 15: return 363000;
      case 16: return 363000;
      case 17: return 363000;
      case 18: return 363000;
      case 19: return 363000;
      case 20: return 363000;
      case 21: return 363000;
      case 22: return 363000;
      case 23: return 363000;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1000;
      case 29: return 1000;
      case 30: return 6000;
      case 31: return 1000;
      case 32: return 0;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 0;
      case 38: return 1;
      case 39: return 1;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 380000;
      case 3: return 380000;
      case 4: return 380000;
      case 5: return 380000;
      case 6: return 380000;
      case 7: return 380000;
      case 8: return 380000;
      case 9: return 380000;
      case 10: return 380000;
      case 11: return 380000;
      case 12: return 380000;
      case 13: return 380000;
      case 14: return 380000;
      case 15: return 380000;
      case 16: return 380000;
      case 17: return 380000;
      case 18: return 380000;
      case 19: return 380000;
      case 20: return 380000;
      case 21: return 380000;
      case 22: return 380000;
      case 23: return 1000;
      case 24: return 1000;
      case 25: return 1000;
      case 26: return 1000;
      case 27: return 0;
      case 28: return 0;
      case 29: return 4000;
      case 30: return 1000;
      case 31: return 0;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 1;
      case 38: return 1;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 400000;
      case 3: return 400000;
      case 4: return 400000;
      case 5: return 400000;
      case 6: return 400000;
      case 7: return 400000;
      case 8: return 400000;
      case 9: return 400000;
      case 10: return 400000;
      case 11: return 400000;
      case 12: return 400000;
      case 13: return 400000;
      case 14: return 400000;
      case 15: return 400000;
      case 16: return 400000;
      case 17: return 400000;
      case 18: return 400000;
      case 19: return 400000;
      case 20: return 400000;
      case 21: return 400000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1000;
      case 30: return 0;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 1;
      case 37: return 1;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 421000;
      case 3: return 421000;
      case 4: return 421000;
      case 5: return 421000;
      case 6: return 421000;
      case 7: return 421000;
      case 8: return 421000;
      case 9: return 421000;
      case 10: return 421000;
      case 11: return 421000;
      case 12: return 421000;
      case 13: return 421000;
      case 14: return 421000;
      case 15: return 421000;
      case 16: return 421000;
      case 17: return 421000;
      case 18: return 421000;
      case 19: return 421000;
      case 20: return 421000;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1000;
      case 28: return 1000;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 0;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 444000;
      case 3: return 444000;
      case 4: return 444000;
      case 5: return 444000;
      case 6: return 444000;
      case 7: return 444000;
      case 8: return 444000;
      case 9: return 444000;
      case 10: return 444000;
      case 11: return 444000;
      case 12: return 444000;
      case 13: return 444000;
      case 14: return 444000;
      case 15: return 444000;
      case 16: return 444000;
      case 17: return 444000;
      case 18: return 444000;
      case 19: return 444000;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 1000;
      case 25: return 1000;
      case 26: return 0;
      case 27: return 1000;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 470000;
      case 3: return 470000;
      case 4: return 470000;
      case 5: return 470000;
      case 6: return 470000;
      case 7: return 470000;
      case 8: return 470000;
      case 9: return 470000;
      case 10: return 470000;
      case 11: return 470000;
      case 12: return 470000;
      case 13: return 470000;
      case 14: return 470000;
      case 15: return 470000;
      case 16: return 470000;
      case 17: return 470000;
      case 18: return 470000;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1000;
      case 24: return 1000;
      case 25: return 2000;
      case 26: return 1000;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 500000;
      case 7: return 500000;
      case 8: return 500000;
      case 9: return 500000;
      case 10: return 500000;
      case 11: return 500000;
      case 12: return 500000;
      case 13: return 500000;
      case 14: return 500000;
      case 15: return 500000;
      case 16: return 500000;
      case 17: return 500000;
      case 18: return 500000;
      case 19: return 500000;
      case 20: return 500000;
      case 21: return 500000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 5000;
      case 6: return 533000;
      case 7: return 533000;
      case 8: return 533000;
      case 9: return 533000;
      case 10: return 533000;
      case 11: return 533000;
      case 12: return 533000;
      case 13: return 533000;
      case 14: return 533000;
      case 15: return 533000;
      case 16: return 533000;
      case 17: return 533000;
      case 18: return 533000;
      case 19: return 533000;
      case 20: return 533000;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 1;
      case 38: return 1;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 6000;
      case 6: return 571000;
      case 7: return 571000;
      case 8: return 571000;
      case 9: return 571000;
      case 10: return 571000;
      case 11: return 571000;
      case 12: return 571000;
      case 13: return 571000;
      case 14: return 571000;
      case 15: return 571000;
      case 16: return 571000;
      case 17: return 571000;
      case 18: return 571000;
      case 19: return 571000;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 1;
      case 37: return 1;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 5000;
      case 6: return 615000;
      case 7: return 615000;
      case 8: return 615000;
      case 9: return 615000;
      case 10: return 615000;
      case 11: return 615000;
      case 12: return 615000;
      case 13: return 615000;
      case 14: return 615000;
      case 15: return 615000;
      case 16: return 615000;
      case 17: return 615000;
      case 18: return 615000;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 666000;
      case 7: return 666000;
      case 8: return 666000;
      case 9: return 666000;
      case 10: return 666000;
      case 11: return 666000;
      case 12: return 666000;
      case 13: return 666000;
      case 14: return 666000;
      case 15: return 666000;
      case 16: return 666000;
      case 17: return 666000;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1000;
      case 23: return 1000;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 3000;
      case 6: return 727000;
      case 7: return 727000;
      case 8: return 727000;
      case 9: return 727000;
      case 10: return 727000;
      case 11: return 727000;
      case 12: return 727000;
      case 13: return 727000;
      case 14: return 727000;
      case 15: return 727000;
      case 16: return 727000;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 800000;
      case 7: return 800000;
      case 8: return 800000;
      case 9: return 800000;
      case 10: return 800000;
      case 11: return 800000;
      case 12: return 800000;
      case 13: return 800000;
      case 14: return 800000;
      case 15: return 800000;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 888000;
      case 7: return 888000;
      case 8: return 888000;
      case 9: return 888000;
      case 10: return 888000;
      case 11: return 888000;
      case 12: return 888000;
      case 13: return 888000;
      case 14: return 888000;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1000;
      case 20: return 1000;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 1000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 6000;
      case 6: return 1142000;
      case 7: return 1142000;
      case 8: return 1142000;
      case 9: return 1142000;
      case 10: return 1142000;
      case 11: return 1142000;
      case 12: return 1142000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 2000;
      case 6: return 1333000;
      case 7: return 1333000;
      case 8: return 1333000;
      case 9: return 1333000;
      case 10: return 1333000;
      case 11: return 1333000;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1600000;
      case 7: return 1600000;
      case 8: return 1600000;
      case 9: return 1600000;
      case 10: return 1600000;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 1000;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 2000;
      case 6: return 2666000;
      case 7: return 2666000;
      case 8: return 2666000;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 1000;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 1000;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 250000;
      case 5: return 250000;
      case 6: return 250000;
      case 7: return 250000;
      case 8: return 250000;
      case 9: return 250000;
      case 10: return 250000;
      case 11: return 250000;
      case 12: return 250000;
      case 13: return 250000;
      case 14: return 250000;
      case 15: return 250000;
      case 16: return 250000;
      case 17: return 250000;
      case 18: return 250000;
      case 19: return 250000;
      case 20: return 250000;
      case 21: return 250000;
      case 22: return 250000;
      case 23: return 250000;
      case 24: return 250000;
      case 25: return 250000;
      case 26: return 250000;
      case 27: return 250000;
      case 28: return 250000;
      case 29: return 250000;
      case 30: return 250000;
      case 31: return 250000;
      case 32: return 250000;
      case 33: return 250000;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 1000;
      case 38: return 0;
      case 39: return 1000;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 0;
      case 44: return 1;
      case 45: return 1;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 258000;
      case 3: return 258000;
      case 4: return 258000;
      case 5: return 258000;
      case 6: return 258000;
      case 7: return 258000;
      case 8: return 258000;
      case 9: return 258000;
      case 10: return 258000;
      case 11: return 258000;
      case 12: return 258000;
      case 13: return 258000;
      case 14: return 258000;
      case 15: return 258000;
      case 16: return 258000;
      case 17: return 258000;
      case 18: return 258000;
      case 19: return 258000;
      case 20: return 258000;
      case 21: return 258000;
      case 22: return 258000;
      case 23: return 258000;
      case 24: return 258000;
      case 25: return 258000;
      case 26: return 258000;
      case 27: return 258000;
      case 28: return 258000;
      case 29: return 258000;
      case 30: return 258000;
      case 31: return 258000;
      case 32: return 258000;
      case 33: return 0;
      case 34: return 0;
      case 35: return 2000;
      case 36: return 1000;
      case 37: return 0;
      case 38: return 1000;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 0;
      case 43: return 1;
      case 44: return 1;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 1;
      case 50: return 1;
      case 51: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 266000;
      case 3: return 266000;
      case 4: return 266000;
      case 5: return 266000;
      case 6: return 266000;
      case 7: return 266000;
      case 8: return 266000;
      case 9: return 266000;
      case 10: return 266000;
      case 11: return 266000;
      case 12: return 266000;
      case 13: return 266000;
      case 14: return 266000;
      case 15: return 266000;
      case 16: return 266000;
      case 17: return 266000;
      case 18: return 266000;
      case 19: return 266000;
      case 20: return 266000;
      case 21: return 266000;
      case 22: return 266000;
      case 23: return 266000;
      case 24: return 266000;
      case 25: return 266000;
      case 26: return 266000;
      case 27: return 266000;
      case 28: return 266000;
      case 29: return 266000;
      case 30: return 266000;
      case 31: return 266000;
      case 32: return 2000;
      case 33: return 2000;
      case 34: return 4000;
      case 35: return 1000;
      case 36: return 0;
      case 37: return 1000;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      case 41: return 0;
      case 42: return 1;
      case 43: return 1;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 1;
      case 49: return 1;
      case 50: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 275000;
      case 3: return 275000;
      case 4: return 275000;
      case 5: return 275000;
      case 6: return 275000;
      case 7: return 275000;
      case 8: return 275000;
      case 9: return 275000;
      case 10: return 275000;
      case 11: return 275000;
      case 12: return 275000;
      case 13: return 275000;
      case 14: return 275000;
      case 15: return 275000;
      case 16: return 275000;
      case 17: return 275000;
      case 18: return 275000;
      case 19: return 275000;
      case 20: return 275000;
      case 21: return 275000;
      case 22: return 275000;
      case 23: return 275000;
      case 24: return 275000;
      case 25: return 275000;
      case 26: return 275000;
      case 27: return 275000;
      case 28: return 275000;
      case 29: return 275000;
      case 30: return 275000;
      case 31: return 3000;
      case 32: return 3000;
      case 33: return 1000;
      case 34: return 1000;
      case 35: return 0;
      case 36: return 1000;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 0;
      case 41: return 1;
      case 42: return 1;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 285000;
      case 3: return 285000;
      case 4: return 285000;
      case 5: return 285000;
      case 6: return 285000;
      case 7: return 285000;
      case 8: return 285000;
      case 9: return 285000;
      case 10: return 285000;
      case 11: return 285000;
      case 12: return 285000;
      case 13: return 285000;
      case 14: return 285000;
      case 15: return 285000;
      case 16: return 285000;
      case 17: return 285000;
      case 18: return 285000;
      case 19: return 285000;
      case 20: return 285000;
      case 21: return 285000;
      case 22: return 285000;
      case 23: return 285000;
      case 24: return 285000;
      case 25: return 285000;
      case 26: return 285000;
      case 27: return 285000;
      case 28: return 285000;
      case 29: return 285000;
      case 30: return 2000;
      case 31: return 2000;
      case 32: return 4000;
      case 33: return 1000;
      case 34: return 0;
      case 35: return 1000;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 296000;
      case 3: return 296000;
      case 4: return 296000;
      case 5: return 296000;
      case 6: return 296000;
      case 7: return 296000;
      case 8: return 296000;
      case 9: return 296000;
      case 10: return 296000;
      case 11: return 296000;
      case 12: return 296000;
      case 13: return 296000;
      case 14: return 296000;
      case 15: return 296000;
      case 16: return 296000;
      case 17: return 296000;
      case 18: return 296000;
      case 19: return 296000;
      case 20: return 296000;
      case 21: return 296000;
      case 22: return 296000;
      case 23: return 296000;
      case 24: return 296000;
      case 25: return 296000;
      case 26: return 296000;
      case 27: return 296000;
      case 28: return 296000;
      case 29: return 1000;
      case 30: return 1000;
      case 31: return 0;
      case 32: return 1000;
      case 33: return 0;
      case 34: return 1000;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 0;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 0;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 307000;
      case 3: return 307000;
      case 4: return 307000;
      case 5: return 307000;
      case 6: return 307000;
      case 7: return 307000;
      case 8: return 307000;
      case 9: return 307000;
      case 10: return 307000;
      case 11: return 307000;
      case 12: return 307000;
      case 13: return 307000;
      case 14: return 307000;
      case 15: return 307000;
      case 16: return 307000;
      case 17: return 307000;
      case 18: return 307000;
      case 19: return 307000;
      case 20: return 307000;
      case 21: return 307000;
      case 22: return 307000;
      case 23: return 307000;
      case 24: return 307000;
      case 25: return 307000;
      case 26: return 307000;
      case 27: return 307000;
      case 28: return 2000;
      case 29: return 2000;
      case 30: return 2000;
      case 31: return 1000;
      case 32: return 0;
      case 33: return 1000;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 0;
      case 38: return 1;
      case 39: return 1;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 320000;
      case 3: return 320000;
      case 4: return 320000;
      case 5: return 320000;
      case 6: return 320000;
      case 7: return 320000;
      case 8: return 320000;
      case 9: return 320000;
      case 10: return 320000;
      case 11: return 320000;
      case 12: return 320000;
      case 13: return 320000;
      case 14: return 320000;
      case 15: return 320000;
      case 16: return 320000;
      case 17: return 320000;
      case 18: return 320000;
      case 19: return 320000;
      case 20: return 320000;
      case 21: return 320000;
      case 22: return 320000;
      case 23: return 320000;
      case 24: return 320000;
      case 25: return 320000;
      case 26: return 320000;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1000;
      case 31: return 0;
      case 32: return 1000;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 1;
      case 38: return 1;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 333000;
      case 3: return 333000;
      case 4: return 333000;
      case 5: return 333000;
      case 6: return 333000;
      case 7: return 333000;
      case 8: return 333000;
      case 9: return 333000;
      case 10: return 333000;
      case 11: return 333000;
      case 12: return 333000;
      case 13: return 333000;
      case 14: return 333000;
      case 15: return 333000;
      case 16: return 333000;
      case 17: return 333000;
      case 18: return 333000;
      case 19: return 333000;
      case 20: return 333000;
      case 21: return 333000;
      case 22: return 333000;
      case 23: return 333000;
      case 24: return 333000;
      case 25: return 333000;
      case 26: return 1000;
      case 27: return 1000;
      case 28: return 0;
      case 29: return 1000;
      case 30: return 0;
      case 31: return 1000;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 1;
      case 37: return 1;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 347000;
      case 3: return 347000;
      case 4: return 347000;
      case 5: return 347000;
      case 6: return 347000;
      case 7: return 347000;
      case 8: return 347000;
      case 9: return 347000;
      case 10: return 347000;
      case 11: return 347000;
      case 12: return 347000;
      case 13: return 347000;
      case 14: return 347000;
      case 15: return 347000;
      case 16: return 347000;
      case 17: return 347000;
      case 18: return 347000;
      case 19: return 347000;
      case 20: return 347000;
      case 21: return 347000;
      case 22: return 347000;
      case 23: return 347000;
      case 24: return 347000;
      case 25: return 2000;
      case 26: return 2000;
      case 27: return 3000;
      case 28: return 1000;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 363000;
      case 3: return 363000;
      case 4: return 363000;
      case 5: return 363000;
      case 6: return 363000;
      case 7: return 363000;
      case 8: return 363000;
      case 9: return 363000;
      case 10: return 363000;
      case 11: return 363000;
      case 12: return 363000;
      case 13: return 363000;
      case 14: return 363000;
      case 15: return 363000;
      case 16: return 363000;
      case 17: return 363000;
      case 18: return 363000;
      case 19: return 363000;
      case 20: return 363000;
      case 21: return 363000;
      case 22: return 363000;
      case 23: return 363000;
      case 24: return 1000;
      case 25: return 1000;
      case 26: return 6000;
      case 27: return 1000;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 380000;
      case 3: return 380000;
      case 4: return 380000;
      case 5: return 380000;
      case 6: return 380000;
      case 7: return 380000;
      case 8: return 380000;
      case 9: return 380000;
      case 10: return 380000;
      case 11: return 380000;
      case 12: return 380000;
      case 13: return 380000;
      case 14: return 380000;
      case 15: return 380000;
      case 16: return 380000;
      case 17: return 380000;
      case 18: return 380000;
      case 19: return 380000;
      case 20: return 380000;
      case 21: return 380000;
      case 22: return 380000;
      case 23: return 2000;
      case 24: return 2000;
      case 25: return 4000;
      case 26: return 1000;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 400000;
      case 3: return 400000;
      case 4: return 400000;
      case 5: return 400000;
      case 6: return 400000;
      case 7: return 400000;
      case 8: return 400000;
      case 9: return 400000;
      case 10: return 400000;
      case 11: return 400000;
      case 12: return 400000;
      case 13: return 400000;
      case 14: return 400000;
      case 15: return 400000;
      case 16: return 400000;
      case 17: return 400000;
      case 18: return 400000;
      case 19: return 400000;
      case 20: return 400000;
      case 21: return 400000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1000;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 421000;
      case 3: return 421000;
      case 4: return 421000;
      case 5: return 421000;
      case 6: return 421000;
      case 7: return 421000;
      case 8: return 421000;
      case 9: return 421000;
      case 10: return 421000;
      case 11: return 421000;
      case 12: return 421000;
      case 13: return 421000;
      case 14: return 421000;
      case 15: return 421000;
      case 16: return 421000;
      case 17: return 421000;
      case 18: return 421000;
      case 19: return 421000;
      case 20: return 421000;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1000;
      case 24: return 1000;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 444000;
      case 3: return 444000;
      case 4: return 444000;
      case 5: return 444000;
      case 6: return 444000;
      case 7: return 444000;
      case 8: return 444000;
      case 9: return 444000;
      case 10: return 444000;
      case 11: return 444000;
      case 12: return 444000;
      case 13: return 444000;
      case 14: return 444000;
      case 15: return 444000;
      case 16: return 444000;
      case 17: return 444000;
      case 18: return 444000;
      case 19: return 444000;
      case 20: return 1000;
      case 21: return 1000;
      case 22: return 0;
      case 23: return 1000;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 470000;
      case 3: return 470000;
      case 4: return 470000;
      case 5: return 470000;
      case 6: return 470000;
      case 7: return 470000;
      case 8: return 470000;
      case 9: return 470000;
      case 10: return 470000;
      case 11: return 470000;
      case 12: return 470000;
      case 13: return 470000;
      case 14: return 470000;
      case 15: return 470000;
      case 16: return 470000;
      case 17: return 470000;
      case 18: return 470000;
      case 19: return 1000;
      case 20: return 1000;
      case 21: return 2000;
      case 22: return 1000;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 500000;
      case 5: return 500000;
      case 6: return 500000;
      case 7: return 500000;
      case 8: return 500000;
      case 9: return 500000;
      case 10: return 500000;
      case 11: return 500000;
      case 12: return 500000;
      case 13: return 500000;
      case 14: return 500000;
      case 15: return 500000;
      case 16: return 500000;
      case 17: return 500000;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 533000;
      case 3: return 533000;
      case 4: return 533000;
      case 5: return 533000;
      case 6: return 533000;
      case 7: return 533000;
      case 8: return 533000;
      case 9: return 533000;
      case 10: return 533000;
      case 11: return 533000;
      case 12: return 533000;
      case 13: return 533000;
      case 14: return 533000;
      case 15: return 533000;
      case 16: return 533000;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 5000;
      case 24: return 1000;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 1;
      case 38: return 1;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 571000;
      case 3: return 571000;
      case 4: return 571000;
      case 5: return 571000;
      case 6: return 571000;
      case 7: return 571000;
      case 8: return 571000;
      case 9: return 571000;
      case 10: return 571000;
      case 11: return 571000;
      case 12: return 571000;
      case 13: return 571000;
      case 14: return 571000;
      case 15: return 571000;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 6000;
      case 23: return 1000;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 1;
      case 37: return 1;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 615000;
      case 3: return 615000;
      case 4: return 615000;
      case 5: return 615000;
      case 6: return 615000;
      case 7: return 615000;
      case 8: return 615000;
      case 9: return 615000;
      case 10: return 615000;
      case 11: return 615000;
      case 12: return 615000;
      case 13: return 615000;
      case 14: return 615000;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 5000;
      case 22: return 1000;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 666000;
      case 3: return 666000;
      case 4: return 666000;
      case 5: return 666000;
      case 6: return 666000;
      case 7: return 666000;
      case 8: return 666000;
      case 9: return 666000;
      case 10: return 666000;
      case 11: return 666000;
      case 12: return 666000;
      case 13: return 666000;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 1000;
      case 19: return 1000;
      case 20: return 0;
      case 21: return 1000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 727000;
      case 3: return 727000;
      case 4: return 727000;
      case 5: return 727000;
      case 6: return 727000;
      case 7: return 727000;
      case 8: return 727000;
      case 9: return 727000;
      case 10: return 727000;
      case 11: return 727000;
      case 12: return 727000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 3000;
      case 20: return 1000;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 800000;
      case 3: return 800000;
      case 4: return 800000;
      case 5: return 800000;
      case 6: return 800000;
      case 7: return 800000;
      case 8: return 800000;
      case 9: return 800000;
      case 10: return 800000;
      case 11: return 800000;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1000;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 888000;
      case 3: return 888000;
      case 4: return 888000;
      case 5: return 888000;
      case 6: return 888000;
      case 7: return 888000;
      case 8: return 888000;
      case 9: return 888000;
      case 10: return 888000;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 1000;
      case 16: return 1000;
      case 17: return 0;
      case 18: return 1000;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 1000;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1142000;
      case 3: return 1142000;
      case 4: return 1142000;
      case 5: return 1142000;
      case 6: return 1142000;
      case 7: return 1142000;
      case 8: return 1142000;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 6000;
      case 16: return 1000;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1333000;
      case 3: return 1333000;
      case 4: return 1333000;
      case 5: return 1333000;
      case 6: return 1333000;
      case 7: return 1333000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 2000;
      case 15: return 1000;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1600000;
      case 3: return 1600000;
      case 4: return 1600000;
      case 5: return 1600000;
      case 6: return 1600000;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 1000;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1000;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2666000;
      case 3: return 2666000;
      case 4: return 2666000;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 2000;
      case 12: return 1000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 1000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 250000;
      case 5: return 250000;
      case 6: return 250000;
      case 7: return 250000;
      case 8: return 250000;
      case 9: return 250000;
      case 10: return 250000;
      case 11: return 250000;
      case 12: return 250000;
      case 13: return 250000;
      case 14: return 250000;
      case 15: return 250000;
      case 16: return 250000;
      case 17: return 250000;
      case 18: return 250000;
      case 19: return 250000;
      case 20: return 250000;
      case 21: return 250000;
      case 22: return 250000;
      case 23: return 250000;
      case 24: return 250000;
      case 25: return 250000;
      case 26: return 250000;
      case 27: return 250000;
      case 28: return 250000;
      case 29: return 250000;
      case 30: return 250000;
      case 31: return 250000;
      case 32: return 250000;
      case 33: return 250000;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 1000;
      case 38: return 0;
      case 39: return 1000;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 0;
      case 44: return 1;
      case 45: return 1;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 258000;
      case 3: return 258000;
      case 4: return 258000;
      case 5: return 258000;
      case 6: return 258000;
      case 7: return 258000;
      case 8: return 258000;
      case 9: return 258000;
      case 10: return 258000;
      case 11: return 258000;
      case 12: return 258000;
      case 13: return 258000;
      case 14: return 258000;
      case 15: return 258000;
      case 16: return 258000;
      case 17: return 258000;
      case 18: return 258000;
      case 19: return 258000;
      case 20: return 258000;
      case 21: return 258000;
      case 22: return 258000;
      case 23: return 258000;
      case 24: return 258000;
      case 25: return 258000;
      case 26: return 258000;
      case 27: return 258000;
      case 28: return 258000;
      case 29: return 258000;
      case 30: return 258000;
      case 31: return 258000;
      case 32: return 258000;
      case 33: return 0;
      case 34: return 0;
      case 35: return 2000;
      case 36: return 1000;
      case 37: return 0;
      case 38: return 1000;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 0;
      case 43: return 1;
      case 44: return 1;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 1;
      case 50: return 1;
      case 51: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 266000;
      case 3: return 266000;
      case 4: return 266000;
      case 5: return 266000;
      case 6: return 266000;
      case 7: return 266000;
      case 8: return 266000;
      case 9: return 266000;
      case 10: return 266000;
      case 11: return 266000;
      case 12: return 266000;
      case 13: return 266000;
      case 14: return 266000;
      case 15: return 266000;
      case 16: return 266000;
      case 17: return 266000;
      case 18: return 266000;
      case 19: return 266000;
      case 20: return 266000;
      case 21: return 266000;
      case 22: return 266000;
      case 23: return 266000;
      case 24: return 266000;
      case 25: return 266000;
      case 26: return 266000;
      case 27: return 266000;
      case 28: return 266000;
      case 29: return 266000;
      case 30: return 266000;
      case 31: return 266000;
      case 32: return 2000;
      case 33: return 2000;
      case 34: return 4000;
      case 35: return 1000;
      case 36: return 0;
      case 37: return 1000;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      case 41: return 0;
      case 42: return 1;
      case 43: return 1;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 1;
      case 49: return 1;
      case 50: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 275000;
      case 3: return 275000;
      case 4: return 275000;
      case 5: return 275000;
      case 6: return 275000;
      case 7: return 275000;
      case 8: return 275000;
      case 9: return 275000;
      case 10: return 275000;
      case 11: return 275000;
      case 12: return 275000;
      case 13: return 275000;
      case 14: return 275000;
      case 15: return 275000;
      case 16: return 275000;
      case 17: return 275000;
      case 18: return 275000;
      case 19: return 275000;
      case 20: return 275000;
      case 21: return 275000;
      case 22: return 275000;
      case 23: return 275000;
      case 24: return 275000;
      case 25: return 275000;
      case 26: return 275000;
      case 27: return 275000;
      case 28: return 275000;
      case 29: return 275000;
      case 30: return 275000;
      case 31: return 3000;
      case 32: return 3000;
      case 33: return 1000;
      case 34: return 1000;
      case 35: return 0;
      case 36: return 1000;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 0;
      case 41: return 1;
      case 42: return 1;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 285000;
      case 3: return 285000;
      case 4: return 285000;
      case 5: return 285000;
      case 6: return 285000;
      case 7: return 285000;
      case 8: return 285000;
      case 9: return 285000;
      case 10: return 285000;
      case 11: return 285000;
      case 12: return 285000;
      case 13: return 285000;
      case 14: return 285000;
      case 15: return 285000;
      case 16: return 285000;
      case 17: return 285000;
      case 18: return 285000;
      case 19: return 285000;
      case 20: return 285000;
      case 21: return 285000;
      case 22: return 285000;
      case 23: return 285000;
      case 24: return 285000;
      case 25: return 285000;
      case 26: return 285000;
      case 27: return 285000;
      case 28: return 285000;
      case 29: return 285000;
      case 30: return 2000;
      case 31: return 2000;
      case 32: return 4000;
      case 33: return 1000;
      case 34: return 0;
      case 35: return 1000;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 296000;
      case 3: return 296000;
      case 4: return 296000;
      case 5: return 296000;
      case 6: return 296000;
      case 7: return 296000;
      case 8: return 296000;
      case 9: return 296000;
      case 10: return 296000;
      case 11: return 296000;
      case 12: return 296000;
      case 13: return 296000;
      case 14: return 296000;
      case 15: return 296000;
      case 16: return 296000;
      case 17: return 296000;
      case 18: return 296000;
      case 19: return 296000;
      case 20: return 296000;
      case 21: return 296000;
      case 22: return 296000;
      case 23: return 296000;
      case 24: return 296000;
      case 25: return 296000;
      case 26: return 296000;
      case 27: return 296000;
      case 28: return 296000;
      case 29: return 1000;
      case 30: return 1000;
      case 31: return 0;
      case 32: return 1000;
      case 33: return 0;
      case 34: return 1000;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 0;
      case 39: return 1;
      case 40: return 1;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 307000;
      case 3: return 307000;
      case 4: return 307000;
      case 5: return 307000;
      case 6: return 307000;
      case 7: return 307000;
      case 8: return 307000;
      case 9: return 307000;
      case 10: return 307000;
      case 11: return 307000;
      case 12: return 307000;
      case 13: return 307000;
      case 14: return 307000;
      case 15: return 307000;
      case 16: return 307000;
      case 17: return 307000;
      case 18: return 307000;
      case 19: return 307000;
      case 20: return 307000;
      case 21: return 307000;
      case 22: return 307000;
      case 23: return 307000;
      case 24: return 307000;
      case 25: return 307000;
      case 26: return 307000;
      case 27: return 307000;
      case 28: return 2000;
      case 29: return 2000;
      case 30: return 2000;
      case 31: return 1000;
      case 32: return 0;
      case 33: return 1000;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 0;
      case 38: return 1;
      case 39: return 1;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 320000;
      case 3: return 320000;
      case 4: return 320000;
      case 5: return 320000;
      case 6: return 320000;
      case 7: return 320000;
      case 8: return 320000;
      case 9: return 320000;
      case 10: return 320000;
      case 11: return 320000;
      case 12: return 320000;
      case 13: return 320000;
      case 14: return 320000;
      case 15: return 320000;
      case 16: return 320000;
      case 17: return 320000;
      case 18: return 320000;
      case 19: return 320000;
      case 20: return 320000;
      case 21: return 320000;
      case 22: return 320000;
      case 23: return 320000;
      case 24: return 320000;
      case 25: return 320000;
      case 26: return 320000;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1000;
      case 31: return 0;
      case 32: return 1000;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 0;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 333000;
      case 3: return 333000;
      case 4: return 333000;
      case 5: return 333000;
      case 6: return 333000;
      case 7: return 333000;
      case 8: return 333000;
      case 9: return 333000;
      case 10: return 333000;
      case 11: return 333000;
      case 12: return 333000;
      case 13: return 333000;
      case 14: return 333000;
      case 15: return 333000;
      case 16: return 333000;
      case 17: return 333000;
      case 18: return 333000;
      case 19: return 333000;
      case 20: return 333000;
      case 21: return 333000;
      case 22: return 333000;
      case 23: return 333000;
      case 24: return 333000;
      case 25: return 333000;
      case 26: return 1000;
      case 27: return 1000;
      case 28: return 0;
      case 29: return 1000;
      case 30: return 0;
      case 31: return 1000;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 1;
      case 37: return 1;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 347000;
      case 3: return 347000;
      case 4: return 347000;
      case 5: return 347000;
      case 6: return 347000;
      case 7: return 347000;
      case 8: return 347000;
      case 9: return 347000;
      case 10: return 347000;
      case 11: return 347000;
      case 12: return 347000;
      case 13: return 347000;
      case 14: return 347000;
      case 15: return 347000;
      case 16: return 347000;
      case 17: return 347000;
      case 18: return 347000;
      case 19: return 347000;
      case 20: return 347000;
      case 21: return 347000;
      case 22: return 347000;
      case 23: return 347000;
      case 24: return 347000;
      case 25: return 2000;
      case 26: return 2000;
      case 27: return 3000;
      case 28: return 1000;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 363000;
      case 3: return 363000;
      case 4: return 363000;
      case 5: return 363000;
      case 6: return 363000;
      case 7: return 363000;
      case 8: return 363000;
      case 9: return 363000;
      case 10: return 363000;
      case 11: return 363000;
      case 12: return 363000;
      case 13: return 363000;
      case 14: return 363000;
      case 15: return 363000;
      case 16: return 363000;
      case 17: return 363000;
      case 18: return 363000;
      case 19: return 363000;
      case 20: return 363000;
      case 21: return 363000;
      case 22: return 363000;
      case 23: return 363000;
      case 24: return 1000;
      case 25: return 1000;
      case 26: return 6000;
      case 27: return 1000;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 380000;
      case 3: return 380000;
      case 4: return 380000;
      case 5: return 380000;
      case 6: return 380000;
      case 7: return 380000;
      case 8: return 380000;
      case 9: return 380000;
      case 10: return 380000;
      case 11: return 380000;
      case 12: return 380000;
      case 13: return 380000;
      case 14: return 380000;
      case 15: return 380000;
      case 16: return 380000;
      case 17: return 380000;
      case 18: return 380000;
      case 19: return 380000;
      case 20: return 380000;
      case 21: return 380000;
      case 22: return 380000;
      case 23: return 2000;
      case 24: return 2000;
      case 25: return 4000;
      case 26: return 1000;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 400000;
      case 3: return 400000;
      case 4: return 400000;
      case 5: return 400000;
      case 6: return 400000;
      case 7: return 400000;
      case 8: return 400000;
      case 9: return 400000;
      case 10: return 400000;
      case 11: return 400000;
      case 12: return 400000;
      case 13: return 400000;
      case 14: return 400000;
      case 15: return 400000;
      case 16: return 400000;
      case 17: return 400000;
      case 18: return 400000;
      case 19: return 400000;
      case 20: return 400000;
      case 21: return 400000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1000;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 421000;
      case 3: return 421000;
      case 4: return 421000;
      case 5: return 421000;
      case 6: return 421000;
      case 7: return 421000;
      case 8: return 421000;
      case 9: return 421000;
      case 10: return 421000;
      case 11: return 421000;
      case 12: return 421000;
      case 13: return 421000;
      case 14: return 421000;
      case 15: return 421000;
      case 16: return 421000;
      case 17: return 421000;
      case 18: return 421000;
      case 19: return 421000;
      case 20: return 421000;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1000;
      case 24: return 1000;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 444000;
      case 3: return 444000;
      case 4: return 444000;
      case 5: return 444000;
      case 6: return 444000;
      case 7: return 444000;
      case 8: return 444000;
      case 9: return 444000;
      case 10: return 444000;
      case 11: return 444000;
      case 12: return 444000;
      case 13: return 444000;
      case 14: return 444000;
      case 15: return 444000;
      case 16: return 444000;
      case 17: return 444000;
      case 18: return 444000;
      case 19: return 444000;
      case 20: return 1000;
      case 21: return 1000;
      case 22: return 0;
      case 23: return 1000;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 470000;
      case 3: return 470000;
      case 4: return 470000;
      case 5: return 470000;
      case 6: return 470000;
      case 7: return 470000;
      case 8: return 470000;
      case 9: return 470000;
      case 10: return 470000;
      case 11: return 470000;
      case 12: return 470000;
      case 13: return 470000;
      case 14: return 470000;
      case 15: return 470000;
      case 16: return 470000;
      case 17: return 470000;
      case 18: return 470000;
      case 19: return 1000;
      case 20: return 1000;
      case 21: return 2000;
      case 22: return 1000;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 500000;
      case 5: return 500000;
      case 6: return 500000;
      case 7: return 500000;
      case 8: return 500000;
      case 9: return 500000;
      case 10: return 500000;
      case 11: return 500000;
      case 12: return 500000;
      case 13: return 500000;
      case 14: return 500000;
      case 15: return 500000;
      case 16: return 500000;
      case 17: return 500000;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 533000;
      case 3: return 533000;
      case 4: return 533000;
      case 5: return 533000;
      case 6: return 533000;
      case 7: return 533000;
      case 8: return 533000;
      case 9: return 533000;
      case 10: return 533000;
      case 11: return 533000;
      case 12: return 533000;
      case 13: return 533000;
      case 14: return 533000;
      case 15: return 533000;
      case 16: return 533000;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 5000;
      case 24: return 1000;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 0;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 571000;
      case 3: return 571000;
      case 4: return 571000;
      case 5: return 571000;
      case 6: return 571000;
      case 7: return 571000;
      case 8: return 571000;
      case 9: return 571000;
      case 10: return 571000;
      case 11: return 571000;
      case 12: return 571000;
      case 13: return 571000;
      case 14: return 571000;
      case 15: return 571000;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 6000;
      case 23: return 1000;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 1;
      case 37: return 1;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 615000;
      case 3: return 615000;
      case 4: return 615000;
      case 5: return 615000;
      case 6: return 615000;
      case 7: return 615000;
      case 8: return 615000;
      case 9: return 615000;
      case 10: return 615000;
      case 11: return 615000;
      case 12: return 615000;
      case 13: return 615000;
      case 14: return 615000;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 5000;
      case 22: return 1000;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 666000;
      case 3: return 666000;
      case 4: return 666000;
      case 5: return 666000;
      case 6: return 666000;
      case 7: return 666000;
      case 8: return 666000;
      case 9: return 666000;
      case 10: return 666000;
      case 11: return 666000;
      case 12: return 666000;
      case 13: return 666000;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 1000;
      case 19: return 1000;
      case 20: return 0;
      case 21: return 1000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 727000;
      case 3: return 727000;
      case 4: return 727000;
      case 5: return 727000;
      case 6: return 727000;
      case 7: return 727000;
      case 8: return 727000;
      case 9: return 727000;
      case 10: return 727000;
      case 11: return 727000;
      case 12: return 727000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 3000;
      case 20: return 1000;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 800000;
      case 3: return 800000;
      case 4: return 800000;
      case 5: return 800000;
      case 6: return 800000;
      case 7: return 800000;
      case 8: return 800000;
      case 9: return 800000;
      case 10: return 800000;
      case 11: return 800000;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1000;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 888000;
      case 3: return 888000;
      case 4: return 888000;
      case 5: return 888000;
      case 6: return 888000;
      case 7: return 888000;
      case 8: return 888000;
      case 9: return 888000;
      case 10: return 888000;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 1000;
      case 16: return 1000;
      case 17: return 0;
      case 18: return 1000;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 1000;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1142000;
      case 3: return 1142000;
      case 4: return 1142000;
      case 5: return 1142000;
      case 6: return 1142000;
      case 7: return 1142000;
      case 8: return 1142000;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 6000;
      case 16: return 1000;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1333000;
      case 3: return 1333000;
      case 4: return 1333000;
      case 5: return 1333000;
      case 6: return 1333000;
      case 7: return 1333000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 2000;
      case 15: return 1000;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1600000;
      case 3: return 1600000;
      case 4: return 1600000;
      case 5: return 1600000;
      case 6: return 1600000;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 1000;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1000;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2666000;
      case 3: return 2666000;
      case 4: return 2666000;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 2000;
      case 12: return 1000;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 1000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 62500;
      case 4: return 62500;
      case 5: return 62500;
      case 6: return 62500;
      case 7: return 62500;
      case 8: return 62500;
      case 9: return 62500;
      case 10: return 62500;
      case 11: return 62500;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 250;
      case 17: return 0;
      case 18: return 250;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 64500;
      case 4: return 64500;
      case 5: return 64500;
      case 6: return 64500;
      case 7: return 64500;
      case 8: return 64500;
      case 9: return 64500;
      case 10: return 64500;
      case 11: return 0;
      case 12: return 250;
      case 13: return 250;
      case 14: return 250;
      case 15: return 250;
      case 16: return 0;
      case 17: return 250;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 66500;
      case 4: return 66500;
      case 5: return 66500;
      case 6: return 66500;
      case 7: return 66500;
      case 8: return 66500;
      case 9: return 66500;
      case 10: return 0;
      case 11: return 2500;
      case 12: return 2500;
      case 13: return 250;
      case 14: return 250;
      case 15: return 0;
      case 16: return 250;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 68750;
      case 4: return 68750;
      case 5: return 68750;
      case 6: return 68750;
      case 7: return 68750;
      case 8: return 68750;
      case 9: return 250;
      case 10: return 3000;
      case 11: return 3000;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 250;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 71250;
      case 4: return 71250;
      case 5: return 71250;
      case 6: return 71250;
      case 7: return 71250;
      case 8: return 0;
      case 9: return 2500;
      case 10: return 2500;
      case 11: return 250;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 1000;
      case 7: return 1000;
      case 8: return 74000;
      case 9: return 74000;
      case 10: return 74000;
      case 11: return 74000;
      case 12: return 0;
      case 13: return 250;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 2250;
      case 7: return 2250;
      case 8: return 76750;
      case 9: return 76750;
      case 10: return 76750;
      case 11: return 0;
      case 12: return 250;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 0;
      case 7: return 0;
      case 8: return 250;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 83250;
      case 4: return 83250;
      case 5: return 83250;
      case 6: return 83250;
      case 7: return 83250;
      case 8: return 83250;
      case 9: return 83250;
      case 10: return 83250;
      case 11: return 83250;
      case 12: return 0;
      case 13: return 1000;
      case 14: return 1000;
      case 15: return 250;
      case 16: return 250;
      case 17: return 0;
      case 18: return 250;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 86750;
      case 4: return 86750;
      case 5: return 86750;
      case 6: return 86750;
      case 7: return 86750;
      case 8: return 86750;
      case 9: return 86750;
      case 10: return 86750;
      case 11: return 250;
      case 12: return 2250;
      case 13: return 2250;
      case 14: return 250;
      case 15: return 250;
      case 16: return 0;
      case 17: return 250;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 90750;
      case 4: return 90750;
      case 5: return 90750;
      case 6: return 90750;
      case 7: return 90750;
      case 8: return 90750;
      case 9: return 90750;
      case 10: return 0;
      case 11: return 1750;
      case 12: return 1750;
      case 13: return 250;
      case 14: return 250;
      case 15: return 0;
      case 16: return 250;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 95000;
      case 4: return 95000;
      case 5: return 95000;
      case 6: return 95000;
      case 7: return 95000;
      case 8: return 95000;
      case 9: return 0;
      case 10: return 2500;
      case 11: return 2500;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 250;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 100000;
      case 4: return 100000;
      case 5: return 100000;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 0;
      case 7: return 0;
      case 8: return 105250;
      case 9: return 105250;
      case 10: return 105250;
      case 11: return 105250;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 1000;
      case 7: return 1000;
      case 8: return 111000;
      case 9: return 111000;
      case 10: return 111000;
      case 11: return 0;
      case 12: return 250;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 1250;
      case 7: return 1250;
      case 8: return 250;
      case 9: return 0;
      case 10: return 250;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 125000;
      case 4: return 125000;
      case 5: return 125000;
      case 6: return 125000;
      case 7: return 125000;
      case 8: return 125000;
      case 9: return 125000;
      case 10: return 125000;
      case 11: return 125000;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 250;
      case 17: return 0;
      case 18: return 250;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 133250;
      case 4: return 133250;
      case 5: return 133250;
      case 6: return 133250;
      case 7: return 133250;
      case 8: return 133250;
      case 9: return 133250;
      case 10: return 133250;
      case 11: return 250;
      case 12: return 500;
      case 13: return 500;
      case 14: return 250;
      case 15: return 250;
      case 16: return 0;
      case 17: return 250;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 142750;
      case 4: return 142750;
      case 5: return 142750;
      case 6: return 142750;
      case 7: return 142750;
      case 8: return 142750;
      case 9: return 142750;
      case 10: return 0;
      case 11: return 750;
      case 12: return 750;
      case 13: return 250;
      case 14: return 250;
      case 15: return 0;
      case 16: return 250;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 153750;
      case 4: return 153750;
      case 5: return 153750;
      case 6: return 153750;
      case 7: return 153750;
      case 8: return 153750;
      case 9: return 250;
      case 10: return 500;
      case 11: return 500;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 250;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 166500;
      case 4: return 166500;
      case 5: return 166500;
      case 6: return 166500;
      case 7: return 166500;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 1000;
      case 11: return 250;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 250;
      case 7: return 250;
      case 8: return 181750;
      case 9: return 181750;
      case 10: return 181750;
      case 11: return 181750;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 0;
      case 7: return 0;
      case 8: return 200000;
      case 9: return 200000;
      case 10: return 200000;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 1000;
      case 7: return 1000;
      case 8: return 250;
      case 9: return 0;
      case 10: return 250;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 250000;
      case 5: return 250000;
      case 6: return 250000;
      case 7: return 250000;
      case 8: return 250000;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 285500;
      case 3: return 285500;
      case 4: return 285500;
      case 5: return 285500;
      case 6: return 285500;
      case 7: return 285500;
      case 8: return 0;
      case 9: return 750;
      case 10: return 750;
      case 11: return 250;
      case 12: return 0;
      case 13: return 0;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 333250;
      case 3: return 333250;
      case 4: return 333250;
      case 5: return 333250;
      case 6: return 333250;
      case 7: return 0;
      case 8: return 250;
      case 9: return 250;
      case 10: return 250;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 400000;
      case 3: return 400000;
      case 4: return 400000;
      case 5: return 400000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 250;
      case 10: return 0;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 500000;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 250;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 0;
      case 4: return 0;
      case 5: return 250;
      case 6: return 250;
      case 7: return 666500;
      case 8: return 666500;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000000;
      case 8: return 1000000;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 250;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN15loop_inner_bodyILi9EdE7do_workERdPKdi") {
      switch(AccessId) {
      case 0: return 10715000;
      case 1: return 10715000;
      case 2: return 10715000;
      case 3: return 10715000;
      case 4: return 10715000;
      case 5: return 10715000;
      case 6: return 10715000;
      case 7: return 10715000;
      case 8: return 10715000;
      case 9: return 10715000;
      case 10: return 10715000;
      case 11: return 10715000;
      case 12: return 10715000;
      case 13: return 10715000;
      case 14: return 10715000;
      case 15: return 10715000;
      case 16: return 10715000;
      case 17: return 10715000;
      case 18: return 10715000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN15loop_inner_bodyILi17EdE7do_workERdPKdi") {
      switch(AccessId) {
      case 0: return 5415000;
      case 1: return 5415000;
      case 2: return 5415000;
      case 3: return 5415000;
      case 4: return 5415000;
      case 5: return 5415000;
      case 6: return 5415000;
      case 7: return 5415000;
      case 8: return 5415000;
      case 9: return 5415000;
      case 10: return 5415000;
      case 11: return 5415000;
      case 12: return 5415000;
      case 13: return 5415000;
      case 14: return 5415000;
      case 15: return 5415000;
      case 16: return 5415000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN15loop_inner_bodyILi25EdE7do_workERdPKdi") {
      switch(AccessId) {
      case 0: return 2257000;
      case 1: return 2257000;
      case 2: return 2257000;
      case 3: return 2257000;
      case 4: return 2257000;
      case 5: return 2257000;
      case 6: return 2257000;
      case 7: return 2257000;
      case 8: return 2257000;
      case 9: return 2257000;
      case 10: return 2257000;
      case 11: return 2257000;
      case 12: return 2257000;
      case 13: return 2257000;
      case 14: return 2257000;
      case 15: return 2257000;
      case 16: return 2257000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 62500;
      case 4: return 62500;
      case 5: return 62500;
      case 6: return 62500;
      case 7: return 62500;
      case 8: return 62500;
      case 9: return 62500;
      case 10: return 62500;
      case 11: return 62500;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 250;
      case 17: return 0;
      case 18: return 250;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 64500;
      case 4: return 64500;
      case 5: return 64500;
      case 6: return 64500;
      case 7: return 64500;
      case 8: return 64500;
      case 9: return 64500;
      case 10: return 64500;
      case 11: return 0;
      case 12: return 250;
      case 13: return 250;
      case 14: return 250;
      case 15: return 250;
      case 16: return 0;
      case 17: return 250;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 66500;
      case 4: return 66500;
      case 5: return 66500;
      case 6: return 66500;
      case 7: return 66500;
      case 8: return 66500;
      case 9: return 66500;
      case 10: return 0;
      case 11: return 2500;
      case 12: return 2500;
      case 13: return 250;
      case 14: return 250;
      case 15: return 0;
      case 16: return 250;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 68750;
      case 4: return 68750;
      case 5: return 68750;
      case 6: return 68750;
      case 7: return 68750;
      case 8: return 68750;
      case 9: return 250;
      case 10: return 3000;
      case 11: return 3000;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 250;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 71250;
      case 4: return 71250;
      case 5: return 71250;
      case 6: return 71250;
      case 7: return 71250;
      case 8: return 0;
      case 9: return 2500;
      case 10: return 2500;
      case 11: return 250;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 1000;
      case 7: return 1000;
      case 8: return 74000;
      case 9: return 74000;
      case 10: return 74000;
      case 11: return 74000;
      case 12: return 0;
      case 13: return 250;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 2250;
      case 7: return 2250;
      case 8: return 76750;
      case 9: return 76750;
      case 10: return 76750;
      case 11: return 0;
      case 12: return 250;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 0;
      case 7: return 0;
      case 8: return 250;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 83250;
      case 4: return 83250;
      case 5: return 83250;
      case 6: return 83250;
      case 7: return 83250;
      case 8: return 83250;
      case 9: return 83250;
      case 10: return 83250;
      case 11: return 83250;
      case 12: return 0;
      case 13: return 1000;
      case 14: return 1000;
      case 15: return 250;
      case 16: return 250;
      case 17: return 0;
      case 18: return 250;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 86750;
      case 4: return 86750;
      case 5: return 86750;
      case 6: return 86750;
      case 7: return 86750;
      case 8: return 86750;
      case 9: return 86750;
      case 10: return 86750;
      case 11: return 250;
      case 12: return 2250;
      case 13: return 2250;
      case 14: return 250;
      case 15: return 250;
      case 16: return 0;
      case 17: return 250;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 90750;
      case 4: return 90750;
      case 5: return 90750;
      case 6: return 90750;
      case 7: return 90750;
      case 8: return 90750;
      case 9: return 90750;
      case 10: return 0;
      case 11: return 1750;
      case 12: return 1750;
      case 13: return 250;
      case 14: return 250;
      case 15: return 0;
      case 16: return 250;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 95000;
      case 4: return 95000;
      case 5: return 95000;
      case 6: return 95000;
      case 7: return 95000;
      case 8: return 95000;
      case 9: return 0;
      case 10: return 2500;
      case 11: return 2500;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 250;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 100000;
      case 4: return 100000;
      case 5: return 100000;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 0;
      case 7: return 0;
      case 8: return 105250;
      case 9: return 105250;
      case 10: return 105250;
      case 11: return 105250;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 1000;
      case 7: return 1000;
      case 8: return 111000;
      case 9: return 111000;
      case 10: return 111000;
      case 11: return 0;
      case 12: return 250;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 1250;
      case 7: return 1250;
      case 8: return 250;
      case 9: return 0;
      case 10: return 250;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 125000;
      case 4: return 125000;
      case 5: return 125000;
      case 6: return 125000;
      case 7: return 125000;
      case 8: return 125000;
      case 9: return 125000;
      case 10: return 125000;
      case 11: return 125000;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 250;
      case 17: return 0;
      case 18: return 250;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 133250;
      case 4: return 133250;
      case 5: return 133250;
      case 6: return 133250;
      case 7: return 133250;
      case 8: return 133250;
      case 9: return 133250;
      case 10: return 133250;
      case 11: return 250;
      case 12: return 500;
      case 13: return 500;
      case 14: return 250;
      case 15: return 250;
      case 16: return 0;
      case 17: return 250;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 142750;
      case 4: return 142750;
      case 5: return 142750;
      case 6: return 142750;
      case 7: return 142750;
      case 8: return 142750;
      case 9: return 142750;
      case 10: return 0;
      case 11: return 750;
      case 12: return 750;
      case 13: return 250;
      case 14: return 250;
      case 15: return 0;
      case 16: return 250;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 153750;
      case 4: return 153750;
      case 5: return 153750;
      case 6: return 153750;
      case 7: return 153750;
      case 8: return 153750;
      case 9: return 250;
      case 10: return 500;
      case 11: return 500;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 250;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 166500;
      case 4: return 166500;
      case 5: return 166500;
      case 6: return 166500;
      case 7: return 166500;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 1000;
      case 11: return 250;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 250;
      case 7: return 250;
      case 8: return 181750;
      case 9: return 181750;
      case 10: return 181750;
      case 11: return 181750;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 0;
      case 7: return 0;
      case 8: return 200000;
      case 9: return 200000;
      case 10: return 200000;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 250;
      case 4: return 0;
      case 5: return 250;
      case 6: return 1000;
      case 7: return 1000;
      case 8: return 250;
      case 9: return 0;
      case 10: return 250;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 250000;
      case 5: return 250000;
      case 6: return 250000;
      case 7: return 250000;
      case 8: return 250000;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 285500;
      case 3: return 285500;
      case 4: return 285500;
      case 5: return 285500;
      case 6: return 285500;
      case 7: return 285500;
      case 8: return 0;
      case 9: return 750;
      case 10: return 750;
      case 11: return 250;
      case 12: return 0;
      case 13: return 0;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 333250;
      case 3: return 333250;
      case 4: return 333250;
      case 5: return 333250;
      case 6: return 333250;
      case 7: return 0;
      case 8: return 250;
      case 9: return 250;
      case 10: return 250;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 400000;
      case 3: return 400000;
      case 4: return 400000;
      case 5: return 400000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 250;
      case 10: return 0;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 500000;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 250;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 0;
      case 4: return 0;
      case 5: return 250;
      case 6: return 250;
      case 7: return 666500;
      case 8: return 666500;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000000;
      case 8: return 1000000;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 250;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 62500;
      case 4: return 62500;
      case 5: return 62500;
      case 6: return 62500;
      case 7: return 62500;
      case 8: return 62500;
      case 9: return 62500;
      case 10: return 62500;
      case 11: return 62500;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 250;
      case 17: return 0;
      case 18: return 250;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 64500;
      case 4: return 64500;
      case 5: return 64500;
      case 6: return 64500;
      case 7: return 64500;
      case 8: return 64500;
      case 9: return 64500;
      case 10: return 64500;
      case 11: return 0;
      case 12: return 250;
      case 13: return 250;
      case 14: return 250;
      case 15: return 250;
      case 16: return 0;
      case 17: return 250;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 66500;
      case 4: return 66500;
      case 5: return 66500;
      case 6: return 66500;
      case 7: return 66500;
      case 8: return 66500;
      case 9: return 66500;
      case 10: return 0;
      case 11: return 2500;
      case 12: return 2500;
      case 13: return 250;
      case 14: return 250;
      case 15: return 0;
      case 16: return 250;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 68750;
      case 4: return 68750;
      case 5: return 68750;
      case 6: return 68750;
      case 7: return 68750;
      case 8: return 68750;
      case 9: return 250;
      case 10: return 3000;
      case 11: return 3000;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 250;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 71250;
      case 4: return 71250;
      case 5: return 71250;
      case 6: return 71250;
      case 7: return 71250;
      case 8: return 0;
      case 9: return 2500;
      case 10: return 2500;
      case 11: return 250;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 74000;
      case 4: return 74000;
      case 5: return 74000;
      case 6: return 74000;
      case 7: return 0;
      case 8: return 1000;
      case 9: return 1000;
      case 10: return 250;
      case 11: return 0;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 76750;
      case 4: return 76750;
      case 5: return 76750;
      case 6: return 0;
      case 7: return 2250;
      case 8: return 2250;
      case 9: return 250;
      case 10: return 0;
      case 11: return 250;
      case 12: return 250;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 250;
      case 7: return 0;
      case 8: return 250;
      case 9: return 0;
      case 10: return 250;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 83250;
      case 4: return 83250;
      case 5: return 83250;
      case 6: return 83250;
      case 7: return 83250;
      case 8: return 83250;
      case 9: return 83250;
      case 10: return 83250;
      case 11: return 83250;
      case 12: return 0;
      case 13: return 1000;
      case 14: return 1000;
      case 15: return 250;
      case 16: return 250;
      case 17: return 0;
      case 18: return 250;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 86750;
      case 4: return 86750;
      case 5: return 86750;
      case 6: return 86750;
      case 7: return 86750;
      case 8: return 86750;
      case 9: return 86750;
      case 10: return 86750;
      case 11: return 250;
      case 12: return 2250;
      case 13: return 2250;
      case 14: return 250;
      case 15: return 250;
      case 16: return 0;
      case 17: return 250;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 90750;
      case 4: return 90750;
      case 5: return 90750;
      case 6: return 90750;
      case 7: return 90750;
      case 8: return 90750;
      case 9: return 90750;
      case 10: return 0;
      case 11: return 1750;
      case 12: return 1750;
      case 13: return 250;
      case 14: return 250;
      case 15: return 0;
      case 16: return 250;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 95000;
      case 4: return 95000;
      case 5: return 95000;
      case 6: return 95000;
      case 7: return 95000;
      case 8: return 95000;
      case 9: return 0;
      case 10: return 2500;
      case 11: return 2500;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 250;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 100000;
      case 4: return 100000;
      case 5: return 100000;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 105250;
      case 4: return 105250;
      case 5: return 105250;
      case 6: return 105250;
      case 7: return 250;
      case 8: return 0;
      case 9: return 0;
      case 10: return 250;
      case 11: return 0;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 111000;
      case 4: return 111000;
      case 5: return 111000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 1000;
      case 9: return 250;
      case 10: return 0;
      case 11: return 250;
      case 12: return 250;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 0;
      case 4: return 1250;
      case 5: return 1250;
      case 6: return 250;
      case 7: return 0;
      case 8: return 250;
      case 9: return 250;
      case 10: return 250;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 125000;
      case 4: return 125000;
      case 5: return 125000;
      case 6: return 125000;
      case 7: return 125000;
      case 8: return 125000;
      case 9: return 125000;
      case 10: return 125000;
      case 11: return 125000;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 250;
      case 17: return 0;
      case 18: return 250;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 133250;
      case 4: return 133250;
      case 5: return 133250;
      case 6: return 133250;
      case 7: return 133250;
      case 8: return 133250;
      case 9: return 133250;
      case 10: return 133250;
      case 11: return 250;
      case 12: return 500;
      case 13: return 500;
      case 14: return 250;
      case 15: return 250;
      case 16: return 0;
      case 17: return 250;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 142750;
      case 4: return 142750;
      case 5: return 142750;
      case 6: return 142750;
      case 7: return 142750;
      case 8: return 142750;
      case 9: return 142750;
      case 10: return 0;
      case 11: return 750;
      case 12: return 750;
      case 13: return 250;
      case 14: return 250;
      case 15: return 0;
      case 16: return 250;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 153750;
      case 4: return 153750;
      case 5: return 153750;
      case 6: return 153750;
      case 7: return 153750;
      case 8: return 153750;
      case 9: return 250;
      case 10: return 500;
      case 11: return 500;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 250;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 166500;
      case 4: return 166500;
      case 5: return 166500;
      case 6: return 166500;
      case 7: return 166500;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 1000;
      case 11: return 250;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 181750;
      case 4: return 181750;
      case 5: return 181750;
      case 6: return 181750;
      case 7: return 250;
      case 8: return 250;
      case 9: return 250;
      case 10: return 250;
      case 11: return 0;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 200000;
      case 4: return 200000;
      case 5: return 200000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 250;
      case 10: return 0;
      case 11: return 250;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 0;
      case 4: return 1000;
      case 5: return 1000;
      case 6: return 250;
      case 7: return 0;
      case 8: return 250;
      case 9: return 250;
      case 10: return 250;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 250000;
      case 5: return 250000;
      case 6: return 250000;
      case 7: return 250000;
      case 8: return 250000;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 285500;
      case 3: return 285500;
      case 4: return 285500;
      case 5: return 285500;
      case 6: return 285500;
      case 7: return 285500;
      case 8: return 0;
      case 9: return 750;
      case 10: return 750;
      case 11: return 250;
      case 12: return 0;
      case 13: return 0;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 333250;
      case 3: return 333250;
      case 4: return 333250;
      case 5: return 333250;
      case 6: return 333250;
      case 7: return 0;
      case 8: return 250;
      case 9: return 250;
      case 10: return 250;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 400000;
      case 3: return 400000;
      case 4: return 400000;
      case 5: return 400000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 250;
      case 10: return 0;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 500000;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 250;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 666500;
      case 3: return 666500;
      case 4: return 0;
      case 5: return 250;
      case 6: return 250;
      case 7: return 250;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 250;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 250;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 62500;
      case 4: return 62500;
      case 5: return 62500;
      case 6: return 62500;
      case 7: return 62500;
      case 8: return 62500;
      case 9: return 62500;
      case 10: return 62500;
      case 11: return 62500;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 250;
      case 17: return 0;
      case 18: return 250;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 64500;
      case 4: return 64500;
      case 5: return 64500;
      case 6: return 64500;
      case 7: return 64500;
      case 8: return 64500;
      case 9: return 64500;
      case 10: return 64500;
      case 11: return 0;
      case 12: return 250;
      case 13: return 250;
      case 14: return 250;
      case 15: return 250;
      case 16: return 0;
      case 17: return 250;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 66500;
      case 4: return 66500;
      case 5: return 66500;
      case 6: return 66500;
      case 7: return 66500;
      case 8: return 66500;
      case 9: return 66500;
      case 10: return 0;
      case 11: return 2500;
      case 12: return 2500;
      case 13: return 250;
      case 14: return 250;
      case 15: return 0;
      case 16: return 250;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 68750;
      case 4: return 68750;
      case 5: return 68750;
      case 6: return 68750;
      case 7: return 68750;
      case 8: return 68750;
      case 9: return 250;
      case 10: return 3000;
      case 11: return 3000;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 250;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 71250;
      case 4: return 71250;
      case 5: return 71250;
      case 6: return 71250;
      case 7: return 71250;
      case 8: return 0;
      case 9: return 2500;
      case 10: return 2500;
      case 11: return 250;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 74000;
      case 4: return 74000;
      case 5: return 74000;
      case 6: return 74000;
      case 7: return 0;
      case 8: return 1000;
      case 9: return 1000;
      case 10: return 250;
      case 11: return 0;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 76750;
      case 4: return 76750;
      case 5: return 76750;
      case 6: return 0;
      case 7: return 2250;
      case 8: return 2250;
      case 9: return 250;
      case 10: return 0;
      case 11: return 250;
      case 12: return 250;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 250;
      case 7: return 0;
      case 8: return 250;
      case 9: return 0;
      case 10: return 250;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 83250;
      case 4: return 83250;
      case 5: return 83250;
      case 6: return 83250;
      case 7: return 83250;
      case 8: return 83250;
      case 9: return 83250;
      case 10: return 83250;
      case 11: return 83250;
      case 12: return 0;
      case 13: return 1000;
      case 14: return 1000;
      case 15: return 250;
      case 16: return 250;
      case 17: return 0;
      case 18: return 250;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 86750;
      case 4: return 86750;
      case 5: return 86750;
      case 6: return 86750;
      case 7: return 86750;
      case 8: return 86750;
      case 9: return 86750;
      case 10: return 86750;
      case 11: return 250;
      case 12: return 2250;
      case 13: return 2250;
      case 14: return 250;
      case 15: return 250;
      case 16: return 0;
      case 17: return 250;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 90750;
      case 4: return 90750;
      case 5: return 90750;
      case 6: return 90750;
      case 7: return 90750;
      case 8: return 90750;
      case 9: return 90750;
      case 10: return 0;
      case 11: return 1750;
      case 12: return 1750;
      case 13: return 250;
      case 14: return 250;
      case 15: return 0;
      case 16: return 250;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 95000;
      case 4: return 95000;
      case 5: return 95000;
      case 6: return 95000;
      case 7: return 95000;
      case 8: return 95000;
      case 9: return 0;
      case 10: return 2500;
      case 11: return 2500;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 250;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 100000;
      case 4: return 100000;
      case 5: return 100000;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 105250;
      case 4: return 105250;
      case 5: return 105250;
      case 6: return 105250;
      case 7: return 250;
      case 8: return 0;
      case 9: return 0;
      case 10: return 250;
      case 11: return 0;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 111000;
      case 4: return 111000;
      case 5: return 111000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 1000;
      case 9: return 250;
      case 10: return 0;
      case 11: return 250;
      case 12: return 250;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 0;
      case 4: return 1250;
      case 5: return 1250;
      case 6: return 250;
      case 7: return 0;
      case 8: return 250;
      case 9: return 250;
      case 10: return 250;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 125000;
      case 4: return 125000;
      case 5: return 125000;
      case 6: return 125000;
      case 7: return 125000;
      case 8: return 125000;
      case 9: return 125000;
      case 10: return 125000;
      case 11: return 125000;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 250;
      case 17: return 0;
      case 18: return 250;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 133250;
      case 4: return 133250;
      case 5: return 133250;
      case 6: return 133250;
      case 7: return 133250;
      case 8: return 133250;
      case 9: return 133250;
      case 10: return 133250;
      case 11: return 250;
      case 12: return 500;
      case 13: return 500;
      case 14: return 250;
      case 15: return 250;
      case 16: return 0;
      case 17: return 250;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 142750;
      case 4: return 142750;
      case 5: return 142750;
      case 6: return 142750;
      case 7: return 142750;
      case 8: return 142750;
      case 9: return 142750;
      case 10: return 0;
      case 11: return 750;
      case 12: return 750;
      case 13: return 250;
      case 14: return 250;
      case 15: return 0;
      case 16: return 250;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 153750;
      case 4: return 153750;
      case 5: return 153750;
      case 6: return 153750;
      case 7: return 153750;
      case 8: return 153750;
      case 9: return 250;
      case 10: return 500;
      case 11: return 500;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 250;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 166500;
      case 4: return 166500;
      case 5: return 166500;
      case 6: return 166500;
      case 7: return 166500;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 1000;
      case 11: return 250;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 181750;
      case 4: return 181750;
      case 5: return 181750;
      case 6: return 181750;
      case 7: return 250;
      case 8: return 250;
      case 9: return 250;
      case 10: return 250;
      case 11: return 0;
      case 12: return 250;
      case 13: return 250;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 200000;
      case 4: return 200000;
      case 5: return 200000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 250;
      case 10: return 0;
      case 11: return 250;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250;
      case 3: return 0;
      case 4: return 1000;
      case 5: return 1000;
      case 6: return 250;
      case 7: return 0;
      case 8: return 250;
      case 9: return 250;
      case 10: return 250;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 250000;
      case 5: return 250000;
      case 6: return 250000;
      case 7: return 250000;
      case 8: return 250000;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 250;
      case 13: return 0;
      case 14: return 250;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 285500;
      case 3: return 285500;
      case 4: return 285500;
      case 5: return 285500;
      case 6: return 285500;
      case 7: return 285500;
      case 8: return 0;
      case 9: return 750;
      case 10: return 750;
      case 11: return 250;
      case 12: return 0;
      case 13: return 0;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 333250;
      case 3: return 333250;
      case 4: return 333250;
      case 5: return 333250;
      case 6: return 333250;
      case 7: return 0;
      case 8: return 250;
      case 9: return 250;
      case 10: return 250;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 400000;
      case 3: return 400000;
      case 4: return 400000;
      case 5: return 400000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 250;
      case 10: return 0;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 500000;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 250;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 666500;
      case 3: return 666500;
      case 4: return 0;
      case 5: return 250;
      case 6: return 250;
      case 7: return 250;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 250;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 250;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Adobe-C++/simple_types_loop_invariant.cpp") {
    if (FunctionName == "_Z13record_resultdPKc") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z9summarizePKciiii") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z17summarize_simplefP8_IO_FILEPKc") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z11start_timerv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z5timerv") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 100;
      case 9: return 100;
      case 10: return 100;
      case 11: return 100;
      case 12: return 100;
      case 13: return 100;
      case 14: return 100;
      case 15: return 100;
      case 16: return 100;
      case 17: return 100;
      case 18: return 1;
      case 19: return 100;
      case 20: return 100;
      case 21: return 100;
      case 22: return 100;
      case 23: return 100;
      case 24: return 100;
      case 25: return 100;
      case 26: return 100;
      case 27: return 100;
      case 28: return 100;
      case 29: return 1;
      case 30: return 125;
      case 31: return 125;
      case 32: return 125;
      case 33: return 125;
      case 34: return 125;
      case 35: return 125;
      case 36: return 125;
      case 37: return 125;
      case 38: return 125;
      case 39: return 125;
      case 40: return 125;
      case 41: return 125;
      case 42: return 125;
      case 43: return 125;
      case 44: return 125;
      case 45: return 125;
      case 46: return 1;
      case 47: return 125;
      case 48: return 125;
      case 49: return 125;
      case 50: return 125;
      case 51: return 125;
      case 52: return 125;
      case 53: return 125;
      case 54: return 125;
      case 55: return 125;
      case 56: return 125;
      case 57: return 125;
      case 58: return 125;
      case 59: return 125;
      case 60: return 125;
      case 61: return 125;
      case 62: return 125;
      case 63: return 1;
      case 64: return 250;
      case 65: return 250;
      case 66: return 250;
      case 67: return 250;
      case 68: return 250;
      case 69: return 250;
      case 70: return 250;
      case 71: return 250;
      case 72: return 250;
      case 73: return 250;
      case 74: return 250;
      case 75: return 250;
      case 76: return 250;
      case 77: return 250;
      case 78: return 250;
      case 79: return 250;
      case 80: return 1;
      case 81: return 250;
      case 82: return 250;
      case 83: return 250;
      case 84: return 250;
      case 85: return 250;
      case 86: return 250;
      case 87: return 250;
      case 88: return 250;
      case 89: return 250;
      case 90: return 250;
      case 91: return 250;
      case 92: return 250;
      case 93: return 250;
      case 94: return 250;
      case 95: return 250;
      case 96: return 250;
      case 97: return 1;
      case 98: return 125;
      case 99: return 125;
      case 100: return 125;
      case 101: return 125;
      case 102: return 125;
      case 103: return 125;
      case 104: return 125;
      case 105: return 125;
      case 106: return 125;
      case 107: return 125;
      case 108: return 125;
      case 109: return 125;
      case 110: return 125;
      case 111: return 125;
      case 112: return 125;
      case 113: return 125;
      case 114: return 1;
      case 115: return 250;
      case 116: return 250;
      case 117: return 250;
      case 118: return 250;
      case 119: return 250;
      case 120: return 250;
      case 121: return 250;
      case 122: return 250;
      case 123: return 250;
      case 124: return 250;
      case 125: return 250;
      case 126: return 250;
      case 127: return 250;
      case 128: return 250;
      case 129: return 250;
      case 130: return 250;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 8000000;
      case 5: return 1000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1000;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 0;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 8000000;
      case 5: return 1000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 8000000;
      case 5: return 1000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 8000000;
      case 5: return 1000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 8000000;
      case 5: return 1000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 8000000;
      case 5: return 1000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 8000000;
      case 5: return 1000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 8000000;
      case 5: return 1000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 2000000;
      case 3: return 2000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 1000000;
      case 9: return 1000000;
      case 10: return 1000000;
      case 11: return 1000000;
      case 12: return 0;
      case 13: return 1000;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 8000000;
      case 5: return 1000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 1000000;
      case 9: return 1000000;
      case 10: return 1000000;
      case 11: return 1000000;
      case 12: return 0;
      case 13: return 1000;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 4000000;
      case 5: return 4000000;
      case 6: return 0;
      case 7: return 1000;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 8000000;
      case 5: return 1000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 2000000;
      case 7: return 2000000;
      case 8: return 0;
      case 9: return 1000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Adobe-C++/stepanov_abstraction.cpp") {
    if (FunctionName == "_Z13record_resultdPKc") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z9summarizePKciiii") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z17summarize_simplefP8_IO_FILEPKc") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z11start_timerv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z5timerv") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 62;
      case 9: return 62;
      case 10: return 62;
      case 11: return 62;
      case 12: return 62;
      case 13: return 62;
      case 14: return 62;
      case 15: return 62;
      case 16: return 62;
      case 17: return 62;
      case 18: return 62;
      case 19: return 62;
      case 20: return 62;
      case 21: return 62;
      case 22: return 62;
      case 23: return 62;
      case 24: return 4;
      case 25: return 4;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 62;
      case 31: return 62;
      case 32: return 62;
      case 33: return 62;
      case 34: return 62;
      case 35: return 62;
      case 36: return 62;
      case 37: return 62;
      case 38: return 62;
      case 39: return 62;
      case 40: return 62;
      case 41: return 62;
      case 42: return 62;
      case 43: return 62;
      case 44: return 62;
      case 45: return 62;
      case 46: return 4;
      case 47: return 4;
      case 48: return 0;
      case 49: return 1;
      case 50: return 1;
      case 51: return 1;
      case 52: return 62;
      case 53: return 62;
      case 54: return 62;
      case 55: return 62;
      case 56: return 62;
      case 57: return 62;
      case 58: return 62;
      case 59: return 62;
      case 60: return 62;
      case 61: return 62;
      case 62: return 62;
      case 63: return 62;
      case 64: return 62;
      case 65: return 62;
      case 66: return 62;
      case 67: return 62;
      case 68: return 4;
      case 69: return 4;
      case 70: return 0;
      case 71: return 1;
      case 72: return 1;
      case 73: return 1;
      case 74: return 0;
      case 75: return 0;
      case 76: return 0;
      case 77: return 0;
      case 78: return 50000000;
      case 79: return 50000000;
      case 80: return 50000000;
      case 81: return 50000000;
      case 82: return 50000000;
      case 83: return 50000000;
      case 84: return 50000000;
      case 85: return 50000000;
      case 86: return 200000;
      case 87: return 0;
      case 88: return 0;
      case 89: return 1;
      case 90: return 1;
      case 91: return 0;
      case 92: return 0;
      case 93: return 0;
      case 94: return 0;
      case 95: return 50000000;
      case 96: return 50000000;
      case 97: return 50000000;
      case 98: return 50000000;
      case 99: return 50000000;
      case 100: return 50000000;
      case 101: return 50000000;
      case 102: return 50000000;
      case 103: return 200000;
      case 104: return 0;
      case 105: return 0;
      case 106: return 1;
      case 107: return 1;
      case 108: return 0;
      case 109: return 0;
      case 110: return 0;
      case 111: return 0;
      case 112: return 50000000;
      case 113: return 50000000;
      case 114: return 50000000;
      case 115: return 50000000;
      case 116: return 50000000;
      case 117: return 50000000;
      case 118: return 50000000;
      case 119: return 50000000;
      case 120: return 200000;
      case 121: return 0;
      case 122: return 0;
      case 123: return 1;
      case 124: return 1;
      case 125: return 0;
      case 126: return 0;
      case 127: return 0;
      case 128: return 0;
      case 129: return 50000000;
      case 130: return 50000000;
      case 131: return 50000000;
      case 132: return 50000000;
      case 133: return 50000000;
      case 134: return 50000000;
      case 135: return 50000000;
      case 136: return 50000000;
      case 137: return 200000;
      case 138: return 0;
      case 139: return 0;
      case 140: return 1;
      case 141: return 1;
      case 142: return 0;
      case 143: return 0;
      case 144: return 0;
      case 145: return 0;
      case 146: return 50000000;
      case 147: return 50000000;
      case 148: return 50000000;
      case 149: return 50000000;
      case 150: return 50000000;
      case 151: return 50000000;
      case 152: return 50000000;
      case 153: return 50000000;
      case 154: return 200000;
      case 155: return 0;
      case 156: return 0;
      case 157: return 1;
      case 158: return 1;
      case 159: return 0;
      case 160: return 0;
      case 161: return 0;
      case 162: return 0;
      case 163: return 50000000;
      case 164: return 50000000;
      case 165: return 50000000;
      case 166: return 50000000;
      case 167: return 50000000;
      case 168: return 50000000;
      case 169: return 50000000;
      case 170: return 50000000;
      case 171: return 200000;
      case 172: return 0;
      case 173: return 0;
      case 174: return 1;
      case 175: return 1;
      case 176: return 1;
      case 177: return 2000;
      case 178: return 1;
      case 179: return 1;
      case 180: return 1;
      case 181: return 125;
      case 182: return 125;
      case 183: return 125;
      case 184: return 125;
      case 185: return 125;
      case 186: return 125;
      case 187: return 125;
      case 188: return 125;
      case 189: return 125;
      case 190: return 125;
      case 191: return 125;
      case 192: return 125;
      case 193: return 125;
      case 194: return 125;
      case 195: return 125;
      case 196: return 125;
      case 197: return 0;
      case 198: return 0;
      case 199: return 0;
      case 200: return 0;
      case 201: return 0;
      case 202: return 0;
      case 203: return 0;
      case 204: return 0;
      case 205: return 0;
      case 206: return 0;
      case 207: return 0;
      case 208: return 0;
      case 209: return 0;
      case 210: return 0;
      case 211: return 0;
      case 212: return 0;
      case 213: return 0;
      case 214: return 0;
      case 215: return 0;
      case 216: return 0;
      case 217: return 0;
      case 218: return 0;
      case 219: return 1;
      case 220: return 125;
      case 221: return 125;
      case 222: return 125;
      case 223: return 125;
      case 224: return 125;
      case 225: return 125;
      case 226: return 125;
      case 227: return 125;
      case 228: return 125;
      case 229: return 125;
      case 230: return 125;
      case 231: return 125;
      case 232: return 125;
      case 233: return 125;
      case 234: return 125;
      case 235: return 125;
      case 236: return 0;
      case 237: return 0;
      case 238: return 0;
      case 239: return 0;
      case 240: return 0;
      case 241: return 0;
      case 242: return 0;
      case 243: return 0;
      case 244: return 0;
      case 245: return 0;
      case 246: return 0;
      case 247: return 0;
      case 248: return 0;
      case 249: return 0;
      case 250: return 0;
      case 251: return 0;
      case 252: return 0;
      case 253: return 0;
      case 254: return 0;
      case 255: return 0;
      case 256: return 0;
      case 257: return 0;
      case 258: return 1;
      case 259: return 1;
      case 260: return 1;
      case 261: return 1;
      case 262: return 1;
      case 263: return 1;
      case 264: return 1;
      case 265: return 1;
      case 266: return 1;
      case 267: return 1;
      case 268: return 1;
      case 269: return 1;
      case 270: return 1;
      case 271: return 1;
      case 272: return 1;
      case 273: return 1;
      case 274: return 1;
      case 275: return 1;
      case 276: return 1;
      case 277: return 1;
      case 278: return 1;
      case 279: return 1;
      case 280: return 1;
      case 281: return 1;
      case 282: return 1;
      case 283: return 1;
      case 284: return 1;
      case 285: return 1;
      case 286: return 1;
      case 287: return 1;
      case 288: return 1;
      case 289: return 1;
      case 290: return 1;
      case 291: return 1;
      case 292: return 1;
      case 293: return 1;
      case 294: return 1;
      case 295: return 1;
      case 296: return 1;
      case 297: return 1;
      case 298: return 1;
      case 299: return 1;
      case 300: return 1;
      case 301: return 1;
      case 302: return 1;
      case 303: return 1;
      case 304: return 1;
      case 305: return 1;
      case 306: return 1;
      case 307: return 1;
      case 308: return 1;
      case 309: return 1;
      case 310: return 1;
      case 311: return 1;
      case 312: return 1;
      case 313: return 1;
      case 314: return 1;
      case 315: return 1;
      case 316: return 1;
      case 317: return 1;
      case 318: return 1;
      case 319: return 1;
      case 320: return 1;
      case 321: return 1;
      case 322: return 1;
      case 323: return 1;
      case 324: return 1;
      case 325: return 1;
      case 326: return 1;
      case 327: return 1;
      case 328: return 1;
      case 329: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 12500;
      case 15: return 12500;
      case 16: return 12500;
      case 17: return 12500;
      case 18: return 12500;
      case 19: return 12500;
      case 20: return 12500;
      case 21: return 12500;
      case 22: return 12500;
      case 23: return 12500;
      case 24: return 12500;
      case 25: return 12500;
      case 26: return 12500;
      case 27: return 12500;
      case 28: return 12500;
      case 29: return 12500;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 100;
      case 53: return 100;
      case 54: return 0;
      case 55: return 100;
      case 56: return 99900;
      case 57: return 50339400;
      case 58: return 50239900;
      case 59: return 99900;
      case 60: return 99900;
      case 61: return 199900;
      case 62: return 199900;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 49221200;
      case 69: return 49121500;
      case 70: return 99900;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 12500;
      case 15: return 12500;
      case 16: return 12500;
      case 17: return 12500;
      case 18: return 12500;
      case 19: return 12500;
      case 20: return 12500;
      case 21: return 12500;
      case 22: return 12500;
      case 23: return 12500;
      case 24: return 12500;
      case 25: return 12500;
      case 26: return 12500;
      case 27: return 12500;
      case 28: return 12500;
      case 29: return 12500;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 100;
      case 53: return 100;
      case 54: return 0;
      case 55: return 100;
      case 56: return 99900;
      case 57: return 50339400;
      case 58: return 50239900;
      case 59: return 99900;
      case 60: return 99900;
      case 61: return 199900;
      case 62: return 199900;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 49221200;
      case 69: return 49121500;
      case 70: return 99900;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 12500;
      case 15: return 12500;
      case 16: return 12500;
      case 17: return 12500;
      case 18: return 12500;
      case 19: return 12500;
      case 20: return 12500;
      case 21: return 12500;
      case 22: return 12500;
      case 23: return 12500;
      case 24: return 12500;
      case 25: return 12500;
      case 26: return 12500;
      case 27: return 12500;
      case 28: return 12500;
      case 29: return 12500;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 100;
      case 53: return 100;
      case 54: return 0;
      case 55: return 100;
      case 56: return 99900;
      case 57: return 50339400;
      case 58: return 50239900;
      case 59: return 99900;
      case 60: return 99900;
      case 61: return 199900;
      case 62: return 199900;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 49221200;
      case 69: return 49121500;
      case 70: return 99900;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 12500;
      case 15: return 12500;
      case 16: return 12500;
      case 17: return 12500;
      case 18: return 12500;
      case 19: return 12500;
      case 20: return 12500;
      case 21: return 12500;
      case 22: return 12500;
      case 23: return 12500;
      case 24: return 12500;
      case 25: return 12500;
      case 26: return 12500;
      case 27: return 12500;
      case 28: return 12500;
      case 29: return 12500;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 100;
      case 53: return 100;
      case 54: return 0;
      case 55: return 100;
      case 56: return 99900;
      case 57: return 50339400;
      case 58: return 50239900;
      case 59: return 99900;
      case 60: return 99900;
      case 61: return 199900;
      case 62: return 199900;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 49221200;
      case 69: return 49121500;
      case 70: return 99900;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 12500;
      case 15: return 12500;
      case 16: return 12500;
      case 17: return 12500;
      case 18: return 12500;
      case 19: return 12500;
      case 20: return 12500;
      case 21: return 12500;
      case 22: return 12500;
      case 23: return 12500;
      case 24: return 12500;
      case 25: return 12500;
      case 26: return 12500;
      case 27: return 12500;
      case 28: return 12500;
      case 29: return 12500;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 100;
      case 53: return 100;
      case 54: return 0;
      case 55: return 100;
      case 56: return 99900;
      case 57: return 50339400;
      case 58: return 50239900;
      case 59: return 99900;
      case 60: return 99900;
      case 61: return 199900;
      case 62: return 199900;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 49221200;
      case 69: return 49121500;
      case 70: return 99900;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 12500;
      case 15: return 12500;
      case 16: return 12500;
      case 17: return 12500;
      case 18: return 12500;
      case 19: return 12500;
      case 20: return 12500;
      case 21: return 12500;
      case 22: return 12500;
      case 23: return 12500;
      case 24: return 12500;
      case 25: return 12500;
      case 26: return 12500;
      case 27: return 12500;
      case 28: return 12500;
      case 29: return 12500;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 100;
      case 53: return 100;
      case 54: return 0;
      case 55: return 100;
      case 56: return 99900;
      case 57: return 50339400;
      case 58: return 50239900;
      case 59: return 99900;
      case 60: return 99900;
      case 61: return 199900;
      case 62: return 199900;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 49221200;
      case 69: return 49121500;
      case 70: return 99900;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 100000;
      case 9: return 100000;
      case 10: return 100000;
      case 11: return 100000;
      case 12: return 100000;
      case 13: return 100000;
      case 14: return 100000;
      case 15: return 100000;
      case 16: return 100000;
      case 17: return 100000;
      case 18: return 100000;
      case 19: return 100000;
      case 20: return 100000;
      case 21: return 100000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1599200;
      case 45: return 1599200;
      case 46: return 0;
      case 47: return 800;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 100000;
      case 9: return 100000;
      case 10: return 100000;
      case 11: return 100000;
      case 12: return 100000;
      case 13: return 100000;
      case 14: return 100000;
      case 15: return 100000;
      case 16: return 100000;
      case 17: return 100000;
      case 18: return 100000;
      case 19: return 100000;
      case 20: return 100000;
      case 21: return 100000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1599200;
      case 45: return 1599200;
      case 46: return 0;
      case 47: return 800;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 100000;
      case 9: return 100000;
      case 10: return 100000;
      case 11: return 100000;
      case 12: return 100000;
      case 13: return 100000;
      case 14: return 100000;
      case 15: return 100000;
      case 16: return 100000;
      case 17: return 100000;
      case 18: return 100000;
      case 19: return 100000;
      case 20: return 100000;
      case 21: return 100000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1599200;
      case 45: return 1599200;
      case 46: return 0;
      case 47: return 800;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 100000;
      case 9: return 100000;
      case 10: return 100000;
      case 11: return 100000;
      case 12: return 100000;
      case 13: return 100000;
      case 14: return 100000;
      case 15: return 100000;
      case 16: return 100000;
      case 17: return 100000;
      case 18: return 100000;
      case 19: return 100000;
      case 20: return 100000;
      case 21: return 100000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1599200;
      case 45: return 1599200;
      case 46: return 0;
      case 47: return 800;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 100000;
      case 9: return 100000;
      case 10: return 100000;
      case 11: return 100000;
      case 12: return 100000;
      case 13: return 100000;
      case 14: return 100000;
      case 15: return 100000;
      case 16: return 100000;
      case 17: return 100000;
      case 18: return 100000;
      case 19: return 100000;
      case 20: return 100000;
      case 21: return 100000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1599200;
      case 45: return 1599200;
      case 46: return 0;
      case 47: return 800;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 100000;
      case 9: return 100000;
      case 10: return 100000;
      case 11: return 100000;
      case 12: return 100000;
      case 13: return 100000;
      case 14: return 100000;
      case 15: return 100000;
      case 16: return 100000;
      case 17: return 100000;
      case 18: return 100000;
      case 19: return 100000;
      case 20: return 100000;
      case 21: return 100000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1599200;
      case 45: return 1599200;
      case 46: return 0;
      case 47: return 800;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 100000;
      case 9: return 100000;
      case 10: return 100000;
      case 11: return 100000;
      case 12: return 100000;
      case 13: return 100000;
      case 14: return 100000;
      case 15: return 100000;
      case 16: return 100000;
      case 17: return 100000;
      case 18: return 100000;
      case 19: return 100000;
      case 20: return 100000;
      case 21: return 100000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1599200;
      case 45: return 1599200;
      case 46: return 0;
      case 47: return 800;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 100000;
      case 9: return 100000;
      case 10: return 100000;
      case 11: return 100000;
      case 12: return 100000;
      case 13: return 100000;
      case 14: return 100000;
      case 15: return 100000;
      case 16: return 100000;
      case 17: return 100000;
      case 18: return 100000;
      case 19: return 100000;
      case 20: return 100000;
      case 21: return 100000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1599200;
      case 45: return 1599200;
      case 46: return 0;
      case 47: return 800;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 100000;
      case 9: return 100000;
      case 10: return 100000;
      case 11: return 100000;
      case 12: return 100000;
      case 13: return 100000;
      case 14: return 100000;
      case 15: return 100000;
      case 16: return 100000;
      case 17: return 100000;
      case 18: return 100000;
      case 19: return 100000;
      case 20: return 100000;
      case 21: return 100000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1599200;
      case 45: return 1599200;
      case 46: return 0;
      case 47: return 800;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 100000;
      case 9: return 100000;
      case 10: return 100000;
      case 11: return 100000;
      case 12: return 100000;
      case 13: return 100000;
      case 14: return 100000;
      case 15: return 100000;
      case 16: return 100000;
      case 17: return 100000;
      case 18: return 100000;
      case 19: return 100000;
      case 20: return 100000;
      case 21: return 100000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1599200;
      case 45: return 1599200;
      case 46: return 0;
      case 47: return 800;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 100000;
      case 9: return 100000;
      case 10: return 100000;
      case 11: return 100000;
      case 12: return 100000;
      case 13: return 100000;
      case 14: return 100000;
      case 15: return 100000;
      case 16: return 100000;
      case 17: return 100000;
      case 18: return 100000;
      case 19: return 100000;
      case 20: return 100000;
      case 21: return 100000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1599200;
      case 45: return 1599200;
      case 46: return 0;
      case 47: return 800;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 100000;
      case 7: return 100000;
      case 8: return 100000;
      case 9: return 100000;
      case 10: return 100000;
      case 11: return 100000;
      case 12: return 100000;
      case 13: return 100000;
      case 14: return 100000;
      case 15: return 100000;
      case 16: return 100000;
      case 17: return 100000;
      case 18: return 100000;
      case 19: return 100000;
      case 20: return 100000;
      case 21: return 100000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 1599200;
      case 45: return 1599200;
      case 46: return 0;
      case 47: return 800;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark9quicksortIPddEEvT_S2_") {
      switch(AccessId) {
      case 0: return 1599200;
      case 1: return 15580800;
      case 2: return 9306400;
      case 3: return 4056000;
      case 4: return 4056000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_") {
      switch(AccessId) {
      case 0: return 1599200;
      case 1: return 15580800;
      case 2: return 4507200;
      case 3: return 9306400;
      case 4: return 4056000;
      case 5: return 4056000;
      case 6: return 4056000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_") {
      switch(AccessId) {
      case 0: return 1599200;
      case 1: return 15580800;
      case 2: return 13813600;
      case 3: return 4056000;
      case 4: return 4056000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_") {
      switch(AccessId) {
      case 0: return 1599200;
      case 1: return 15580800;
      case 2: return 4507200;
      case 3: return 9306400;
      case 4: return 4056000;
      case 5: return 4056000;
      case 6: return 4056000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_") {
      switch(AccessId) {
      case 0: return 1599200;
      case 1: return 15580800;
      case 2: return 13813600;
      case 3: return 4056000;
      case 4: return 4056000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_") {
      switch(AccessId) {
      case 0: return 1599200;
      case 1: return 15580800;
      case 2: return 4507200;
      case 3: return 9306400;
      case 4: return 4056000;
      case 5: return 4056000;
      case 6: return 4056000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark8heapsortIPddEEvT_S2_") {
      switch(AccessId) {
      case 0: return 800000;
      case 1: return 1592000;
      case 2: return 1592000;
      case 3: return 1592000;
      case 4: return 1592000;
      case 5: return 1600;
      case 6: return 1600;
      case 7: return 1025600;
      case 8: return 391200;
      case 9: return 800000;
      case 10: return 1599200;
      case 11: return 1599200;
      case 12: return 1599200;
      case 13: return 13612000;
      case 14: return 13612000;
      case 15: return 13612000;
      case 16: return 13612000;
      case 17: return 4800;
      case 18: return 4800;
      case 19: return 1894400;
      case 20: return 296800;
      case 21: return 1599200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3_") {
      switch(AccessId) {
      case 0: return 800000;
      case 1: return 1592000;
      case 2: return 1592000;
      case 3: return 1592000;
      case 4: return 1592000;
      case 5: return 1600;
      case 6: return 1600;
      case 7: return 1025600;
      case 8: return 391200;
      case 9: return 800000;
      case 10: return 1599200;
      case 11: return 1599200;
      case 12: return 1599200;
      case 13: return 13612000;
      case 14: return 13612000;
      case 15: return 13612000;
      case 16: return 13612000;
      case 17: return 4800;
      case 18: return 4800;
      case 19: return 1894400;
      case 20: return 296800;
      case 21: return 1599200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4_") {
      switch(AccessId) {
      case 0: return 800000;
      case 1: return 1592000;
      case 2: return 1592000;
      case 3: return 1592000;
      case 4: return 1592000;
      case 5: return 1600;
      case 6: return 1600;
      case 7: return 1025600;
      case 8: return 391200;
      case 9: return 800000;
      case 10: return 1599200;
      case 11: return 1599200;
      case 12: return 1599200;
      case 13: return 13612000;
      case 14: return 13612000;
      case 15: return 13612000;
      case 16: return 13612000;
      case 17: return 4800;
      case 18: return 4800;
      case 19: return 1894400;
      case 20: return 296800;
      case 21: return 1599200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_") {
      switch(AccessId) {
      case 0: return 800000;
      case 1: return 1592000;
      case 2: return 1592000;
      case 3: return 1592000;
      case 4: return 1592000;
      case 5: return 1600;
      case 6: return 1600;
      case 7: return 1025600;
      case 8: return 391200;
      case 9: return 800000;
      case 10: return 1599200;
      case 11: return 1599200;
      case 12: return 1599200;
      case 13: return 13612000;
      case 14: return 13612000;
      case 15: return 13612000;
      case 16: return 13612000;
      case 17: return 4800;
      case 18: return 4800;
      case 19: return 1894400;
      case 20: return 296800;
      case 21: return 1599200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_") {
      switch(AccessId) {
      case 0: return 800000;
      case 1: return 1592000;
      case 2: return 1592000;
      case 3: return 1592000;
      case 4: return 1592000;
      case 5: return 1600;
      case 6: return 1600;
      case 7: return 1025600;
      case 8: return 391200;
      case 9: return 800000;
      case 10: return 1599200;
      case 11: return 1599200;
      case 12: return 1599200;
      case 13: return 13612000;
      case 14: return 13612000;
      case 15: return 13612000;
      case 16: return 13612000;
      case 17: return 4800;
      case 18: return 4800;
      case 19: return 1894400;
      case 20: return 296800;
      case 21: return 1599200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_") {
      switch(AccessId) {
      case 0: return 800000;
      case 1: return 1592000;
      case 2: return 1592000;
      case 3: return 1592000;
      case 4: return 1592000;
      case 5: return 1600;
      case 6: return 1600;
      case 7: return 1025600;
      case 8: return 391200;
      case 9: return 800000;
      case 10: return 1599200;
      case 11: return 1599200;
      case 12: return 1599200;
      case 13: return 13612000;
      case 14: return 13612000;
      case 15: return 13612000;
      case 16: return 13612000;
      case 17: return 4800;
      case 18: return 4800;
      case 19: return 1894400;
      case 20: return 296800;
      case 21: return 1599200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_GLOBAL__sub_I_stepanov_abstraction.cpp") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Adobe-C++/functionobjects.cpp") {
    if (FunctionName == "_Z13record_resultdPKc") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z9summarizePKciiii") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z17summarize_simplefP8_IO_FILEPKc") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z11start_timerv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z5timerv") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z19less_than_function1PKvS0_") {
      switch(AccessId) {
      case 0: return 36128100;
      case 1: return 36128100;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK17less_than_functorclERKdS1_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z18quicksort_functionPdS_PFbddE") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z9quicksortIPdPFbddEEvT_S3_T0_") {
      switch(AccessId) {
      case 0: return 8998500;
      case 1: return 94854300;
      case 2: return 97276200;
      case 3: return 27542100;
      case 4: return 27542100;
      case 5: return 27542100;
      case 6: return 27542100;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 10000;
      case 6: return 2999700;
      case 7: return 2999700;
      case 8: return 0;
      case 9: return 300;
      case 10: return 407400;
      case 11: return 2592900;
      case 12: return 349500;
      case 13: return 349500;
      case 14: return 349500;
      case 15: return 2999700;
      case 16: return 2999700;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 2999700;
      case 22: return 2999700;
      case 23: return 0;
      case 24: return 300;
      case 25: return 407400;
      case 26: return 2592900;
      case 27: return 349500;
      case 28: return 349500;
      case 29: return 349500;
      case 30: return 2999700;
      case 31: return 2999700;
      case 32: return 0;
      case 33: return 4500;
      case 34: return 4500;
      case 35: return 300;
      case 36: return 20100;
      case 37: return 20100;
      case 38: return 20100;
      case 39: return 4200;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 5514600;
      case 46: return 5514600;
      case 47: return 5514600;
      case 48: return 5514600;
      case 49: return 1497600;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 2999700;
      case 58: return 2999700;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      case 62: return 0;
      case 63: return 2999700;
      case 64: return 2999700;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 0;
      case 69: return 2999700;
      case 70: return 2999700;
      case 71: return 0;
      case 72: return 0;
      case 73: return 0;
      case 74: return 0;
      case 75: return 2999700;
      case 76: return 2999700;
      case 77: return 0;
      case 78: return 0;
      case 79: return 0;
      case 80: return 0;
      case 81: return 2999700;
      case 82: return 2999700;
      case 83: return 0;
      case 84: return 0;
      case 85: return 0;
      case 86: return 0;
      case 87: return 2999700;
      case 88: return 2999700;
      case 89: return 0;
      case 90: return 0;
      case 91: return 0;
      case 92: return 0;
      case 93: return 2999700;
      case 94: return 2999700;
      case 95: return 0;
      case 96: return 0;
      case 97: return 0;
      case 98: return 0;
      case 99: return 2999700;
      case 100: return 2999700;
      case 101: return 0;
      case 102: return 0;
      case 103: return 0;
      case 104: return 0;
      case 105: return 0;
      case 106: return 0;
      case 107: return 0;
      case 108: return 2999700;
      case 109: return 2999700;
      case 110: return 0;
      case 111: return 5494800;
      case 112: return 5494800;
      case 113: return 5494800;
      case 114: return 5494800;
      case 115: return 1497600;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z9quicksortIPd17less_than_functorEvT_S2_T0_") {
      switch(AccessId) {
      case 0: return 2999700;
      case 1: return 12413400;
      case 2: return 12413400;
      case 3: return 31889700;
      case 4: return 34387200;
      case 5: return 9413700;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z9quicksortIPd24inline_less_than_functorEvT_S2_T0_") {
      switch(AccessId) {
      case 0: return 2999700;
      case 1: return 12413400;
      case 2: return 12413400;
      case 3: return 31889700;
      case 4: return 34387200;
      case 5: return 9413700;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z9quicksortIPdSt4lessIdEEvT_S3_T0_") {
      switch(AccessId) {
      case 0: return 2999700;
      case 1: return 12413400;
      case 2: return 12413400;
      case 3: return 31889700;
      case 4: return 34387200;
      case 5: return 9413700;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z9quicksortIPdEvT_S1_") {
      switch(AccessId) {
      case 0: return 2999700;
      case 1: return 31889700;
      case 2: return 24103200;
      case 3: return 9413700;
      case 4: return 9413700;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_T1_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 312300;
      case 15: return 312300;
      case 16: return 158700;
      case 17: return 158700;
      case 18: return 76500;
      case 19: return 76500;
      case 20: return 76500;
      case 21: return 76500;
      case 22: return 82200;
      case 23: return 82200;
      case 24: return 82200;
      case 25: return 39300;
      case 26: return 39300;
      case 27: return 39300;
      case 28: return 42900;
      case 29: return 42900;
      case 30: return 42900;
      case 31: return 153600;
      case 32: return 153600;
      case 33: return 71100;
      case 34: return 71100;
      case 35: return 71100;
      case 36: return 71100;
      case 37: return 82500;
      case 38: return 82500;
      case 39: return 82500;
      case 40: return 39600;
      case 41: return 39600;
      case 42: return 39600;
      case 43: return 42900;
      case 44: return 42900;
      case 45: return 42900;
      case 46: return 18662700;
      case 47: return 18662700;
      case 48: return 16068600;
      case 49: return 16068600;
      case 50: return 6955200;
      case 51: return 6955200;
      case 52: return 6955200;
      case 53: return 6955200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt11__make_heapIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_RT0_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_S6_T0_T1_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 312793;
      case 13: return 312793;
      case 14: return 312793;
      case 15: return 312793;
      case 16: return 312793;
      case 17: return 312793;
      case 18: return 7245320;
      case 19: return 18651248;
      case 20: return 16108642;
      case 21: return 6932527;
      case 22: return 6932527;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt22__final_insertion_sortIPdN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_S6_T0_") {
      switch(AccessId) {
      case 0: return 4500;
      case 1: return 4500;
      case 2: return 300;
      case 3: return 20054;
      case 4: return 20054;
      case 5: return 20054;
      case 6: return 4200;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 5505579;
      case 13: return 5505579;
      case 14: return 5505579;
      case 15: return 5505579;
      case 16: return 1497600;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 5485838;
      case 25: return 5485838;
      case 26: return 5485838;
      case 27: return 5485838;
      case 28: return 1497600;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt11__make_heapIPdN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_S6_RT0_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_S6_T0_T1_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 312300;
      case 13: return 312300;
      case 14: return 312300;
      case 15: return 312300;
      case 16: return 312300;
      case 17: return 312300;
      case 18: return 7267500;
      case 19: return 18662700;
      case 20: return 16068600;
      case 21: return 6955200;
      case 22: return 6955200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt22__final_insertion_sortIPdN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_S6_T0_") {
      switch(AccessId) {
      case 0: return 4500;
      case 1: return 4500;
      case 2: return 300;
      case 3: return 20100;
      case 4: return 20100;
      case 5: return 20100;
      case 6: return 4200;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 5514600;
      case 13: return 5514600;
      case 14: return 5514600;
      case 15: return 5514600;
      case 16: return 1497600;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 5494800;
      case 25: return 5494800;
      case 26: return 5494800;
      case 27: return 5494800;
      case 28: return 1497600;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt11__make_heapIPdN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_S6_RT0_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_S7_T0_T1_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 312300;
      case 13: return 312300;
      case 14: return 312300;
      case 15: return 312300;
      case 16: return 312300;
      case 17: return 312300;
      case 18: return 7267500;
      case 19: return 18662700;
      case 20: return 16068600;
      case 21: return 6955200;
      case 22: return 6955200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt22__final_insertion_sortIPdN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_S7_T0_") {
      switch(AccessId) {
      case 0: return 4500;
      case 1: return 4500;
      case 2: return 300;
      case 3: return 20100;
      case 4: return 20100;
      case 5: return 20100;
      case 6: return 4200;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 5514600;
      case 13: return 5514600;
      case 14: return 5514600;
      case 15: return 5514600;
      case 16: return 1497600;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 5494800;
      case 25: return 5494800;
      case 26: return 5494800;
      case 27: return 5494800;
      case 28: return 1497600;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt11__make_heapIPdN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_S7_RT0_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 312300;
      case 13: return 312300;
      case 14: return 312300;
      case 15: return 312300;
      case 16: return 312300;
      case 17: return 312300;
      case 18: return 7267500;
      case 19: return 18662700;
      case 20: return 16068600;
      case 21: return 6955200;
      case 22: return 6955200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt22__final_insertion_sortIPdN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_") {
      switch(AccessId) {
      case 0: return 4500;
      case 1: return 4500;
      case 2: return 300;
      case 3: return 20100;
      case 4: return 20100;
      case 5: return 20100;
      case 6: return 4200;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 5514600;
      case 13: return 5514600;
      case 14: return 5514600;
      case 15: return 5514600;
      case 16: return 1497600;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 5494800;
      case 25: return 5494800;
      case 26: return 5494800;
      case 27: return 5494800;
      case 28: return 1497600;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt11__make_heapIPdN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Adobe-C++/simple_types_constant_folding.cpp") {
    if (FunctionName == "_Z13record_resultdPKc") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z9summarizePKciiii") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z17summarize_simplefP8_IO_FILEPKc") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z11start_timerv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z5timerv") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 0;
      case 45: return 1;
      case 46: return 1;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      case 58: return 0;
      case 59: return 1;
      case 60: return 1;
      case 61: return 0;
      case 62: return 0;
      case 63: return 0;
      case 64: return 0;
      case 65: return 1;
      case 66: return 1;
      case 67: return 1;
      case 68: return 1;
      case 69: return 1;
      case 70: return 1;
      case 71: return 1;
      case 72: return 0;
      case 73: return 1;
      case 74: return 1;
      case 75: return 0;
      case 76: return 0;
      case 77: return 0;
      case 78: return 0;
      case 79: return 1;
      case 80: return 1;
      case 81: return 1;
      case 82: return 1;
      case 83: return 1;
      case 84: return 1;
      case 85: return 1;
      case 86: return 0;
      case 87: return 1;
      case 88: return 1;
      case 89: return 0;
      case 90: return 0;
      case 91: return 0;
      case 92: return 0;
      case 93: return 1;
      case 94: return 1;
      case 95: return 1;
      case 96: return 1;
      case 97: return 1;
      case 98: return 1;
      case 99: return 1;
      case 100: return 0;
      case 101: return 1;
      case 102: return 1;
      case 103: return 0;
      case 104: return 0;
      case 105: return 0;
      case 106: return 0;
      case 107: return 1;
      case 108: return 1;
      case 109: return 1;
      case 110: return 1;
      case 111: return 1;
      case 112: return 1;
      case 113: return 1;
      case 114: return 0;
      case 115: return 1;
      case 116: return 1;
      case 117: return 0;
      case 118: return 0;
      case 119: return 0;
      case 120: return 0;
      case 121: return 1;
      case 122: return 1;
      case 123: return 1;
      case 124: return 1;
      case 125: return 1;
      case 126: return 1;
      case 127: return 1;
      case 128: return 0;
      case 129: return 1;
      case 130: return 1;
      case 131: return 1;
      case 132: return 1;
      case 133: return 1;
      case 134: return 0;
      case 135: return 1;
      case 136: return 1;
      case 137: return 1;
      case 138: return 1;
      case 139: return 1;
      case 140: return 1;
      case 141: return 1;
      case 142: return 0;
      case 143: return 1;
      case 144: return 1;
      case 145: return 0;
      case 146: return 0;
      case 147: return 0;
      case 148: return 0;
      case 149: return 1;
      case 150: return 1;
      case 151: return 1;
      case 152: return 1;
      case 153: return 1;
      case 154: return 1;
      case 155: return 1;
      case 156: return 0;
      case 157: return 1;
      case 158: return 1;
      case 159: return 0;
      case 160: return 0;
      case 161: return 0;
      case 162: return 0;
      case 163: return 1;
      case 164: return 1;
      case 165: return 1;
      case 166: return 1;
      case 167: return 1;
      case 168: return 1;
      case 169: return 1;
      case 170: return 0;
      case 171: return 1;
      case 172: return 1;
      case 173: return 0;
      case 174: return 0;
      case 175: return 0;
      case 176: return 0;
      case 177: return 1;
      case 178: return 1;
      case 179: return 1;
      case 180: return 1;
      case 181: return 1;
      case 182: return 1;
      case 183: return 1;
      case 184: return 0;
      case 185: return 1;
      case 186: return 1;
      case 187: return 0;
      case 188: return 0;
      case 189: return 0;
      case 190: return 0;
      case 191: return 1;
      case 192: return 1;
      case 193: return 1;
      case 194: return 1;
      case 195: return 1;
      case 196: return 1;
      case 197: return 1;
      case 198: return 0;
      case 199: return 1;
      case 200: return 1;
      case 201: return 0;
      case 202: return 0;
      case 203: return 0;
      case 204: return 0;
      case 205: return 1;
      case 206: return 1;
      case 207: return 1;
      case 208: return 1;
      case 209: return 1;
      case 210: return 1;
      case 211: return 1;
      case 212: return 0;
      case 213: return 1;
      case 214: return 1;
      case 215: return 0;
      case 216: return 0;
      case 217: return 0;
      case 218: return 0;
      case 219: return 1;
      case 220: return 1;
      case 221: return 1;
      case 222: return 1;
      case 223: return 1;
      case 224: return 1;
      case 225: return 100;
      case 226: return 100;
      case 227: return 100;
      case 228: return 100;
      case 229: return 100;
      case 230: return 100;
      case 231: return 100;
      case 232: return 100;
      case 233: return 100;
      case 234: return 100;
      case 235: return 1;
      case 236: return 1;
      case 237: return 1;
      case 238: return 1;
      case 239: return 1;
      case 240: return 100;
      case 241: return 100;
      case 242: return 100;
      case 243: return 100;
      case 244: return 100;
      case 245: return 100;
      case 246: return 100;
      case 247: return 100;
      case 248: return 100;
      case 249: return 100;
      case 250: return 1;
      case 251: return 1;
      case 252: return 1;
      case 253: return 1;
      case 254: return 1;
      case 255: return 1;
      case 256: return 0;
      case 257: return 1;
      case 258: return 1;
      case 259: return 0;
      case 260: return 0;
      case 261: return 0;
      case 262: return 0;
      case 263: return 1;
      case 264: return 1;
      case 265: return 1;
      case 266: return 1;
      case 267: return 1;
      case 268: return 1;
      case 269: return 1;
      case 270: return 0;
      case 271: return 1;
      case 272: return 1;
      case 273: return 0;
      case 274: return 0;
      case 275: return 0;
      case 276: return 0;
      case 277: return 1;
      case 278: return 1;
      case 279: return 1;
      case 280: return 1;
      case 281: return 1;
      case 282: return 1;
      case 283: return 1;
      case 284: return 0;
      case 285: return 1;
      case 286: return 1;
      case 287: return 0;
      case 288: return 0;
      case 289: return 0;
      case 290: return 0;
      case 291: return 1;
      case 292: return 1;
      case 293: return 1;
      case 294: return 1;
      case 295: return 1;
      case 296: return 1;
      case 297: return 1;
      case 298: return 0;
      case 299: return 1;
      case 300: return 1;
      case 301: return 0;
      case 302: return 0;
      case 303: return 0;
      case 304: return 0;
      case 305: return 1;
      case 306: return 1;
      case 307: return 1;
      case 308: return 1;
      case 309: return 1;
      case 310: return 1;
      case 311: return 1;
      case 312: return 0;
      case 313: return 1;
      case 314: return 1;
      case 315: return 1;
      case 316: return 1;
      case 317: return 1;
      case 318: return 0;
      case 319: return 1;
      case 320: return 1;
      case 321: return 1;
      case 322: return 1;
      case 323: return 1;
      case 324: return 1;
      case 325: return 1;
      case 326: return 0;
      case 327: return 1;
      case 328: return 1;
      case 329: return 0;
      case 330: return 0;
      case 331: return 0;
      case 332: return 0;
      case 333: return 1;
      case 334: return 1;
      case 335: return 1;
      case 336: return 1;
      case 337: return 1;
      case 338: return 1;
      case 339: return 1;
      case 340: return 0;
      case 341: return 1;
      case 342: return 1;
      case 343: return 0;
      case 344: return 0;
      case 345: return 0;
      case 346: return 0;
      case 347: return 1;
      case 348: return 1;
      case 349: return 1;
      case 350: return 1;
      case 351: return 1;
      case 352: return 1;
      case 353: return 1;
      case 354: return 0;
      case 355: return 1;
      case 356: return 1;
      case 357: return 0;
      case 358: return 0;
      case 359: return 0;
      case 360: return 0;
      case 361: return 1;
      case 362: return 1;
      case 363: return 1;
      case 364: return 1;
      case 365: return 1;
      case 366: return 1;
      case 367: return 1;
      case 368: return 0;
      case 369: return 1;
      case 370: return 1;
      case 371: return 0;
      case 372: return 0;
      case 373: return 0;
      case 374: return 0;
      case 375: return 1;
      case 376: return 1;
      case 377: return 1;
      case 378: return 1;
      case 379: return 1;
      case 380: return 1;
      case 381: return 1;
      case 382: return 0;
      case 383: return 1;
      case 384: return 1;
      case 385: return 0;
      case 386: return 0;
      case 387: return 0;
      case 388: return 0;
      case 389: return 1;
      case 390: return 1;
      case 391: return 1;
      case 392: return 1;
      case 393: return 1;
      case 394: return 1;
      case 395: return 1;
      case 396: return 0;
      case 397: return 1;
      case 398: return 1;
      case 399: return 0;
      case 400: return 0;
      case 401: return 0;
      case 402: return 0;
      case 403: return 1;
      case 404: return 1;
      case 405: return 1;
      case 406: return 1;
      case 407: return 1;
      case 408: return 1;
      case 409: return 1;
      case 410: return 0;
      case 411: return 1;
      case 412: return 1;
      case 413: return 0;
      case 414: return 0;
      case 415: return 0;
      case 416: return 0;
      case 417: return 1;
      case 418: return 1;
      case 419: return 1;
      case 420: return 1;
      case 421: return 1;
      case 422: return 1;
      case 423: return 1;
      case 424: return 0;
      case 425: return 1;
      case 426: return 1;
      case 427: return 0;
      case 428: return 0;
      case 429: return 0;
      case 430: return 0;
      case 431: return 1;
      case 432: return 1;
      case 433: return 1;
      case 434: return 1;
      case 435: return 1;
      case 436: return 1;
      case 437: return 1;
      case 438: return 0;
      case 439: return 1;
      case 440: return 1;
      case 441: return 0;
      case 442: return 0;
      case 443: return 0;
      case 444: return 0;
      case 445: return 1;
      case 446: return 1;
      case 447: return 1;
      case 448: return 1;
      case 449: return 1;
      case 450: return 1;
      case 451: return 1;
      case 452: return 0;
      case 453: return 1;
      case 454: return 1;
      case 455: return 1;
      case 456: return 1;
      case 457: return 1;
      case 458: return 0;
      case 459: return 1;
      case 460: return 1;
      case 461: return 1;
      case 462: return 1;
      case 463: return 1;
      case 464: return 1;
      case 465: return 125;
      case 466: return 125;
      case 467: return 125;
      case 468: return 125;
      case 469: return 125;
      case 470: return 125;
      case 471: return 125;
      case 472: return 125;
      case 473: return 125;
      case 474: return 125;
      case 475: return 125;
      case 476: return 125;
      case 477: return 125;
      case 478: return 125;
      case 479: return 125;
      case 480: return 125;
      case 481: return 1;
      case 482: return 1;
      case 483: return 1;
      case 484: return 1;
      case 485: return 1;
      case 486: return 1;
      case 487: return 0;
      case 488: return 1;
      case 489: return 1;
      case 490: return 0;
      case 491: return 0;
      case 492: return 0;
      case 493: return 0;
      case 494: return 1;
      case 495: return 1;
      case 496: return 1;
      case 497: return 1;
      case 498: return 1;
      case 499: return 1;
      case 500: return 1;
      case 501: return 0;
      case 502: return 1;
      case 503: return 1;
      case 504: return 0;
      case 505: return 0;
      case 506: return 0;
      case 507: return 0;
      case 508: return 1;
      case 509: return 1;
      case 510: return 1;
      case 511: return 1;
      case 512: return 1;
      case 513: return 1;
      case 514: return 1;
      case 515: return 0;
      case 516: return 1;
      case 517: return 1;
      case 518: return 1;
      case 519: return 1;
      case 520: return 1;
      case 521: return 0;
      case 522: return 1;
      case 523: return 1;
      case 524: return 1;
      case 525: return 1;
      case 526: return 1;
      case 527: return 1;
      case 528: return 1;
      case 529: return 0;
      case 530: return 1;
      case 531: return 1;
      case 532: return 0;
      case 533: return 0;
      case 534: return 0;
      case 535: return 0;
      case 536: return 1;
      case 537: return 1;
      case 538: return 1;
      case 539: return 1;
      case 540: return 1;
      case 541: return 1;
      case 542: return 1;
      case 543: return 0;
      case 544: return 1;
      case 545: return 1;
      case 546: return 0;
      case 547: return 0;
      case 548: return 0;
      case 549: return 0;
      case 550: return 1;
      case 551: return 1;
      case 552: return 1;
      case 553: return 1;
      case 554: return 1;
      case 555: return 1;
      case 556: return 1;
      case 557: return 0;
      case 558: return 1;
      case 559: return 1;
      case 560: return 0;
      case 561: return 0;
      case 562: return 0;
      case 563: return 0;
      case 564: return 1;
      case 565: return 1;
      case 566: return 1;
      case 567: return 1;
      case 568: return 1;
      case 569: return 1;
      case 570: return 1;
      case 571: return 0;
      case 572: return 1;
      case 573: return 1;
      case 574: return 0;
      case 575: return 0;
      case 576: return 0;
      case 577: return 0;
      case 578: return 1;
      case 579: return 1;
      case 580: return 1;
      case 581: return 1;
      case 582: return 1;
      case 583: return 1;
      case 584: return 1;
      case 585: return 0;
      case 586: return 1;
      case 587: return 1;
      case 588: return 0;
      case 589: return 0;
      case 590: return 0;
      case 591: return 0;
      case 592: return 1;
      case 593: return 1;
      case 594: return 1;
      case 595: return 1;
      case 596: return 1;
      case 597: return 1;
      case 598: return 1;
      case 599: return 0;
      case 600: return 1;
      case 601: return 1;
      case 602: return 0;
      case 603: return 0;
      case 604: return 0;
      case 605: return 0;
      case 606: return 1;
      case 607: return 1;
      case 608: return 1;
      case 609: return 1;
      case 610: return 1;
      case 611: return 1;
      case 612: return 1;
      case 613: return 0;
      case 614: return 1;
      case 615: return 1;
      case 616: return 0;
      case 617: return 0;
      case 618: return 0;
      case 619: return 0;
      case 620: return 1;
      case 621: return 1;
      case 622: return 1;
      case 623: return 1;
      case 624: return 1;
      case 625: return 1;
      case 626: return 1;
      case 627: return 0;
      case 628: return 1;
      case 629: return 1;
      case 630: return 0;
      case 631: return 0;
      case 632: return 0;
      case 633: return 0;
      case 634: return 1;
      case 635: return 1;
      case 636: return 1;
      case 637: return 1;
      case 638: return 1;
      case 639: return 1;
      case 640: return 1;
      case 641: return 0;
      case 642: return 1;
      case 643: return 1;
      case 644: return 0;
      case 645: return 0;
      case 646: return 0;
      case 647: return 0;
      case 648: return 1;
      case 649: return 1;
      case 650: return 1;
      case 651: return 1;
      case 652: return 1;
      case 653: return 1;
      case 654: return 1;
      case 655: return 0;
      case 656: return 1;
      case 657: return 1;
      case 658: return 1;
      case 659: return 1;
      case 660: return 1;
      case 661: return 0;
      case 662: return 1;
      case 663: return 1;
      case 664: return 1;
      case 665: return 1;
      case 666: return 1;
      case 667: return 1;
      case 668: return 1;
      case 669: return 0;
      case 670: return 1;
      case 671: return 1;
      case 672: return 0;
      case 673: return 0;
      case 674: return 0;
      case 675: return 0;
      case 676: return 1;
      case 677: return 1;
      case 678: return 1;
      case 679: return 1;
      case 680: return 1;
      case 681: return 1;
      case 682: return 1;
      case 683: return 0;
      case 684: return 1;
      case 685: return 1;
      case 686: return 0;
      case 687: return 0;
      case 688: return 0;
      case 689: return 0;
      case 690: return 1;
      case 691: return 1;
      case 692: return 1;
      case 693: return 1;
      case 694: return 1;
      case 695: return 1;
      case 696: return 125;
      case 697: return 125;
      case 698: return 125;
      case 699: return 125;
      case 700: return 125;
      case 701: return 125;
      case 702: return 125;
      case 703: return 125;
      case 704: return 125;
      case 705: return 125;
      case 706: return 125;
      case 707: return 125;
      case 708: return 125;
      case 709: return 125;
      case 710: return 125;
      case 711: return 125;
      case 712: return 1;
      case 713: return 1;
      case 714: return 1;
      case 715: return 1;
      case 716: return 1;
      case 717: return 1;
      case 718: return 0;
      case 719: return 1;
      case 720: return 1;
      case 721: return 1;
      case 722: return 1;
      case 723: return 1;
      case 724: return 0;
      case 725: return 1;
      case 726: return 1;
      case 727: return 1;
      case 728: return 1;
      case 729: return 1;
      case 730: return 1;
      case 731: return 1;
      case 732: return 0;
      case 733: return 1;
      case 734: return 1;
      case 735: return 0;
      case 736: return 0;
      case 737: return 0;
      case 738: return 0;
      case 739: return 1;
      case 740: return 1;
      case 741: return 1;
      case 742: return 1;
      case 743: return 1;
      case 744: return 1;
      case 745: return 1;
      case 746: return 0;
      case 747: return 1;
      case 748: return 1;
      case 749: return 0;
      case 750: return 0;
      case 751: return 0;
      case 752: return 0;
      case 753: return 1;
      case 754: return 1;
      case 755: return 1;
      case 756: return 1;
      case 757: return 1;
      case 758: return 1;
      case 759: return 1;
      case 760: return 0;
      case 761: return 1;
      case 762: return 1;
      case 763: return 0;
      case 764: return 0;
      case 765: return 0;
      case 766: return 0;
      case 767: return 1;
      case 768: return 1;
      case 769: return 1;
      case 770: return 1;
      case 771: return 1;
      case 772: return 1;
      case 773: return 1;
      case 774: return 0;
      case 775: return 1;
      case 776: return 1;
      case 777: return 0;
      case 778: return 0;
      case 779: return 0;
      case 780: return 0;
      case 781: return 1;
      case 782: return 1;
      case 783: return 1;
      case 784: return 1;
      case 785: return 1;
      case 786: return 1;
      case 787: return 1;
      case 788: return 0;
      case 789: return 1;
      case 790: return 1;
      case 791: return 0;
      case 792: return 0;
      case 793: return 0;
      case 794: return 0;
      case 795: return 1;
      case 796: return 1;
      case 797: return 1;
      case 798: return 1;
      case 799: return 1;
      case 800: return 1;
      case 801: return 1;
      case 802: return 0;
      case 803: return 1;
      case 804: return 1;
      case 805: return 0;
      case 806: return 0;
      case 807: return 0;
      case 808: return 0;
      case 809: return 1;
      case 810: return 1;
      case 811: return 1;
      case 812: return 1;
      case 813: return 1;
      case 814: return 1;
      case 815: return 1;
      case 816: return 0;
      case 817: return 1;
      case 818: return 1;
      case 819: return 0;
      case 820: return 0;
      case 821: return 0;
      case 822: return 0;
      case 823: return 1;
      case 824: return 1;
      case 825: return 1;
      case 826: return 1;
      case 827: return 1;
      case 828: return 1;
      case 829: return 1;
      case 830: return 0;
      case 831: return 1;
      case 832: return 1;
      case 833: return 0;
      case 834: return 0;
      case 835: return 0;
      case 836: return 0;
      case 837: return 1;
      case 838: return 1;
      case 839: return 1;
      case 840: return 1;
      case 841: return 1;
      case 842: return 1;
      case 843: return 1;
      case 844: return 0;
      case 845: return 1;
      case 846: return 1;
      case 847: return 0;
      case 848: return 0;
      case 849: return 0;
      case 850: return 0;
      case 851: return 1;
      case 852: return 1;
      case 853: return 1;
      case 854: return 1;
      case 855: return 1;
      case 856: return 1;
      case 857: return 1;
      case 858: return 0;
      case 859: return 1;
      case 860: return 1;
      case 861: return 1;
      case 862: return 1;
      case 863: return 1;
      case 864: return 0;
      case 865: return 1;
      case 866: return 1;
      case 867: return 1;
      case 868: return 1;
      case 869: return 1;
      case 870: return 1;
      case 871: return 1;
      case 872: return 0;
      case 873: return 1;
      case 874: return 1;
      case 875: return 0;
      case 876: return 0;
      case 877: return 0;
      case 878: return 0;
      case 879: return 1;
      case 880: return 1;
      case 881: return 1;
      case 882: return 1;
      case 883: return 1;
      case 884: return 1;
      case 885: return 1;
      case 886: return 0;
      case 887: return 1;
      case 888: return 1;
      case 889: return 0;
      case 890: return 0;
      case 891: return 0;
      case 892: return 0;
      case 893: return 1;
      case 894: return 1;
      case 895: return 1;
      case 896: return 1;
      case 897: return 1;
      case 898: return 1;
      case 899: return 1;
      case 900: return 0;
      case 901: return 1;
      case 902: return 1;
      case 903: return 0;
      case 904: return 0;
      case 905: return 0;
      case 906: return 0;
      case 907: return 1;
      case 908: return 1;
      case 909: return 1;
      case 910: return 1;
      case 911: return 1;
      case 912: return 1;
      case 913: return 1;
      case 914: return 0;
      case 915: return 1;
      case 916: return 1;
      case 917: return 0;
      case 918: return 0;
      case 919: return 0;
      case 920: return 0;
      case 921: return 1;
      case 922: return 1;
      case 923: return 1;
      case 924: return 1;
      case 925: return 1;
      case 926: return 1;
      case 927: return 250;
      case 928: return 250;
      case 929: return 250;
      case 930: return 250;
      case 931: return 250;
      case 932: return 250;
      case 933: return 250;
      case 934: return 250;
      case 935: return 250;
      case 936: return 250;
      case 937: return 250;
      case 938: return 250;
      case 939: return 250;
      case 940: return 250;
      case 941: return 250;
      case 942: return 250;
      case 943: return 1;
      case 944: return 1;
      case 945: return 1;
      case 946: return 1;
      case 947: return 1;
      case 948: return 1;
      case 949: return 0;
      case 950: return 1;
      case 951: return 1;
      case 952: return 0;
      case 953: return 0;
      case 954: return 0;
      case 955: return 0;
      case 956: return 1;
      case 957: return 1;
      case 958: return 1;
      case 959: return 1;
      case 960: return 1;
      case 961: return 1;
      case 962: return 1;
      case 963: return 0;
      case 964: return 1;
      case 965: return 1;
      case 966: return 0;
      case 967: return 0;
      case 968: return 0;
      case 969: return 0;
      case 970: return 1;
      case 971: return 1;
      case 972: return 1;
      case 973: return 1;
      case 974: return 1;
      case 975: return 1;
      case 976: return 1;
      case 977: return 0;
      case 978: return 1;
      case 979: return 1;
      case 980: return 0;
      case 981: return 0;
      case 982: return 0;
      case 983: return 0;
      case 984: return 1;
      case 985: return 1;
      case 986: return 1;
      case 987: return 1;
      case 988: return 1;
      case 989: return 1;
      case 990: return 1;
      case 991: return 0;
      case 992: return 1;
      case 993: return 1;
      case 994: return 0;
      case 995: return 0;
      case 996: return 0;
      case 997: return 0;
      case 998: return 1;
      case 999: return 1;
      case 1000: return 1;
      case 1001: return 1;
      case 1002: return 1;
      case 1003: return 1;
      case 1004: return 1;
      case 1005: return 0;
      case 1006: return 1;
      case 1007: return 1;
      case 1008: return 0;
      case 1009: return 0;
      case 1010: return 0;
      case 1011: return 0;
      case 1012: return 1;
      case 1013: return 1;
      case 1014: return 1;
      case 1015: return 1;
      case 1016: return 1;
      case 1017: return 1;
      case 1018: return 1;
      case 1019: return 0;
      case 1020: return 1;
      case 1021: return 1;
      case 1022: return 0;
      case 1023: return 0;
      case 1024: return 0;
      case 1025: return 0;
      case 1026: return 1;
      case 1027: return 1;
      case 1028: return 1;
      case 1029: return 1;
      case 1030: return 1;
      case 1031: return 1;
      case 1032: return 1;
      case 1033: return 0;
      case 1034: return 1;
      case 1035: return 1;
      case 1036: return 0;
      case 1037: return 0;
      case 1038: return 0;
      case 1039: return 0;
      case 1040: return 1;
      case 1041: return 1;
      case 1042: return 1;
      case 1043: return 1;
      case 1044: return 1;
      case 1045: return 1;
      case 1046: return 1;
      case 1047: return 0;
      case 1048: return 1;
      case 1049: return 1;
      case 1050: return 0;
      case 1051: return 0;
      case 1052: return 0;
      case 1053: return 0;
      case 1054: return 1;
      case 1055: return 1;
      case 1056: return 1;
      case 1057: return 1;
      case 1058: return 1;
      case 1059: return 1;
      case 1060: return 1;
      case 1061: return 0;
      case 1062: return 1;
      case 1063: return 1;
      case 1064: return 1;
      case 1065: return 1;
      case 1066: return 1;
      case 1067: return 0;
      case 1068: return 1;
      case 1069: return 1;
      case 1070: return 1;
      case 1071: return 1;
      case 1072: return 1;
      case 1073: return 1;
      case 1074: return 1;
      case 1075: return 0;
      case 1076: return 1;
      case 1077: return 1;
      case 1078: return 0;
      case 1079: return 0;
      case 1080: return 0;
      case 1081: return 0;
      case 1082: return 1;
      case 1083: return 1;
      case 1084: return 1;
      case 1085: return 1;
      case 1086: return 1;
      case 1087: return 1;
      case 1088: return 1;
      case 1089: return 0;
      case 1090: return 1;
      case 1091: return 1;
      case 1092: return 0;
      case 1093: return 0;
      case 1094: return 0;
      case 1095: return 0;
      case 1096: return 1;
      case 1097: return 1;
      case 1098: return 1;
      case 1099: return 1;
      case 1100: return 1;
      case 1101: return 1;
      case 1102: return 1;
      case 1103: return 0;
      case 1104: return 1;
      case 1105: return 1;
      case 1106: return 0;
      case 1107: return 0;
      case 1108: return 0;
      case 1109: return 0;
      case 1110: return 1;
      case 1111: return 1;
      case 1112: return 1;
      case 1113: return 1;
      case 1114: return 1;
      case 1115: return 1;
      case 1116: return 1;
      case 1117: return 0;
      case 1118: return 1;
      case 1119: return 1;
      case 1120: return 0;
      case 1121: return 0;
      case 1122: return 0;
      case 1123: return 0;
      case 1124: return 1;
      case 1125: return 1;
      case 1126: return 1;
      case 1127: return 1;
      case 1128: return 1;
      case 1129: return 1;
      case 1130: return 1;
      case 1131: return 0;
      case 1132: return 1;
      case 1133: return 1;
      case 1134: return 0;
      case 1135: return 0;
      case 1136: return 0;
      case 1137: return 0;
      case 1138: return 1;
      case 1139: return 1;
      case 1140: return 1;
      case 1141: return 1;
      case 1142: return 1;
      case 1143: return 1;
      case 1144: return 1;
      case 1145: return 0;
      case 1146: return 1;
      case 1147: return 1;
      case 1148: return 0;
      case 1149: return 0;
      case 1150: return 0;
      case 1151: return 0;
      case 1152: return 1;
      case 1153: return 1;
      case 1154: return 1;
      case 1155: return 1;
      case 1156: return 1;
      case 1157: return 1;
      case 1158: return 250;
      case 1159: return 250;
      case 1160: return 250;
      case 1161: return 250;
      case 1162: return 250;
      case 1163: return 250;
      case 1164: return 250;
      case 1165: return 250;
      case 1166: return 250;
      case 1167: return 250;
      case 1168: return 250;
      case 1169: return 250;
      case 1170: return 250;
      case 1171: return 250;
      case 1172: return 250;
      case 1173: return 250;
      case 1174: return 1;
      case 1175: return 1;
      case 1176: return 1;
      case 1177: return 1;
      case 1178: return 1;
      case 1179: return 1;
      case 1180: return 0;
      case 1181: return 1;
      case 1182: return 1;
      case 1183: return 0;
      case 1184: return 0;
      case 1185: return 0;
      case 1186: return 0;
      case 1187: return 1;
      case 1188: return 1;
      case 1189: return 1;
      case 1190: return 1;
      case 1191: return 1;
      case 1192: return 1;
      case 1193: return 1;
      case 1194: return 0;
      case 1195: return 1;
      case 1196: return 1;
      case 1197: return 0;
      case 1198: return 0;
      case 1199: return 0;
      case 1200: return 0;
      case 1201: return 1;
      case 1202: return 1;
      case 1203: return 1;
      case 1204: return 1;
      case 1205: return 1;
      case 1206: return 1;
      case 1207: return 1;
      case 1208: return 0;
      case 1209: return 1;
      case 1210: return 1;
      case 1211: return 0;
      case 1212: return 0;
      case 1213: return 0;
      case 1214: return 0;
      case 1215: return 1;
      case 1216: return 1;
      case 1217: return 1;
      case 1218: return 1;
      case 1219: return 1;
      case 1220: return 1;
      case 1221: return 1;
      case 1222: return 0;
      case 1223: return 1;
      case 1224: return 1;
      case 1225: return 0;
      case 1226: return 0;
      case 1227: return 0;
      case 1228: return 0;
      case 1229: return 1;
      case 1230: return 1;
      case 1231: return 1;
      case 1232: return 1;
      case 1233: return 1;
      case 1234: return 1;
      case 1235: return 1;
      case 1236: return 0;
      case 1237: return 1;
      case 1238: return 1;
      case 1239: return 0;
      case 1240: return 0;
      case 1241: return 0;
      case 1242: return 0;
      case 1243: return 1;
      case 1244: return 1;
      case 1245: return 1;
      case 1246: return 1;
      case 1247: return 1;
      case 1248: return 1;
      case 1249: return 1;
      case 1250: return 0;
      case 1251: return 1;
      case 1252: return 1;
      case 1253: return 0;
      case 1254: return 0;
      case 1255: return 0;
      case 1256: return 0;
      case 1257: return 1;
      case 1258: return 1;
      case 1259: return 1;
      case 1260: return 1;
      case 1261: return 1;
      case 1262: return 1;
      case 1263: return 1;
      case 1264: return 0;
      case 1265: return 1;
      case 1266: return 1;
      case 1267: return 1;
      case 1268: return 1;
      case 1269: return 1;
      case 1270: return 0;
      case 1271: return 1;
      case 1272: return 1;
      case 1273: return 1;
      case 1274: return 1;
      case 1275: return 1;
      case 1276: return 1;
      case 1277: return 1;
      case 1278: return 0;
      case 1279: return 1;
      case 1280: return 1;
      case 1281: return 0;
      case 1282: return 0;
      case 1283: return 0;
      case 1284: return 0;
      case 1285: return 1;
      case 1286: return 1;
      case 1287: return 1;
      case 1288: return 1;
      case 1289: return 1;
      case 1290: return 1;
      case 1291: return 1;
      case 1292: return 0;
      case 1293: return 1;
      case 1294: return 1;
      case 1295: return 0;
      case 1296: return 0;
      case 1297: return 0;
      case 1298: return 0;
      case 1299: return 1;
      case 1300: return 1;
      case 1301: return 1;
      case 1302: return 1;
      case 1303: return 1;
      case 1304: return 1;
      case 1305: return 1;
      case 1306: return 0;
      case 1307: return 1;
      case 1308: return 1;
      case 1309: return 0;
      case 1310: return 0;
      case 1311: return 0;
      case 1312: return 0;
      case 1313: return 1;
      case 1314: return 1;
      case 1315: return 1;
      case 1316: return 1;
      case 1317: return 1;
      case 1318: return 1;
      case 1319: return 1;
      case 1320: return 0;
      case 1321: return 1;
      case 1322: return 1;
      case 1323: return 0;
      case 1324: return 0;
      case 1325: return 0;
      case 1326: return 0;
      case 1327: return 1;
      case 1328: return 1;
      case 1329: return 1;
      case 1330: return 1;
      case 1331: return 1;
      case 1332: return 1;
      case 1333: return 1;
      case 1334: return 0;
      case 1335: return 1;
      case 1336: return 1;
      case 1337: return 0;
      case 1338: return 0;
      case 1339: return 0;
      case 1340: return 0;
      case 1341: return 1;
      case 1342: return 1;
      case 1343: return 1;
      case 1344: return 1;
      case 1345: return 1;
      case 1346: return 1;
      case 1347: return 1;
      case 1348: return 0;
      case 1349: return 1;
      case 1350: return 1;
      case 1351: return 0;
      case 1352: return 0;
      case 1353: return 0;
      case 1354: return 0;
      case 1355: return 1;
      case 1356: return 1;
      case 1357: return 1;
      case 1358: return 1;
      case 1359: return 1;
      case 1360: return 1;
      case 1361: return 1;
      case 1362: return 0;
      case 1363: return 1;
      case 1364: return 1;
      case 1365: return 0;
      case 1366: return 0;
      case 1367: return 0;
      case 1368: return 0;
      case 1369: return 1;
      case 1370: return 1;
      case 1371: return 1;
      case 1372: return 1;
      case 1373: return 1;
      case 1374: return 1;
      case 1375: return 1;
      case 1376: return 0;
      case 1377: return 1;
      case 1378: return 1;
      case 1379: return 0;
      case 1380: return 0;
      case 1381: return 0;
      case 1382: return 0;
      case 1383: return 1;
      case 1384: return 1;
      case 1385: return 1;
      case 1386: return 1;
      case 1387: return 1;
      case 1388: return 1;
      case 1389: return 125;
      case 1390: return 125;
      case 1391: return 125;
      case 1392: return 125;
      case 1393: return 125;
      case 1394: return 125;
      case 1395: return 125;
      case 1396: return 125;
      case 1397: return 125;
      case 1398: return 125;
      case 1399: return 125;
      case 1400: return 125;
      case 1401: return 125;
      case 1402: return 125;
      case 1403: return 125;
      case 1404: return 125;
      case 1405: return 1;
      case 1406: return 1;
      case 1407: return 1;
      case 1408: return 1;
      case 1409: return 1;
      case 1410: return 250;
      case 1411: return 250;
      case 1412: return 250;
      case 1413: return 250;
      case 1414: return 250;
      case 1415: return 250;
      case 1416: return 250;
      case 1417: return 250;
      case 1418: return 250;
      case 1419: return 250;
      case 1420: return 250;
      case 1421: return 250;
      case 1422: return 250;
      case 1423: return 250;
      case 1424: return 250;
      case 1425: return 250;
      case 1426: return 1;
      case 1427: return 1;
      case 1428: return 1;
      case 1429: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa10custom_twoIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 0;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 0;
      case 5: return 1;
      case 6: return 1;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 0;
      case 5: return 1;
      case 6: return 1;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 0;
      case 5: return 1;
      case 6: return 1;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 0;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 125000;
      case 3: return 125000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs10custom_twoIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 0;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 0;
      case 5: return 1;
      case 6: return 1;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 0;
      case 5: return 1;
      case 6: return 1;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt19custom_constant_addItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt19custom_constant_subItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt19custom_constant_andItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt18custom_constant_orItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 250000;
      case 3: return 250000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 0;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 0;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 0;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 0;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm19custom_constant_addImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm19custom_constant_subImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm19custom_constant_andImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm18custom_constant_orImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1000000;
      case 3: return 1000000;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf10custom_twoIfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId10custom_twoIdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId19custom_constant_addIdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId19custom_constant_subIdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 2000000;
      case 5: return 2000000;
      case 6: return 0;
      case 7: return 500;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1000000;
      case 5: return 1000000;
      case 6: return 1000000;
      case 7: return 1000000;
      case 8: return 0;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/McGill/exptree.c") {
    if (FunctionName == "newWorkList") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "newCombList") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "initWorkList") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "initCombList") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "aveSolution") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "calculate") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "printSolution") {
      switch(AccessId) {
      case 0: return 2;
      case 1: return 2;
      case 2: return 2;
      case 3: return 2;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "printList") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "recSearch") {
      switch(AccessId) {
      case 0: return 46;
      case 1: return 46;
      case 2: return 46;
      case 3: return 46;
      case 4: return 35;
      case 5: return 35;
      case 6: return 35;
      case 7: return 35;
      case 8: return 35;
      case 9: return 6;
      case 10: return 6;
      case 11: return 6;
      case 12: return 6;
      case 13: return 2;
      case 14: return 2;
      case 15: return 2;
      case 16: return 2;
      case 17: return 2;
      case 18: return 2;
      case 19: return 2;
      case 20: return 2;
      case 21: return 2;
      case 22: return 2;
      case 23: return 2;
      case 24: return 2;
      case 25: return 4;
      case 26: return 4;
      case 27: return 4;
      case 28: return 4;
      case 29: return 4;
      case 30: return 4;
      case 31: return 6;
      case 32: return 0;
      case 33: return 11;
      case 34: return 30;
      case 35: return 30;
      case 36: return 30;
      case 37: return 14;
      case 38: return 14;
      case 39: return 14;
      case 40: return 14;
      case 41: return 14;
      case 42: return 14;
      case 43: return 30;
      case 44: return 30;
      case 45: return 30;
      case 46: return 30;
      case 47: return 30;
      case 48: return 30;
      case 49: return 30;
      case 50: return 30;
      case 51: return 30;
      case 52: return 168;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "doSearch") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 3;
      case 7: return 2;
      case 8: return 1;
      case 9: return 2;
      case 10: return 2;
      case 11: return 2;
      case 12: return 2;
      case 13: return 0;
      case 14: return 1;
      case 15: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "getInput") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 0;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 0;
      case 12: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "earch") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/McGill/misr.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 0;
      case 4: return 1;
      case 5: return 0;
      case 6: return 1;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 11;
      case 13: return 11;
      case 14: return 11;
      case 15: return 11;
      case 16: return 100000;
      case 17: return 1100000;
      case 18: return 1100000;
      case 19: return 1100000;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "create_link_list") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "init") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "imulate") {
      switch(AccessId) {
      case 0: return 100000;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 9000000;
      case 10: return 1000000;
      case 11: return 9000000;
      case 12: return 9000000;
      case 13: return 9000000;
      case 14: return 9000000;
      case 15: return 9000000;
      case 16: return 9000000;
      case 17: return 1000000;
      case 18: return 1000000;
      case 19: return 0;
      case 20: return 1000000;
      case 21: return 1000000;
      case 22: return 100000;
      case 23: return 200000;
      case 24: return 200000;
      case 25: return 200000;
      case 26: return 200000;
      case 27: return 200000;
      case 28: return 200000;
      case 29: return 200000;
      case 30: return 200000;
      case 31: return 200000;
      case 32: return 200000;
      case 33: return 200000;
      case 34: return 200000;
      case 35: return 200000;
      case 36: return 200000;
      case 37: return 200000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "kill_list") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/McGill/queens.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      case 58: return 1;
      case 59: return 1;
      case 60: return 1;
      case 61: return 1;
      case 62: return 1;
      case 63: return 1;
      case 64: return 1;
      case 65: return 1;
      case 66: return 1;
      case 67: return 1;
      case 68: return 1;
      case 69: return 1;
      case 70: return 1;
      case 71: return 1;
      case 72: return 1;
      case 73: return 1;
      case 74: return 1;
      case 75: return 1;
      case 76: return 1;
      case 77: return 1;
      case 78: return 1;
      case 79: return 1;
      case 80: return 1;
      case 81: return 1;
      case 82: return 1;
      case 83: return 1;
      case 84: return 1;
      case 85: return 1;
      case 86: return 1;
      case 87: return 1;
      case 88: return 1;
      case 89: return 1;
      case 90: return 1;
      case 91: return 1;
      case 92: return 1;
      case 93: return 1;
      case 94: return 1;
      case 95: return 1;
      case 96: return 1;
      case 97: return 1;
      case 98: return 1;
      case 99: return 1;
      case 100: return 1;
      case 101: return 1;
      case 102: return 1;
      case 103: return 1;
      case 104: return 1;
      case 105: return 1;
      case 106: return 1;
      case 107: return 1;
      case 108: return 1;
      case 109: return 1;
      case 110: return 1;
      case 111: return 1;
      case 112: return 1;
      case 113: return 1;
      case 114: return 1;
      case 115: return 1;
      case 116: return 1;
      case 117: return 1;
      case 118: return 1;
      case 119: return 1;
      case 120: return 1;
      case 121: return 1;
      case 122: return 1;
      case 123: return 1;
      case 124: return 1;
      case 125: return 1;
      case 126: return 1;
      case 127: return 1;
      case 128: return 1;
      case 129: return 1;
      case 130: return 1;
      case 131: return 1;
      case 132: return 1;
      case 133: return 1;
      case 134: return 1;
      case 135: return 1;
      case 136: return 1;
      case 137: return 1;
      case 138: return 1;
      case 139: return 1;
      case 140: return 1;
      case 141: return 1;
      case 142: return 1;
      case 143: return 1;
      case 144: return 1;
      case 145: return 1;
      case 146: return 1;
      case 147: return 1;
      case 148: return 1;
      case 149: return 1;
      case 150: return 1;
      case 151: return 1;
      case 152: return 1;
      case 153: return 1;
      case 154: return 1;
      case 155: return 1;
      case 156: return 1;
      case 157: return 1;
      case 158: return 1;
      case 159: return 1;
      case 160: return 1;
      case 161: return 1;
      case 162: return 1;
      case 163: return 1;
      case 164: return 1;
      case 165: return 1;
      case 166: return 1;
      case 167: return 1;
      case 168: return 1;
      case 169: return 0;
      case 170: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "find") {
      switch(AccessId) {
      case 0: return 27358553;
      case 1: return 365596;
      case 2: return 365596;
      case 3: return 365596;
      case 4: return 365596;
      case 5: return 26992957;
      case 6: return 377901398;
      case 7: return 99280504;
      case 8: return 55391321;
      case 9: return 27358552;
      case 10: return 27358552;
      case 11: return 27358552;
      case 12: return 27358552;
      case 13: return 27358552;
      case 14: return 27358552;
      case 15: return 27358552;
      case 16: return 27358552;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "pboard") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/McGill/chomp.c") {
    if (FunctionName == "copy_data") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "next_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "melt_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "equal_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "valid_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "dump_list") {
      switch(AccessId) {
      case 0: return 180180;
      case 1: return 180180;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "dump_play") {
      switch(AccessId) {
      case 0: return 6435;
      case 1: return 6435;
      case 2: return 6435;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "get_value") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "how_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "how_move") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "how_list") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "how_play") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "in_wanted") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "make_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "make_list") {
      switch(AccessId) {
      case 0: return 6435;
      case 1: return 6435;
      case 2: return 6435;
      case 3: return 6435;
      case 4: return 173745;
      case 5: return 0;
      case 6: return 0;
      case 7: return 495495;
      case 8: return 0;
      case 9: return 0;
      case 10: return 1060059;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 1555554;
      case 24: return 1555554;
      case 25: return 725152;
      case 26: return 834834;
      case 27: return 834834;
      case 28: return 180180;
      case 29: return 180180;
      case 30: return 180180;
      case 31: return 180180;
      case 32: return 180180;
      case 33: return 180180;
      case 34: return 88863542;
      case 35: return 88863542;
      case 36: return 146527621;
      case 37: return 146527621;
      case 38: return 65029;
      case 39: return 65029;
      case 40: return 180180;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 42042;
      case 50: return 222222;
      case 51: return 48477;
      case 52: return 6435;
      case 53: return 6434;
      case 54: return 6434;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "make_play") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 5380840;
      case 6: return 5380840;
      case 7: return 597871;
      case 8: return 597871;
      case 9: return 4782969;
      case 10: return 4782969;
      case 11: return 4782969;
      case 12: return 13797837;
      case 13: return 6435;
      case 14: return 6435;
      case 15: return 1;
      case 16: return 6435;
      case 17: return 6435;
      case 18: return 6435;
      case 19: return 6435;
      case 20: return 6435;
      case 21: return 6435;
      case 22: return 6435;
      case 23: return 6435;
      case 24: return 6435;
      case 25: return 6435;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "make_wanted") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "get_good_move") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "get_winning_move") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "where") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "get_real_move") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 0;
      case 5: return 0;
      case 6: return 7;
      case 7: return 16344;
      case 8: return 18732;
      case 9: return 18732;
      case 10: return 16325;
      case 11: return 19;
      case 12: return 18;
      case 13: return 17;
      case 14: return 0;
      case 15: return 0;
      case 16: return 148;
      case 17: return 150;
      case 18: return 123130;
      case 19: return 155740;
      case 20: return 155740;
      case 21: return 122980;
      case 22: return 150;
      case 23: return 18;
      case 24: return 30;
      case 25: return 30;
      case 26: return 18;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Stanford/Bubblesort.c") {
    if (FunctionName == "Initrand") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Rand") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "bInitarr") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Bubble") {
      switch(AccessId) {
      case 0: return 100;
      case 1: return 100;
      case 2: return 100;
      case 3: return 50000;
      case 4: return 49700;
      case 5: return 700;
      case 6: return 49900;
      case 7: return 100;
      case 8: return 100;
      case 9: return 49900;
      case 10: return 6225000;
      case 11: return 3195200;
      case 12: return 3195200;
      case 13: return 6225000;
      case 14: return 25000;
      case 15: return 14900;
      case 16: return 14900;
      case 17: return 100;
      case 18: return 100;
      case 19: return 100;
      case 20: return 100;
      case 21: return 100;
      case 22: return 100;
      case 23: return 3211100;
      case 24: return 3211100;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Stanford/Quicksort.c") {
    if (FunctionName == "Initrand") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Rand") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Initarr") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Quicksort") {
      switch(AccessId) {
      case 0: return 443400;
      case 1: return 3801700;
      case 2: return 4561600;
      case 3: return 1563000;
      case 4: return 1563000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Quick") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 100;
      case 1: return 100;
      case 2: return 100;
      case 3: return 500000;
      case 4: return 499500;
      case 5: return 900;
      case 6: return 499900;
      case 7: return 100;
      case 8: return 100;
      case 9: return 100;
      case 10: return 100;
      case 11: return 100;
      case 12: return 100;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Stanford/Perm.c") {
    if (FunctionName == "Initrand") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Rand") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "wap") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Initialize") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Permute") {
      switch(AccessId) {
      case 0: return 4330000;
      case 1: return 4330000;
      case 2: return 2519500;
      case 3: return 2519500;
      case 4: return 2519500;
      case 5: return 2519500;
      case 6: return 2519500;
      case 7: return 2519500;
      case 8: return 2519500;
      case 9: return 2519500;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Perm") {
      switch(AccessId) {
      case 0: return 100;
      case 1: return 100;
      case 2: return 100;
      case 3: return 100;
      case 4: return 100;
      case 5: return 100;
      case 6: return 100;
      case 7: return 100;
      case 8: return 100;
      case 9: return 100;
      case 10: return 100;
      case 11: return 100;
      case 12: return 100;
      case 13: return 100;
      case 14: return 100;
      case 15: return 100;
      case 16: return 100;
      case 17: return 100;
      case 18: return 100;
      case 19: return 100;
      case 20: return 100;
      case 21: return 100;
      case 22: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Stanford/Towers.c") {
    if (FunctionName == "Initrand") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Rand") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Makenull") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Getelement") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Push") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Init") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Pop") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Move") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "tower") {
      switch(AccessId) {
      case 0: return 819200;
      case 1: return 819200;
      case 2: return 819200;
      case 3: return 819200;
      case 4: return 819200;
      case 5: return 819200;
      case 6: return 819200;
      case 7: return 819200;
      case 8: return 812800;
      case 9: return 819200;
      case 10: return 819200;
      case 11: return 819200;
      case 12: return 0;
      case 13: return 819200;
      case 14: return 819200;
      case 15: return 819200;
      case 16: return 819200;
      case 17: return 819200;
      case 18: return 819100;
      case 19: return 819100;
      case 20: return 819100;
      case 21: return 819100;
      case 22: return 819100;
      case 23: return 819100;
      case 24: return 819100;
      case 25: return 819100;
      case 26: return 800100;
      case 27: return 819100;
      case 28: return 819100;
      case 29: return 819100;
      case 30: return 0;
      case 31: return 819100;
      case 32: return 819100;
      case 33: return 819100;
      case 34: return 819100;
      case 35: return 819100;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Towers") {
      switch(AccessId) {
      case 0: return 100;
      case 1: return 100;
      case 2: return 100;
      case 3: return 100;
      case 4: return 100;
      case 5: return 100;
      case 6: return 100;
      case 7: return 100;
      case 8: return 100;
      case 9: return 100;
      case 10: return 100;
      case 11: return 100;
      case 12: return 100;
      case 13: return 100;
      case 14: return 100;
      case 15: return 100;
      case 16: return 100;
      case 17: return 100;
      case 18: return 100;
      case 19: return 100;
      case 20: return 1300;
      case 21: return 1400;
      case 22: return 1400;
      case 23: return 1400;
      case 24: return 0;
      case 25: return 1400;
      case 26: return 1400;
      case 27: return 1400;
      case 28: return 1300;
      case 29: return 100;
      case 30: return 100;
      case 31: return 100;
      case 32: return 100;
      case 33: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Stanford/Puzzle.c") {
    if (FunctionName == "Initrand") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Rand") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Fit") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Place") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Remove") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Trial") {
      switch(AccessId) {
      case 0: return 200500;
      case 1: return 200500;
      case 2: return 2591700;
      case 3: return 2591700;
      case 4: return 1533800;
      case 5: return 53889000;
      case 6: return 5222300;
      case 7: return 5509500;
      case 8: return 696200;
      case 9: return 5509500;
      case 10: return 89200;
      case 11: return 89200;
      case 12: return 200400;
      case 13: return 2301700;
      case 14: return 198700;
      case 15: return 5455300;
      case 16: return 689300;
      case 17: return 5455300;
      case 18: return 88500;
      case 19: return 88500;
      case 20: return 198700;
      case 21: return 198700;
      case 22: return 198700;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 393300;
      case 37: return 389200;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      case 62: return 0;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 0;
      case 69: return 0;
      case 70: return 0;
      case 71: return 0;
      case 72: return 0;
      case 73: return 0;
      case 74: return 0;
      case 75: return 0;
      case 76: return 0;
      case 77: return 0;
      case 78: return 0;
      case 79: return 0;
      case 80: return 0;
      case 81: return 0;
      case 82: return 0;
      case 83: return 0;
      case 84: return 0;
      case 85: return 0;
      case 86: return 0;
      case 87: return 0;
      case 88: return 0;
      case 89: return 0;
      case 90: return 0;
      case 91: return 0;
      case 92: return 0;
      case 93: return 0;
      case 94: return 0;
      case 95: return 0;
      case 96: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Puzzle") {
      switch(AccessId) {
      case 0: return 100;
      case 1: return 100;
      case 2: return 100;
      case 3: return 100;
      case 4: return 100;
      case 5: return 100;
      case 6: return 100;
      case 7: return 100;
      case 8: return 100;
      case 9: return 100;
      case 10: return 100;
      case 11: return 100;
      case 12: return 100;
      case 13: return 100;
      case 14: return 100;
      case 15: return 100;
      case 16: return 100;
      case 17: return 100;
      case 18: return 100;
      case 19: return 100;
      case 20: return 100;
      case 21: return 100;
      case 22: return 100;
      case 23: return 100;
      case 24: return 100;
      case 25: return 100;
      case 26: return 100;
      case 27: return 100;
      case 28: return 100;
      case 29: return 100;
      case 30: return 100;
      case 31: return 100;
      case 32: return 100;
      case 33: return 100;
      case 34: return 100;
      case 35: return 100;
      case 36: return 100;
      case 37: return 100;
      case 38: return 100;
      case 39: return 100;
      case 40: return 100;
      case 41: return 100;
      case 42: return 100;
      case 43: return 100;
      case 44: return 100;
      case 45: return 100;
      case 46: return 100;
      case 47: return 100;
      case 48: return 100;
      case 49: return 100;
      case 50: return 100;
      case 51: return 100;
      case 52: return 100;
      case 53: return 100;
      case 54: return 100;
      case 55: return 100;
      case 56: return 100;
      case 57: return 100;
      case 58: return 100;
      case 59: return 100;
      case 60: return 100;
      case 61: return 100;
      case 62: return 100;
      case 63: return 100;
      case 64: return 100;
      case 65: return 100;
      case 66: return 100;
      case 67: return 100;
      case 68: return 100;
      case 69: return 100;
      case 70: return 100;
      case 71: return 100;
      case 72: return 100;
      case 73: return 100;
      case 74: return 100;
      case 75: return 100;
      case 76: return 100;
      case 77: return 100;
      case 78: return 100;
      case 79: return 100;
      case 80: return 100;
      case 81: return 100;
      case 82: return 100;
      case 83: return 100;
      case 84: return 100;
      case 85: return 100;
      case 86: return 100;
      case 87: return 100;
      case 88: return 100;
      case 89: return 100;
      case 90: return 100;
      case 91: return 100;
      case 92: return 100;
      case 93: return 100;
      case 94: return 100;
      case 95: return 100;
      case 96: return 100;
      case 97: return 100;
      case 98: return 100;
      case 99: return 100;
      case 100: return 100;
      case 101: return 100;
      case 102: return 100;
      case 103: return 100;
      case 104: return 100;
      case 105: return 100;
      case 106: return 100;
      case 107: return 100;
      case 108: return 100;
      case 109: return 100;
      case 110: return 100;
      case 111: return 100;
      case 112: return 100;
      case 113: return 100;
      case 114: return 100;
      case 115: return 100;
      case 116: return 100;
      case 117: return 100;
      case 118: return 100;
      case 119: return 100;
      case 120: return 100;
      case 121: return 100;
      case 122: return 100;
      case 123: return 100;
      case 124: return 100;
      case 125: return 100;
      case 126: return 100;
      case 127: return 100;
      case 128: return 100;
      case 129: return 100;
      case 130: return 100;
      case 131: return 100;
      case 132: return 100;
      case 133: return 100;
      case 134: return 100;
      case 135: return 100;
      case 136: return 100;
      case 137: return 100;
      case 138: return 100;
      case 139: return 100;
      case 140: return 100;
      case 141: return 100;
      case 142: return 100;
      case 143: return 100;
      case 144: return 100;
      case 145: return 100;
      case 146: return 100;
      case 147: return 100;
      case 148: return 100;
      case 149: return 100;
      case 150: return 100;
      case 151: return 100;
      case 152: return 100;
      case 153: return 100;
      case 154: return 100;
      case 155: return 100;
      case 156: return 100;
      case 157: return 100;
      case 158: return 100;
      case 159: return 100;
      case 160: return 100;
      case 161: return 100;
      case 162: return 100;
      case 163: return 100;
      case 164: return 100;
      case 165: return 100;
      case 166: return 100;
      case 167: return 100;
      case 168: return 100;
      case 169: return 100;
      case 170: return 100;
      case 171: return 100;
      case 172: return 100;
      case 173: return 100;
      case 174: return 100;
      case 175: return 100;
      case 176: return 100;
      case 177: return 100;
      case 178: return 100;
      case 179: return 100;
      case 180: return 100;
      case 181: return 100;
      case 182: return 100;
      case 183: return 100;
      case 184: return 100;
      case 185: return 100;
      case 186: return 100;
      case 187: return 100;
      case 188: return 100;
      case 189: return 100;
      case 190: return 100;
      case 191: return 100;
      case 192: return 100;
      case 193: return 100;
      case 194: return 100;
      case 195: return 100;
      case 196: return 100;
      case 197: return 100;
      case 198: return 100;
      case 199: return 100;
      case 200: return 100;
      case 201: return 100;
      case 202: return 100;
      case 203: return 100;
      case 204: return 100;
      case 205: return 100;
      case 206: return 100;
      case 207: return 100;
      case 208: return 200;
      case 209: return 100;
      case 210: return 100;
      case 211: return 0;
      case 212: return 100;
      case 213: return 100;
      case 214: return 100;
      case 215: return 100;
      case 216: return 100;
      case 217: return 100;
      case 218: return 0;
      case 219: return 0;
      case 220: return 0;
      case 221: return 0;
      case 222: return 100;
      case 223: return 100;
      case 224: return 100;
      case 225: return 100;
      case 226: return 100;
      case 227: return 100;
      case 228: return 100;
      case 229: return 100;
      case 230: return 100;
      case 231: return 100;
      case 232: return 100;
      case 233: return 100;
      case 234: return 100;
      case 235: return 100;
      case 236: return 100;
      case 237: return 100;
      case 238: return 100;
      case 239: return 100;
      case 240: return 100;
      case 241: return 100;
      case 242: return 100;
      case 243: return 100;
      case 244: return 100;
      case 245: return 100;
      case 246: return 100;
      case 247: return 100;
      case 248: return 100;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Stanford/IntMM.c") {
    if (FunctionName == "Initrand") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Rand") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Initmatrix") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Innerproduct") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Intmm") {
      switch(AccessId) {
      case 0: return 10;
      case 1: return 8000;
      case 2: return 8000;
      case 3: return 10;
      case 4: return 8000;
      case 5: return 8000;
      case 6: return 10;
      case 7: return 400;
      case 8: return 400;
      case 9: return 400;
      case 10: return 400;
      case 11: return 400;
      case 12: return 400;
      case 13: return 400;
      case 14: return 400;
      case 15: return 400;
      case 16: return 400;
      case 17: return 400;
      case 18: return 400;
      case 19: return 400;
      case 20: return 400;
      case 21: return 400;
      case 22: return 400;
      case 23: return 400;
      case 24: return 400;
      case 25: return 400;
      case 26: return 400;
      case 27: return 400;
      case 28: return 400;
      case 29: return 400;
      case 30: return 400;
      case 31: return 400;
      case 32: return 400;
      case 33: return 400;
      case 34: return 400;
      case 35: return 400;
      case 36: return 400;
      case 37: return 400;
      case 38: return 400;
      case 39: return 400;
      case 40: return 400;
      case 41: return 400;
      case 42: return 400;
      case 43: return 400;
      case 44: return 400;
      case 45: return 400;
      case 46: return 400;
      case 47: return 4000;
      case 48: return 4000;
      case 49: return 4000;
      case 50: return 4000;
      case 51: return 4000;
      case 52: return 4000;
      case 53: return 4000;
      case 54: return 4000;
      case 55: return 4000;
      case 56: return 4000;
      case 57: return 4000;
      case 58: return 4000;
      case 59: return 4000;
      case 60: return 4000;
      case 61: return 4000;
      case 62: return 4000;
      case 63: return 4000;
      case 64: return 4000;
      case 65: return 4000;
      case 66: return 4000;
      case 67: return 4000;
      case 68: return 4000;
      case 69: return 4000;
      case 70: return 4000;
      case 71: return 4000;
      case 72: return 4000;
      case 73: return 4000;
      case 74: return 4000;
      case 75: return 4000;
      case 76: return 4000;
      case 77: return 4000;
      case 78: return 4000;
      case 79: return 4000;
      case 80: return 4000;
      case 81: return 4000;
      case 82: return 4000;
      case 83: return 4000;
      case 84: return 4000;
      case 85: return 4000;
      case 86: return 4000;
      case 87: return 4000;
      case 88: return 4000;
      case 89: return 10;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Stanford/FloatMM.c") {
    if (FunctionName == "Initrand") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Rand") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "rInitmatrix") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "rInnerproduct") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Mm") {
      switch(AccessId) {
      case 0: return 5000;
      case 1: return 8000000;
      case 2: return 5000;
      case 3: return 8000000;
      case 4: return 5000;
      case 5: return 200000;
      case 6: return 200000;
      case 7: return 200000;
      case 8: return 200000;
      case 9: return 200000;
      case 10: return 200000;
      case 11: return 200000;
      case 12: return 200000;
      case 13: return 200000;
      case 14: return 200000;
      case 15: return 200000;
      case 16: return 200000;
      case 17: return 200000;
      case 18: return 200000;
      case 19: return 200000;
      case 20: return 200000;
      case 21: return 200000;
      case 22: return 200000;
      case 23: return 200000;
      case 24: return 200000;
      case 25: return 200000;
      case 26: return 200000;
      case 27: return 200000;
      case 28: return 200000;
      case 29: return 200000;
      case 30: return 200000;
      case 31: return 200000;
      case 32: return 200000;
      case 33: return 200000;
      case 34: return 200000;
      case 35: return 200000;
      case 36: return 200000;
      case 37: return 200000;
      case 38: return 200000;
      case 39: return 200000;
      case 40: return 200000;
      case 41: return 200000;
      case 42: return 200000;
      case 43: return 200000;
      case 44: return 200000;
      case 45: return 2000000;
      case 46: return 2000000;
      case 47: return 2000000;
      case 48: return 2000000;
      case 49: return 2000000;
      case 50: return 2000000;
      case 51: return 2000000;
      case 52: return 2000000;
      case 53: return 2000000;
      case 54: return 2000000;
      case 55: return 2000000;
      case 56: return 2000000;
      case 57: return 2000000;
      case 58: return 2000000;
      case 59: return 2000000;
      case 60: return 2000000;
      case 61: return 2000000;
      case 62: return 2000000;
      case 63: return 2000000;
      case 64: return 2000000;
      case 65: return 2000000;
      case 66: return 2000000;
      case 67: return 2000000;
      case 68: return 2000000;
      case 69: return 2000000;
      case 70: return 2000000;
      case 71: return 2000000;
      case 72: return 2000000;
      case 73: return 2000000;
      case 74: return 2000000;
      case 75: return 2000000;
      case 76: return 2000000;
      case 77: return 2000000;
      case 78: return 2000000;
      case 79: return 2000000;
      case 80: return 2000000;
      case 81: return 2000000;
      case 82: return 2000000;
      case 83: return 2000000;
      case 84: return 2000000;
      case 85: return 2000000;
      case 86: return 2000000;
      case 87: return 40;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Stanford/Oscar.c") {
    if (FunctionName == "Initrand") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Rand") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Printcomplex") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Uniform11") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Exptab") {
      switch(AccessId) {
      case 0: return 250;
      case 1: return 10;
      case 2: return 10;
      case 3: return 10;
      case 4: return 10;
      case 5: return 10;
      case 6: return 10;
      case 7: return 60;
      case 8: return 1260;
      case 9: return 1260;
      case 10: return 1260;
      case 11: return 1260;
      case 12: return 1260;
      case 13: return 1260;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Fft") {
      switch(AccessId) {
      case 0: return 204800;
      case 1: return 204800;
      case 2: return 204800;
      case 3: return 204800;
      case 4: return 204800;
      case 5: return 204800;
      case 6: return 204800;
      case 7: return 204800;
      case 8: return 204800;
      case 9: return 204800;
      case 10: return 204800;
      case 11: return 204800;
      case 12: return 204800;
      case 13: return 204800;
      case 14: return 204800;
      case 15: return 204800;
      case 16: return 204800;
      case 17: return 25600;
      case 18: return 25600;
      case 19: return 25600;
      case 20: return 25600;
      case 21: return 25600;
      case 22: return 25600;
      case 23: return 25600;
      case 24: return 25600;
      case 25: return 25600;
      case 26: return 25600;
      case 27: return 25600;
      case 28: return 25600;
      case 29: return 25600;
      case 30: return 25600;
      case 31: return 25600;
      case 32: return 25600;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 12800;
      case 40: return 12800;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Oscar") {
      switch(AccessId) {
      case 0: return 10;
      case 1: return 2560;
      case 2: return 2560;
      case 3: return 10;
      case 4: return 10;
      case 5: return 10;
      case 6: return 10;
      case 7: return 10;
      case 8: return 10;
      case 9: return 10;
      case 10: return 10;
      case 11: return 10;
      case 12: return 10;
      case 13: return 10;
      case 14: return 10;
      case 15: return 10;
      case 16: return 10;
      case 17: return 10;
      case 18: return 10;
      case 19: return 10;
      case 20: return 10;
      case 21: return 10;
      case 22: return 10;
      case 23: return 10;
      case 24: return 10;
      case 25: return 10;
      case 26: return 10;
      case 27: return 10;
      case 28: return 10;
      case 29: return 10;
      case 30: return 10;
      case 31: return 10;
      case 32: return 10;
      case 33: return 10;
      case 34: return 10;
      case 35: return 10;
      case 36: return 10;
      case 37: return 10;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Stanford/RealMM.c") {
    if (FunctionName == "Initrand") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Rand") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "rInitmatrix") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "rInnerproduct") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Mm") {
      switch(AccessId) {
      case 0: return 10;
      case 1: return 16000;
      case 2: return 10;
      case 3: return 16000;
      case 4: return 10;
      case 5: return 400;
      case 6: return 400;
      case 7: return 400;
      case 8: return 400;
      case 9: return 400;
      case 10: return 400;
      case 11: return 400;
      case 12: return 400;
      case 13: return 400;
      case 14: return 400;
      case 15: return 400;
      case 16: return 400;
      case 17: return 400;
      case 18: return 400;
      case 19: return 400;
      case 20: return 400;
      case 21: return 400;
      case 22: return 400;
      case 23: return 400;
      case 24: return 400;
      case 25: return 400;
      case 26: return 400;
      case 27: return 400;
      case 28: return 400;
      case 29: return 400;
      case 30: return 400;
      case 31: return 400;
      case 32: return 400;
      case 33: return 400;
      case 34: return 400;
      case 35: return 400;
      case 36: return 400;
      case 37: return 400;
      case 38: return 400;
      case 39: return 400;
      case 40: return 400;
      case 41: return 400;
      case 42: return 400;
      case 43: return 400;
      case 44: return 400;
      case 45: return 8000;
      case 46: return 8000;
      case 47: return 8000;
      case 48: return 8000;
      case 49: return 8000;
      case 50: return 8000;
      case 51: return 8000;
      case 52: return 8000;
      case 53: return 8000;
      case 54: return 8000;
      case 55: return 8000;
      case 56: return 8000;
      case 57: return 8000;
      case 58: return 8000;
      case 59: return 8000;
      case 60: return 8000;
      case 61: return 8000;
      case 62: return 8000;
      case 63: return 8000;
      case 64: return 8000;
      case 65: return 8000;
      case 66: return 8000;
      case 67: return 8000;
      case 68: return 8000;
      case 69: return 8000;
      case 70: return 8000;
      case 71: return 8000;
      case 72: return 8000;
      case 73: return 8000;
      case 74: return 8000;
      case 75: return 8000;
      case 76: return 8000;
      case 77: return 8000;
      case 78: return 8000;
      case 79: return 8000;
      case 80: return 8000;
      case 81: return 8000;
      case 82: return 8000;
      case 83: return 8000;
      case 84: return 8000;
      case 85: return 8000;
      case 86: return 8000;
      case 87: return 10;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Stanford/Queens.c") {
    if (FunctionName == "Initrand") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Rand") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Try") {
      switch(AccessId) {
      case 0: return 565000;
      case 1: return 3920000;
      case 2: return 3920000;
      case 3: return 1620000;
      case 4: return 1150000;
      case 5: return 560000;
      case 6: return 560000;
      case 7: return 560000;
      case 8: return 560000;
      case 9: return 560000;
      case 10: return 525000;
      case 11: return 525000;
      case 12: return 525000;
      case 13: return 525000;
      case 14: return 60000;
      case 15: return 60000;
      case 16: return 0;
      case 17: return 0;
      case 18: return 5000;
      case 19: return 5000;
      case 20: return 5000;
      case 21: return 5000;
      case 22: return 5000;
      case 23: return 60000;
      case 24: return 60000;
      case 25: return 0;
      case 26: return 0;
      case 27: return 60000;
      case 28: return 60000;
      case 29: return 0;
      case 30: return 0;
      case 31: return 60000;
      case 32: return 60000;
      case 33: return 10000;
      case 34: return 5000;
      case 35: return 55000;
      case 36: return 55000;
      case 37: return 5000;
      case 38: return 0;
      case 39: return 55000;
      case 40: return 55000;
      case 41: return 15000;
      case 42: return 15000;
      case 43: return 55000;
      case 44: return 55000;
      case 45: return 15000;
      case 46: return 15000;
      case 47: return 55000;
      case 48: return 55000;
      case 49: return 15000;
      case 50: return 15000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Doit") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Queens") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 40000;
      case 1: return 75000;
      case 2: return 75000;
      case 3: return 5000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Stanford/Treesort.c") {
    if (FunctionName == "Initrand") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Rand") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "tInitarr") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "CreateNode") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Insert") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Checktree") {
      switch(AccessId) {
      case 0: return 500000;
      case 1: return 246500;
      case 2: return 246500;
      case 3: return 500000;
      case 4: return 253400;
      case 5: return 253400;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Trees") {
      switch(AccessId) {
      case 0: return 100;
      case 1: return 100;
      case 2: return 100;
      case 3: return 500000;
      case 4: return 499500;
      case 5: return 900;
      case 6: return 499900;
      case 7: return 100;
      case 8: return 100;
      case 9: return 100;
      case 10: return 100;
      case 11: return 499900;
      case 12: return 7066200;
      case 13: return 3786200;
      case 14: return 246500;
      case 15: return 3280000;
      case 16: return 253400;
      case 17: return 499900;
      case 18: return 499800;
      case 19: return 100;
      case 20: return 100;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Dhrystone/fldry.c") {
    if (FunctionName == "Proc0") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 100000000;
      case 8: return 100000000;
      case 9: return 100000000;
      case 10: return 100000000;
      case 11: return 100000000;
      case 12: return 100000000;
      case 13: return 100000000;
      case 14: return 100000000;
      case 15: return 100000000;
      case 16: return 100000000;
      case 17: return 100000000;
      case 18: return 100000000;
      case 19: return 100000000;
      case 20: return 100000000;
      case 21: return 1;
      case 22: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc1") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc2") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc3") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc4") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc5") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc6") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc7") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc8") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Func2") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Dhrystone/dry.c") {
    if (FunctionName == "Proc0") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 100000000;
      case 8: return 100000000;
      case 9: return 100000000;
      case 10: return 100000000;
      case 11: return 100000000;
      case 12: return 100000000;
      case 13: return 100000000;
      case 14: return 100000000;
      case 15: return 100000000;
      case 16: return 100000000;
      case 17: return 100000000;
      case 18: return 100000000;
      case 19: return 100000000;
      case 20: return 100000000;
      case 21: return 100000000;
      case 22: return 100000000;
      case 23: return 1;
      case 24: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc1") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc2") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc3") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc4") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc5") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc6") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc7") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Proc8") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Func2") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/BenchmarkGame/puzzle.c") {
    if (FunctionName == "rand") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "rand") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "randInt") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "huffle") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "createRandomArray") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "findDuplicate") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 62500;
      case 2: return 62500;
      case 3: return 62500;
      case 4: return 62500;
      case 5: return 62500;
      case 6: return 62500;
      case 7: return 62500;
      case 8: return 62500;
      case 9: return 62500;
      case 10: return 62500;
      case 11: return 5;
      case 12: return 5;
      case 13: return 5;
      case 14: return 5;
      case 15: return 2500000;
      case 16: return 2500000;
      case 17: return 2500000;
      case 18: return 2500000;
      case 19: return 5;
      case 20: return 31250000;
      case 21: return 31250000;
      case 22: return 31250000;
      case 23: return 31250000;
      case 24: return 5;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/BenchmarkGame/nsieve-bits.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 40959999;
      case 1: return 124461106;
      case 2: return 38471534;
      case 3: return 20479999;
      case 4: return 61325748;
      case 5: return 19180930;
      case 6: return 10239999;
      case 7: return 30189505;
      case 8: return 9560538;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/BenchmarkGame/n-body.c") {
    if (FunctionName == "advance") {
      switch(AccessId) {
      case 0: return 50000000;
      case 1: return 50000000;
      case 2: return 50000000;
      case 3: return 50000000;
      case 4: return 50000000;
      case 5: return 50000000;
      case 6: return 50000000;
      case 7: return 50000000;
      case 8: return 50000000;
      case 9: return 50000000;
      case 10: return 50000000;
      case 11: return 50000000;
      case 12: return 50000000;
      case 13: return 50000000;
      case 14: return 25000000;
      case 15: return 25000000;
      case 16: return 25000000;
      case 17: return 25000000;
      case 18: return 25000000;
      case 19: return 25000000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "energy") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "offset_momentum") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      case 58: return 1;
      case 59: return 1;
      case 60: return 1;
      case 61: return 1;
      case 62: return 1;
      case 63: return 1;
      case 64: return 1;
      case 65: return 1;
      case 66: return 1;
      case 67: return 1;
      case 68: return 1;
      case 69: return 1;
      case 70: return 1;
      case 71: return 1;
      case 72: return 1;
      case 73: return 1;
      case 74: return 1;
      case 75: return 1;
      case 76: return 1;
      case 77: return 1;
      case 78: return 1;
      case 79: return 1;
      case 80: return 1;
      case 81: return 1;
      case 82: return 1;
      case 83: return 1;
      case 84: return 1;
      case 85: return 1;
      case 86: return 1;
      case 87: return 1;
      case 88: return 1;
      case 89: return 1;
      case 90: return 1;
      case 91: return 1;
      case 92: return 1;
      case 93: return 1;
      case 94: return 1;
      case 95: return 1;
      case 96: return 1;
      case 97: return 1;
      case 98: return 1;
      case 99: return 1;
      case 100: return 1;
      case 101: return 1;
      case 102: return 1;
      case 103: return 1;
      case 104: return 1;
      case 105: return 1;
      case 106: return 1;
      case 107: return 1;
      case 108: return 1;
      case 109: return 1;
      case 110: return 1;
      case 111: return 1;
      case 112: return 1;
      case 113: return 1;
      case 114: return 1;
      case 115: return 1;
      case 116: return 1;
      case 117: return 1;
      case 118: return 1;
      case 119: return 1;
      case 120: return 1;
      case 121: return 1;
      case 122: return 1;
      case 123: return 1;
      case 124: return 1;
      case 125: return 1;
      case 126: return 1;
      case 127: return 1;
      case 128: return 1;
      case 129: return 1;
      case 130: return 1;
      case 131: return 1;
      case 132: return 1;
      case 133: return 1;
      case 134: return 1;
      case 135: return 1;
      case 136: return 1;
      case 137: return 1;
      case 138: return 1;
      case 139: return 1;
      case 140: return 1;
      case 141: return 1;
      case 142: return 1;
      case 143: return 1;
      case 144: return 1;
      case 145: return 1;
      case 146: return 1;
      case 147: return 1;
      case 148: return 1;
      case 149: return 1;
      case 150: return 1;
      case 151: return 1;
      case 152: return 1;
      case 153: return 1;
      case 154: return 1;
      case 155: return 1;
      case 156: return 1;
      case 157: return 1;
      case 158: return 1;
      case 159: return 1;
      case 160: return 1;
      case 161: return 1;
      case 162: return 1;
      case 163: return 1;
      case 164: return 1;
      case 165: return 1;
      case 166: return 1;
      case 167: return 1;
      case 168: return 1;
      case 169: return 1;
      case 170: return 1;
      case 171: return 1;
      case 172: return 1;
      case 173: return 1;
      case 174: return 1;
      case 175: return 1;
      case 176: return 1;
      case 177: return 1;
      case 178: return 1;
      case 179: return 1;
      case 180: return 1;
      case 181: return 1;
      case 182: return 1;
      case 183: return 1;
      case 184: return 1;
      case 185: return 1;
      case 186: return 1;
      case 187: return 1;
      case 188: return 1;
      case 189: return 1;
      case 190: return 1;
      case 191: return 1;
      case 192: return 1;
      case 193: return 1;
      case 194: return 1;
      case 195: return 1;
      case 196: return 1;
      case 197: return 1;
      case 198: return 1;
      case 199: return 1;
      case 200: return 1;
      case 201: return 1;
      case 202: return 1;
      case 203: return 1;
      case 204: return 1;
      case 205: return 1;
      case 206: return 1;
      case 207: return 1;
      case 208: return 1;
      case 209: return 1;
      case 210: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/BenchmarkGame/spectral-norm.c") {
    if (FunctionName == "eval_A_times_u") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "eval_At_times_u") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "eval_AtA_times_u") {
      switch(AccessId) {
      case 0: return 40000;
      case 1: return 80000000;
      case 2: return 40000;
      case 3: return 40000;
      case 4: return 80000000;
      case 5: return 40000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 62;
      case 2: return 62;
      case 3: return 62;
      case 4: return 62;
      case 5: return 62;
      case 6: return 62;
      case 7: return 62;
      case 8: return 62;
      case 9: return 62;
      case 10: return 62;
      case 11: return 62;
      case 12: return 62;
      case 13: return 62;
      case 14: return 62;
      case 15: return 62;
      case 16: return 62;
      case 17: return 4;
      case 18: return 4;
      case 19: return 0;
      case 20: return 1000;
      case 21: return 1000;
      case 22: return 1000;
      case 23: return 1000;
      case 24: return 0;
      case 25: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/BenchmarkGame/fannkuch.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 30;
      case 5: return 30;
      case 6: return 30;
      case 7: return 30;
      case 8: return 30;
      case 9: return 30;
      case 10: return 30;
      case 11: return 30;
      case 12: return 30;
      case 13: return 30;
      case 14: return 30;
      case 15: return 110;
      case 16: return 110;
      case 17: return 28670632;
      case 18: return 39916800;
      case 19: return 36288000;
      case 20: return 470642631;
      case 21: return 470642631;
      case 22: return 470642631;
      case 23: return 470642631;
      case 24: return 255761941;
      case 25: return 255761941;
      case 26: return 1111;
      case 27: return 1111;
      case 28: return 1111;
      case 29: return 1111;
      case 30: return 108496212;
      case 31: return 108496212;
      case 32: return 68588311;
      case 33: return 68588311;
      case 34: return 68588311;
      case 35: return 28671511;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/BenchmarkGame/Large/fasta.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 166667;
      case 40: return 166667;
      case 41: return 1;
      case 42: return 250000;
      case 43: return 62249913;
      case 44: return 15000000;
      case 45: return 15000000;
      case 46: return 250000;
      case 47: return 250000;
      case 48: return 250000;
      case 49: return 1;
      case 50: return 416667;
      case 51: return 62439308;
      case 52: return 25000000;
      case 53: return 25000000;
      case 54: return 416667;
      case 55: return 416667;
      case 56: return 416667;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc-C++-EH/spirit.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 40;
      case 2: return 40;
      case 3: return 40;
      case 4: return 40;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit7grammarI9c_grammarNS0_14parser_contextINS0_5nil_tEEEED2Ev") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit7grammarI9c_grammarNS0_14parser_contextINS0_5nil_tEEEEC2Ev") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl14object_with_idINS1_11grammar_tagEmED2Ev") {
      switch(AccessId) {
      case 0: return 41;
      case 1: return 41;
      case 2: return 41;
      case 3: return 41;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 41;
      case 16: return 41;
      case 17: return 41;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl19object_with_id_baseINS1_11grammar_tagEmE17acquire_object_idEv") {
      switch(AccessId) {
      case 0: return 41;
      case 1: return 41;
      case 2: return 1;
      case 3: return 41;
      case 4: return 41;
      case 5: return 41;
      case 6: return 41;
      case 7: return 41;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 41;
      case 17: return 41;
      case 18: return 41;
      case 19: return 41;
      case 20: return 0;
      case 21: return 0;
      case 22: return 41;
      case 23: return 41;
      case 24: return 2;
      case 25: return 2;
      case 26: return 2;
      case 27: return 2;
      case 28: return 2;
      case 29: return 41;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost10shared_ptrINS_6spirit4impl26object_with_id_base_supplyImEEED2Ev") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost10shared_ptrINS_6spirit4impl26object_with_id_base_supplyImEEE5resetIS4_EEvPT_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6detail12shared_countC2IPNS_6spirit4impl26object_with_id_base_supplyImEENS_15checked_deleterIS6_EEEET_T0_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6detail20sp_counted_base_implIPNS_6spirit4impl26object_with_id_base_supplyImEENS_15checked_deleterIS5_EEED0Ev") {
      switch(AccessId) {
      case 0: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6detail20sp_counted_base_implIPNS_6spirit4impl26object_with_id_base_supplyImEENS_15checked_deleterIS5_EEE7disposeEv") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6detail15sp_counted_base8destructEv") {
      switch(AccessId) {
      case 0: return 42;
      case 1: return 42;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6detail20sp_counted_base_implIPNS_6spirit4impl26object_with_id_base_supplyImEENS_15checked_deleterIS5_EEE11get_deleterERKSt9type_info") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit7grammarI12skip_grammarNS0_14parser_contextINS0_5nil_tEEEED2Ev") {
      switch(AccessId) {
      case 0: return 40;
      case 1: return 40;
      case 2: return 40;
      case 3: return 40;
      case 4: return 40;
      case 5: return 40;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit7grammarI12skip_grammarNS0_14parser_contextINS0_5nil_tEEEEC2Ev") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 40;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl13phrase_parserI12skip_grammarE5parseIPKc9c_grammarEENS0_10parse_infoIT_EERKSA_SD_RKT0_RKS3_") {
      switch(AccessId) {
      case 0: return 40;
      case 1: return 40;
      case 2: return 40;
      case 3: return 40;
      case 4: return 40;
      case 5: return 40;
      case 6: return 40;
      case 7: return 40;
      case 8: return 40;
      case 9: return 40;
      case 10: return 40;
      case 11: return 40;
      case 12: return 40;
      case 13: return 80;
      case 14: return 80;
      case 15: return 40;
      case 16: return 40;
      case 17: return 40;
      case 18: return 40;
      case 19: return 40;
      case 20: return 40;
      case 21: return 40;
      case 22: return 40;
      case 23: return 40;
      case 24: return 40;
      case 25: return 40;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 40;
      case 30: return 40;
      case 31: return 40;
      case 32: return 40;
      case 33: return 0;
      case 34: return 40;
      case 35: return 40;
      case 36: return 40;
      case 37: return 40;
      case 38: return 40;
      case 39: return 40;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl14get_definitionI9c_grammarNS0_14parser_contextINS0_5nil_tEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEEEERNT_10definitionIT1_EEPKNS0_7grammarISJ_T0_EE") {
      switch(AccessId) {
      case 0: return 40;
      case 1: return 40;
      case 2: return 39;
      case 3: return 39;
      case 4: return 39;
      case 5: return 0;
      case 6: return 40;
      case 7: return 39;
      case 8: return 39;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 40;
      case 16: return 40;
      case 17: return 40;
      case 18: return 40;
      case 19: return 0;
      case 20: return 40;
      case 21: return 40;
      case 22: return 40;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost8weak_ptrINS_6spirit4impl14grammar_helperINS1_7grammarI9c_grammarNS1_14parser_contextINS1_5nil_tEEEEES5_NS1_7scannerIPKcNS1_16scanner_policiesINS1_28skip_parser_iteration_policyI12skip_grammarNS1_16iteration_policyEEENS1_12match_policyENS1_13action_policyEEEEEEEED2Ev") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl14grammar_helperINS0_7grammarI9c_grammarNS0_14parser_contextINS0_5nil_tEEEEES4_NS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEEEC2ERNS_8weak_ptrISL_EE") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 1;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl14grammar_helperINS0_7grammarI9c_grammarNS0_14parser_contextINS0_5nil_tEEEEES4_NS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEEE6defineEPKS8_") {
      switch(AccessId) {
      case 0: return 40;
      case 1: return 40;
      case 2: return 40;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 40;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 0;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6detail12shared_countC2ERKNS0_10weak_countE") {
      switch(AccessId) {
      case 0: return 85126999;
      case 1: return 85126999;
      case 2: return 85126999;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 85126999;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl14grammar_helperINS0_7grammarI9c_grammarNS0_14parser_contextINS0_5nil_tEEEEES4_NS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEEE8undefineEPS8_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 0;
      case 17: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl14grammar_helperINS0_7grammarI9c_grammarNS0_14parser_contextINS0_5nil_tEEEEES4_NS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEEED2Ev") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 1;
      case 11: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6detail12shared_countC2IPNS_6spirit4impl14grammar_helperINS3_7grammarI9c_grammarNS3_14parser_contextINS3_5nil_tEEEEES7_NS3_7scannerIPKcNS3_16scanner_policiesINS3_28skip_parser_iteration_policyI12skip_grammarNS3_16iteration_policyEEENS3_12match_policyENS3_13action_policyEEEEEEENS_15checked_deleterISO_EEEET_T0_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6detail15sp_counted_baseD2Ev") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6detail20sp_counted_base_implIPNS_6spirit4impl14grammar_helperINS2_7grammarI9c_grammarNS2_14parser_contextINS2_5nil_tEEEEES6_NS2_7scannerIPKcNS2_16scanner_policiesINS2_28skip_parser_iteration_policyI12skip_grammarNS2_16iteration_policyEEENS2_12match_policyENS2_13action_policyEEEEEEENS_15checked_deleterISN_EEED0Ev") {
      switch(AccessId) {
      case 0: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6detail20sp_counted_base_implIPNS_6spirit4impl14grammar_helperINS2_7grammarI9c_grammarNS2_14parser_contextINS2_5nil_tEEEEES6_NS2_7scannerIPKcNS2_16scanner_policiesINS2_28skip_parser_iteration_policyI12skip_grammarNS2_16iteration_policyEEENS2_12match_policyENS2_13action_policyEEEEEEENS_15checked_deleterISN_EEE7disposeEv") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6detail20sp_counted_base_implIPNS_6spirit4impl14grammar_helperINS2_7grammarI9c_grammarNS2_14parser_contextINS2_5nil_tEEEEES6_NS2_7scannerIPKcNS2_16scanner_policiesINS2_28skip_parser_iteration_policyI12skip_grammarNS2_16iteration_policyEEENS2_12match_policyENS2_13action_policyEEEEEEENS_15checked_deleterISN_EEE11get_deleterERKSt9type_info") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9c_grammar10definitionIN5boost6spirit7scannerIPKcNS2_16scanner_policiesINS2_28skip_parser_iteration_policyI12skip_grammarNS2_16iteration_policyEEENS2_12match_policyENS2_13action_policyEEEEEED2Ev") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      case 58: return 1;
      case 59: return 1;
      case 60: return 1;
      case 61: return 1;
      case 62: return 1;
      case 63: return 1;
      case 64: return 1;
      case 65: return 1;
      case 66: return 1;
      case 67: return 1;
      case 68: return 1;
      case 69: return 1;
      case 70: return 1;
      case 71: return 1;
      case 72: return 1;
      case 73: return 1;
      case 74: return 1;
      case 75: return 1;
      case 76: return 1;
      case 77: return 1;
      case 78: return 1;
      case 79: return 1;
      case 80: return 1;
      case 81: return 1;
      case 82: return 1;
      case 83: return 1;
      case 84: return 1;
      case 85: return 1;
      case 86: return 1;
      case 87: return 1;
      case 88: return 1;
      case 89: return 1;
      case 90: return 1;
      case 91: return 1;
      case 92: return 1;
      case 93: return 1;
      case 94: return 1;
      case 95: return 1;
      case 96: return 1;
      case 97: return 1;
      case 98: return 1;
      case 99: return 1;
      case 100: return 1;
      case 101: return 1;
      case 102: return 1;
      case 103: return 1;
      case 104: return 1;
      case 105: return 1;
      case 106: return 1;
      case 107: return 1;
      case 108: return 1;
      case 109: return 1;
      case 110: return 1;
      case 111: return 1;
      case 112: return 1;
      case 113: return 1;
      case 114: return 1;
      case 115: return 1;
      case 116: return 1;
      case 117: return 1;
      case 118: return 1;
      case 119: return 1;
      case 120: return 1;
      case 121: return 1;
      case 122: return 1;
      case 123: return 1;
      case 124: return 1;
      case 125: return 1;
      case 126: return 1;
      case 127: return 1;
      case 128: return 1;
      case 129: return 1;
      case 130: return 1;
      case 131: return 1;
      case 132: return 1;
      case 133: return 1;
      case 134: return 1;
      case 135: return 1;
      case 136: return 1;
      case 137: return 1;
      case 138: return 1;
      case 139: return 1;
      case 140: return 1;
      case 141: return 1;
      case 142: return 1;
      case 143: return 1;
      case 144: return 1;
      case 145: return 1;
      case 146: return 1;
      case 147: return 1;
      case 148: return 1;
      case 149: return 1;
      case 150: return 1;
      case 151: return 1;
      case 152: return 1;
      case 153: return 1;
      case 154: return 1;
      case 155: return 1;
      case 156: return 1;
      case 157: return 1;
      case 158: return 1;
      case 159: return 1;
      case 160: return 1;
      case 161: return 1;
      case 162: return 1;
      case 163: return 1;
      case 164: return 1;
      case 165: return 1;
      case 166: return 1;
      case 167: return 1;
      case 168: return 1;
      case 169: return 1;
      case 170: return 1;
      case 171: return 1;
      case 172: return 1;
      case 173: return 1;
      case 174: return 1;
      case 175: return 1;
      case 176: return 1;
      case 177: return 1;
      case 178: return 1;
      case 179: return 1;
      case 180: return 1;
      case 181: return 1;
      case 182: return 1;
      case 183: return 1;
      case 184: return 1;
      case 185: return 1;
      case 186: return 1;
      case 187: return 1;
      case 188: return 1;
      case 189: return 1;
      case 190: return 1;
      case 191: return 1;
      case 192: return 1;
      case 193: return 1;
      case 194: return 1;
      case 195: return 1;
      case 196: return 1;
      case 197: return 1;
      case 198: return 1;
      case 199: return 1;
      case 200: return 1;
      case 201: return 1;
      case 202: return 1;
      case 203: return 1;
      case 204: return 1;
      case 205: return 1;
      case 206: return 1;
      case 207: return 1;
      case 208: return 1;
      case 209: return 1;
      case 210: return 1;
      case 211: return 1;
      case 212: return 1;
      case 213: return 1;
      case 214: return 1;
      case 215: return 1;
      case 216: return 1;
      case 217: return 1;
      case 218: return 1;
      case 219: return 1;
      case 220: return 1;
      case 221: return 1;
      case 222: return 1;
      case 223: return 1;
      case 224: return 1;
      case 225: return 1;
      case 226: return 1;
      case 227: return 1;
      case 228: return 1;
      case 229: return 1;
      case 230: return 1;
      case 231: return 1;
      case 232: return 1;
      case 233: return 1;
      case 234: return 1;
      case 235: return 1;
      case 236: return 1;
      case 237: return 1;
      case 238: return 1;
      case 239: return 1;
      case 240: return 1;
      case 241: return 1;
      case 242: return 1;
      case 243: return 1;
      case 244: return 1;
      case 245: return 1;
      case 246: return 1;
      case 247: return 1;
      case 248: return 1;
      case 249: return 1;
      case 250: return 1;
      case 251: return 1;
      case 252: return 1;
      case 253: return 1;
      case 254: return 1;
      case 255: return 1;
      case 256: return 1;
      case 257: return 1;
      case 258: return 1;
      case 259: return 1;
      case 260: return 1;
      case 261: return 1;
      case 262: return 1;
      case 263: return 1;
      case 264: return 1;
      case 265: return 1;
      case 266: return 1;
      case 267: return 1;
      case 268: return 1;
      case 269: return 1;
      case 270: return 1;
      case 271: return 1;
      case 272: return 1;
      case 273: return 1;
      case 274: return 1;
      case 275: return 1;
      case 276: return 1;
      case 277: return 1;
      case 278: return 1;
      case 279: return 1;
      case 280: return 1;
      case 281: return 1;
      case 282: return 1;
      case 283: return 1;
      case 284: return 1;
      case 285: return 1;
      case 286: return 1;
      case 287: return 1;
      case 288: return 1;
      case 289: return 1;
      case 290: return 1;
      case 291: return 1;
      case 292: return 1;
      case 293: return 1;
      case 294: return 1;
      case 295: return 1;
      case 296: return 1;
      case 297: return 1;
      case 298: return 1;
      case 299: return 1;
      case 300: return 1;
      case 301: return 1;
      case 302: return 1;
      case 303: return 1;
      case 304: return 1;
      case 305: return 1;
      case 306: return 1;
      case 307: return 1;
      case 308: return 1;
      case 309: return 1;
      case 310: return 1;
      case 311: return 1;
      case 312: return 1;
      case 313: return 1;
      case 314: return 1;
      case 315: return 1;
      case 316: return 1;
      case 317: return 1;
      case 318: return 1;
      case 319: return 1;
      case 320: return 1;
      case 321: return 1;
      case 322: return 1;
      case 323: return 1;
      case 324: return 1;
      case 325: return 1;
      case 326: return 1;
      case 327: return 1;
      case 328: return 1;
      case 329: return 1;
      case 330: return 1;
      case 331: return 1;
      case 332: return 1;
      case 333: return 1;
      case 334: return 1;
      case 335: return 1;
      case 336: return 1;
      case 337: return 1;
      case 338: return 1;
      case 339: return 1;
      case 340: return 1;
      case 341: return 1;
      case 342: return 1;
      case 343: return 1;
      case 344: return 1;
      case 345: return 1;
      case 346: return 1;
      case 347: return 1;
      case 348: return 1;
      case 349: return 1;
      case 350: return 1;
      case 351: return 1;
      case 352: return 1;
      case 353: return 1;
      case 354: return 1;
      case 355: return 1;
      case 356: return 1;
      case 357: return 1;
      case 358: return 1;
      case 359: return 1;
      case 360: return 1;
      case 361: return 1;
      case 362: return 1;
      case 363: return 1;
      case 364: return 1;
      case 365: return 1;
      case 366: return 1;
      case 367: return 1;
      case 368: return 1;
      case 369: return 1;
      case 370: return 1;
      case 371: return 1;
      case 372: return 1;
      case 373: return 1;
      case 374: return 1;
      case 375: return 1;
      case 376: return 1;
      case 377: return 1;
      case 378: return 1;
      case 379: return 1;
      case 380: return 1;
      case 381: return 1;
      case 382: return 0;
      case 383: return 0;
      case 384: return 0;
      case 385: return 0;
      case 386: return 0;
      case 387: return 0;
      case 388: return 0;
      case 389: return 0;
      case 390: return 0;
      case 391: return 0;
      case 392: return 0;
      case 393: return 0;
      case 394: return 0;
      case 395: return 0;
      case 396: return 0;
      case 397: return 0;
      case 398: return 0;
      case 399: return 0;
      case 400: return 0;
      case 401: return 0;
      case 402: return 0;
      case 403: return 0;
      case 404: return 0;
      case 405: return 0;
      case 406: return 0;
      case 407: return 0;
      case 408: return 0;
      case 409: return 0;
      case 410: return 0;
      case 411: return 0;
      case 412: return 0;
      case 413: return 0;
      case 414: return 0;
      case 415: return 0;
      case 416: return 0;
      case 417: return 0;
      case 418: return 0;
      case 419: return 0;
      case 420: return 0;
      case 421: return 0;
      case 422: return 0;
      case 423: return 0;
      case 424: return 0;
      case 425: return 0;
      case 426: return 0;
      case 427: return 0;
      case 428: return 0;
      case 429: return 0;
      case 430: return 0;
      case 431: return 0;
      case 432: return 0;
      case 433: return 0;
      case 434: return 0;
      case 435: return 0;
      case 436: return 0;
      case 437: return 0;
      case 438: return 0;
      case 439: return 0;
      case 440: return 0;
      case 441: return 0;
      case 442: return 0;
      case 443: return 0;
      case 444: return 0;
      case 445: return 0;
      case 446: return 0;
      case 447: return 0;
      case 448: return 0;
      case 449: return 0;
      case 450: return 0;
      case 451: return 0;
      case 452: return 0;
      case 453: return 0;
      case 454: return 0;
      case 455: return 0;
      case 456: return 0;
      case 457: return 0;
      case 458: return 0;
      case 459: return 0;
      case 460: return 0;
      case 461: return 0;
      case 462: return 0;
      case 463: return 0;
      case 464: return 0;
      case 465: return 0;
      case 466: return 0;
      case 467: return 0;
      case 468: return 0;
      case 469: return 0;
      case 470: return 0;
      case 471: return 0;
      case 472: return 0;
      case 473: return 0;
      case 474: return 0;
      case 475: return 0;
      case 476: return 0;
      case 477: return 0;
      case 478: return 0;
      case 479: return 0;
      case 480: return 0;
      case 481: return 0;
      case 482: return 0;
      case 483: return 0;
      case 484: return 0;
      case 485: return 0;
      case 486: return 0;
      case 487: return 0;
      case 488: return 0;
      case 489: return 0;
      case 490: return 0;
      case 491: return 0;
      case 492: return 0;
      case 493: return 0;
      case 494: return 0;
      case 495: return 0;
      case 496: return 0;
      case 497: return 0;
      case 498: return 0;
      case 499: return 0;
      case 500: return 0;
      case 501: return 0;
      case 502: return 0;
      case 503: return 0;
      case 504: return 0;
      case 505: return 0;
      case 506: return 0;
      case 507: return 0;
      case 508: return 0;
      case 509: return 0;
      case 510: return 0;
      case 511: return 0;
      case 512: return 0;
      case 513: return 0;
      case 514: return 0;
      case 515: return 0;
      case 516: return 0;
      case 517: return 0;
      case 518: return 0;
      case 519: return 0;
      case 520: return 0;
      case 521: return 0;
      case 522: return 0;
      case 523: return 0;
      case 524: return 0;
      case 525: return 0;
      case 526: return 0;
      case 527: return 0;
      case 528: return 0;
      case 529: return 0;
      case 530: return 0;
      case 531: return 0;
      case 532: return 0;
      case 533: return 0;
      case 534: return 0;
      case 535: return 0;
      case 536: return 0;
      case 537: return 0;
      case 538: return 0;
      case 539: return 0;
      case 540: return 0;
      case 541: return 0;
      case 542: return 0;
      case 543: return 0;
      case 544: return 0;
      case 545: return 0;
      case 546: return 0;
      case 547: return 0;
      case 548: return 0;
      case 549: return 0;
      case 550: return 0;
      case 551: return 0;
      case 552: return 0;
      case 553: return 0;
      case 554: return 0;
      case 555: return 0;
      case 556: return 0;
      case 557: return 0;
      case 558: return 0;
      case 559: return 0;
      case 560: return 0;
      case 561: return 0;
      case 562: return 0;
      case 563: return 0;
      case 564: return 0;
      case 565: return 0;
      case 566: return 0;
      case 567: return 0;
      case 568: return 0;
      case 569: return 0;
      case 570: return 0;
      case 571: return 0;
      case 572: return 0;
      case 573: return 0;
      case 574: return 0;
      case 575: return 0;
      case 576: return 0;
      case 577: return 0;
      case 578: return 0;
      case 579: return 0;
      case 580: return 0;
      case 581: return 0;
      case 582: return 0;
      case 583: return 0;
      case 584: return 0;
      case 585: return 0;
      case 586: return 0;
      case 587: return 0;
      case 588: return 0;
      case 589: return 0;
      case 590: return 0;
      case 591: return 0;
      case 592: return 0;
      case 593: return 0;
      case 594: return 0;
      case 595: return 0;
      case 596: return 0;
      case 597: return 0;
      case 598: return 0;
      case 599: return 0;
      case 600: return 0;
      case 601: return 0;
      case 602: return 0;
      case 603: return 0;
      case 604: return 0;
      case 605: return 0;
      case 606: return 0;
      case 607: return 0;
      case 608: return 0;
      case 609: return 0;
      case 610: return 0;
      case 611: return 0;
      case 612: return 0;
      case 613: return 0;
      case 614: return 0;
      case 615: return 0;
      case 616: return 0;
      case 617: return 0;
      case 618: return 0;
      case 619: return 0;
      case 620: return 0;
      case 621: return 0;
      case 622: return 0;
      case 623: return 0;
      case 624: return 0;
      case 625: return 0;
      case 626: return 0;
      case 627: return 0;
      case 628: return 0;
      case 629: return 0;
      case 630: return 0;
      case 631: return 0;
      case 632: return 0;
      case 633: return 0;
      case 634: return 0;
      case 635: return 0;
      case 636: return 0;
      case 637: return 0;
      case 638: return 0;
      case 639: return 0;
      case 640: return 0;
      case 641: return 0;
      case 642: return 0;
      case 643: return 0;
      case 644: return 0;
      case 645: return 0;
      case 646: return 0;
      case 647: return 0;
      case 648: return 0;
      case 649: return 0;
      case 650: return 0;
      case 651: return 0;
      case 652: return 0;
      case 653: return 0;
      case 654: return 0;
      case 655: return 0;
      case 656: return 0;
      case 657: return 0;
      case 658: return 0;
      case 659: return 0;
      case 660: return 0;
      case 661: return 0;
      case 662: return 0;
      case 663: return 0;
      case 664: return 0;
      case 665: return 0;
      case 666: return 0;
      case 667: return 0;
      case 668: return 0;
      case 669: return 0;
      case 670: return 0;
      case 671: return 0;
      case 672: return 0;
      case 673: return 0;
      case 674: return 0;
      case 675: return 0;
      case 676: return 0;
      case 677: return 0;
      case 678: return 0;
      case 679: return 0;
      case 680: return 0;
      case 681: return 0;
      case 682: return 0;
      case 683: return 0;
      case 684: return 0;
      case 685: return 0;
      case 686: return 0;
      case 687: return 0;
      case 688: return 0;
      case 689: return 0;
      case 690: return 0;
      case 691: return 0;
      case 692: return 0;
      case 693: return 0;
      case 694: return 0;
      case 695: return 0;
      case 696: return 0;
      case 697: return 0;
      case 698: return 0;
      case 699: return 0;
      case 700: return 0;
      case 701: return 0;
      case 702: return 0;
      case 703: return 0;
      case 704: return 0;
      case 705: return 0;
      case 706: return 0;
      case 707: return 0;
      case 708: return 0;
      case 709: return 0;
      case 710: return 0;
      case 711: return 0;
      case 712: return 0;
      case 713: return 0;
      case 714: return 0;
      case 715: return 0;
      case 716: return 0;
      case 717: return 0;
      case 718: return 0;
      case 719: return 0;
      case 720: return 0;
      case 721: return 0;
      case 722: return 0;
      case 723: return 0;
      case 724: return 0;
      case 725: return 0;
      case 726: return 0;
      case 727: return 0;
      case 728: return 0;
      case 729: return 0;
      case 730: return 0;
      case 731: return 0;
      case 732: return 0;
      case 733: return 0;
      case 734: return 0;
      case 735: return 0;
      case 736: return 0;
      case 737: return 0;
      case 738: return 0;
      case 739: return 0;
      case 740: return 0;
      case 741: return 0;
      case 742: return 0;
      case 743: return 0;
      case 744: return 0;
      case 745: return 0;
      case 746: return 0;
      case 747: return 0;
      case 748: return 0;
      case 749: return 0;
      case 750: return 0;
      case 751: return 0;
      case 752: return 0;
      case 753: return 0;
      case 754: return 0;
      case 755: return 0;
      case 756: return 0;
      case 757: return 0;
      case 758: return 0;
      case 759: return 0;
      case 760: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl8tst_nodeIicED2Ev") {
      switch(AccessId) {
      case 0: return 173;
      case 1: return 173;
      case 2: return 173;
      case 3: return 141;
      case 4: return 32;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9c_grammar10definitionIN5boost6spirit7scannerIPKcNS2_16scanner_policiesINS2_28skip_parser_iteration_policyI12skip_grammarNS2_16iteration_policyEEENS2_12match_policyENS2_13action_policyEEEEEEC2ERKS_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 5;
      case 31: return 5;
      case 32: return 5;
      case 33: return 0;
      case 34: return 0;
      case 35: return 5;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 3;
      case 40: return 1;
      case 41: return 7;
      case 42: return 6;
      case 43: return 6;
      case 44: return 0;
      case 45: return 0;
      case 46: return 7;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      case 50: return 4;
      case 51: return 1;
      case 52: return 7;
      case 53: return 5;
      case 54: return 5;
      case 55: return 0;
      case 56: return 0;
      case 57: return 7;
      case 58: return 1;
      case 59: return 1;
      case 60: return 1;
      case 61: return 3;
      case 62: return 1;
      case 63: return 8;
      case 64: return 4;
      case 65: return 4;
      case 66: return 0;
      case 67: return 0;
      case 68: return 8;
      case 69: return 1;
      case 70: return 1;
      case 71: return 1;
      case 72: return 3;
      case 73: return 1;
      case 74: return 10;
      case 75: return 5;
      case 76: return 5;
      case 77: return 0;
      case 78: return 0;
      case 79: return 10;
      case 80: return 1;
      case 81: return 1;
      case 82: return 1;
      case 83: return 4;
      case 84: return 1;
      case 85: return 14;
      case 86: return 6;
      case 87: return 6;
      case 88: return 0;
      case 89: return 0;
      case 90: return 14;
      case 91: return 1;
      case 92: return 1;
      case 93: return 1;
      case 94: return 7;
      case 95: return 1;
      case 96: return 11;
      case 97: return 8;
      case 98: return 8;
      case 99: return 0;
      case 100: return 0;
      case 101: return 11;
      case 102: return 1;
      case 103: return 1;
      case 104: return 1;
      case 105: return 6;
      case 106: return 1;
      case 107: return 7;
      case 108: return 2;
      case 109: return 2;
      case 110: return 0;
      case 111: return 0;
      case 112: return 7;
      case 113: return 1;
      case 114: return 1;
      case 115: return 1;
      case 116: return 1;
      case 117: return 1;
      case 118: return 12;
      case 119: return 5;
      case 120: return 5;
      case 121: return 0;
      case 122: return 0;
      case 123: return 12;
      case 124: return 1;
      case 125: return 1;
      case 126: return 1;
      case 127: return 5;
      case 128: return 1;
      case 129: return 9;
      case 130: return 5;
      case 131: return 5;
      case 132: return 0;
      case 133: return 0;
      case 134: return 9;
      case 135: return 1;
      case 136: return 1;
      case 137: return 1;
      case 138: return 3;
      case 139: return 1;
      case 140: return 10;
      case 141: return 4;
      case 142: return 4;
      case 143: return 0;
      case 144: return 0;
      case 145: return 10;
      case 146: return 1;
      case 147: return 1;
      case 148: return 1;
      case 149: return 3;
      case 150: return 1;
      case 151: return 13;
      case 152: return 6;
      case 153: return 6;
      case 154: return 0;
      case 155: return 0;
      case 156: return 13;
      case 157: return 1;
      case 158: return 1;
      case 159: return 1;
      case 160: return 5;
      case 161: return 1;
      case 162: return 11;
      case 163: return 6;
      case 164: return 6;
      case 165: return 0;
      case 166: return 0;
      case 167: return 11;
      case 168: return 1;
      case 169: return 1;
      case 170: return 1;
      case 171: return 4;
      case 172: return 1;
      case 173: return 10;
      case 174: return 3;
      case 175: return 3;
      case 176: return 0;
      case 177: return 0;
      case 178: return 10;
      case 179: return 1;
      case 180: return 1;
      case 181: return 1;
      case 182: return 2;
      case 183: return 1;
      case 184: return 11;
      case 185: return 5;
      case 186: return 5;
      case 187: return 0;
      case 188: return 0;
      case 189: return 11;
      case 190: return 1;
      case 191: return 1;
      case 192: return 1;
      case 193: return 3;
      case 194: return 1;
      case 195: return 10;
      case 196: return 3;
      case 197: return 3;
      case 198: return 0;
      case 199: return 0;
      case 200: return 10;
      case 201: return 1;
      case 202: return 1;
      case 203: return 1;
      case 204: return 1;
      case 205: return 1;
      case 206: return 12;
      case 207: return 3;
      case 208: return 3;
      case 209: return 0;
      case 210: return 0;
      case 211: return 12;
      case 212: return 1;
      case 213: return 1;
      case 214: return 1;
      case 215: return 2;
      case 216: return 1;
      case 217: return 13;
      case 218: return 5;
      case 219: return 5;
      case 220: return 0;
      case 221: return 0;
      case 222: return 13;
      case 223: return 1;
      case 224: return 1;
      case 225: return 1;
      case 226: return 3;
      case 227: return 1;
      case 228: return 18;
      case 229: return 9;
      case 230: return 9;
      case 231: return 0;
      case 232: return 0;
      case 233: return 18;
      case 234: return 1;
      case 235: return 1;
      case 236: return 1;
      case 237: return 7;
      case 238: return 1;
      case 239: return 17;
      case 240: return 5;
      case 241: return 5;
      case 242: return 0;
      case 243: return 0;
      case 244: return 17;
      case 245: return 1;
      case 246: return 1;
      case 247: return 1;
      case 248: return 5;
      case 249: return 1;
      case 250: return 16;
      case 251: return 6;
      case 252: return 6;
      case 253: return 0;
      case 254: return 0;
      case 255: return 16;
      case 256: return 1;
      case 257: return 1;
      case 258: return 1;
      case 259: return 4;
      case 260: return 1;
      case 261: return 18;
      case 262: return 6;
      case 263: return 6;
      case 264: return 0;
      case 265: return 0;
      case 266: return 18;
      case 267: return 1;
      case 268: return 1;
      case 269: return 1;
      case 270: return 5;
      case 271: return 1;
      case 272: return 19;
      case 273: return 5;
      case 274: return 5;
      case 275: return 0;
      case 276: return 0;
      case 277: return 19;
      case 278: return 1;
      case 279: return 1;
      case 280: return 1;
      case 281: return 5;
      case 282: return 1;
      case 283: return 19;
      case 284: return 6;
      case 285: return 6;
      case 286: return 0;
      case 287: return 0;
      case 288: return 19;
      case 289: return 1;
      case 290: return 1;
      case 291: return 1;
      case 292: return 5;
      case 293: return 1;
      case 294: return 20;
      case 295: return 5;
      case 296: return 5;
      case 297: return 0;
      case 298: return 0;
      case 299: return 20;
      case 300: return 1;
      case 301: return 1;
      case 302: return 1;
      case 303: return 5;
      case 304: return 1;
      case 305: return 20;
      case 306: return 6;
      case 307: return 6;
      case 308: return 0;
      case 309: return 0;
      case 310: return 20;
      case 311: return 1;
      case 312: return 1;
      case 313: return 1;
      case 314: return 5;
      case 315: return 1;
      case 316: return 19;
      case 317: return 8;
      case 318: return 8;
      case 319: return 0;
      case 320: return 0;
      case 321: return 19;
      case 322: return 1;
      case 323: return 1;
      case 324: return 1;
      case 325: return 6;
      case 326: return 1;
      case 327: return 18;
      case 328: return 6;
      case 329: return 6;
      case 330: return 0;
      case 331: return 0;
      case 332: return 18;
      case 333: return 1;
      case 334: return 1;
      case 335: return 1;
      case 336: return 4;
      case 337: return 1;
      case 338: return 22;
      case 339: return 7;
      case 340: return 7;
      case 341: return 0;
      case 342: return 0;
      case 343: return 22;
      case 344: return 1;
      case 345: return 1;
      case 346: return 1;
      case 347: return 7;
      case 348: return 1;
      case 349: return 18;
      case 350: return 5;
      case 351: return 5;
      case 352: return 0;
      case 353: return 0;
      case 354: return 18;
      case 355: return 1;
      case 356: return 1;
      case 357: return 1;
      case 358: return 3;
      case 359: return 1;
      case 360: return 23;
      case 361: return 7;
      case 362: return 7;
      case 363: return 0;
      case 364: return 0;
      case 365: return 23;
      case 366: return 1;
      case 367: return 1;
      case 368: return 1;
      case 369: return 7;
      case 370: return 1;
      case 371: return 20;
      case 372: return 6;
      case 373: return 6;
      case 374: return 0;
      case 375: return 0;
      case 376: return 20;
      case 377: return 1;
      case 378: return 1;
      case 379: return 1;
      case 380: return 4;
      case 381: return 1;
      case 382: return 1;
      case 383: return 1;
      case 384: return 1;
      case 385: return 1;
      case 386: return 0;
      case 387: return 0;
      case 388: return 1;
      case 389: return 1;
      case 390: return 1;
      case 391: return 1;
      case 392: return 1;
      case 393: return 0;
      case 394: return 0;
      case 395: return 1;
      case 396: return 1;
      case 397: return 1;
      case 398: return 1;
      case 399: return 1;
      case 400: return 0;
      case 401: return 0;
      case 402: return 1;
      case 403: return 1;
      case 404: return 1;
      case 405: return 1;
      case 406: return 1;
      case 407: return 0;
      case 408: return 0;
      case 409: return 1;
      case 410: return 1;
      case 411: return 1;
      case 412: return 1;
      case 413: return 0;
      case 414: return 0;
      case 415: return 1;
      case 416: return 1;
      case 417: return 1;
      case 418: return 1;
      case 419: return 0;
      case 420: return 0;
      case 421: return 1;
      case 422: return 1;
      case 423: return 1;
      case 424: return 1;
      case 425: return 0;
      case 426: return 0;
      case 427: return 1;
      case 428: return 1;
      case 429: return 1;
      case 430: return 1;
      case 431: return 0;
      case 432: return 0;
      case 433: return 1;
      case 434: return 1;
      case 435: return 1;
      case 436: return 1;
      case 437: return 0;
      case 438: return 0;
      case 439: return 1;
      case 440: return 1;
      case 441: return 1;
      case 442: return 1;
      case 443: return 0;
      case 444: return 0;
      case 445: return 1;
      case 446: return 1;
      case 447: return 1;
      case 448: return 1;
      case 449: return 0;
      case 450: return 0;
      case 451: return 1;
      case 452: return 1;
      case 453: return 1;
      case 454: return 1;
      case 455: return 0;
      case 456: return 0;
      case 457: return 1;
      case 458: return 1;
      case 459: return 1;
      case 460: return 1;
      case 461: return 0;
      case 462: return 0;
      case 463: return 1;
      case 464: return 1;
      case 465: return 1;
      case 466: return 1;
      case 467: return 0;
      case 468: return 0;
      case 469: return 1;
      case 470: return 1;
      case 471: return 1;
      case 472: return 1;
      case 473: return 0;
      case 474: return 0;
      case 475: return 1;
      case 476: return 1;
      case 477: return 1;
      case 478: return 1;
      case 479: return 0;
      case 480: return 0;
      case 481: return 1;
      case 482: return 1;
      case 483: return 1;
      case 484: return 1;
      case 485: return 0;
      case 486: return 0;
      case 487: return 1;
      case 488: return 1;
      case 489: return 1;
      case 490: return 1;
      case 491: return 0;
      case 492: return 0;
      case 493: return 1;
      case 494: return 1;
      case 495: return 1;
      case 496: return 1;
      case 497: return 0;
      case 498: return 0;
      case 499: return 1;
      case 500: return 1;
      case 501: return 1;
      case 502: return 1;
      case 503: return 0;
      case 504: return 0;
      case 505: return 1;
      case 506: return 1;
      case 507: return 1;
      case 508: return 1;
      case 509: return 0;
      case 510: return 0;
      case 511: return 1;
      case 512: return 1;
      case 513: return 1;
      case 514: return 1;
      case 515: return 0;
      case 516: return 0;
      case 517: return 1;
      case 518: return 1;
      case 519: return 1;
      case 520: return 1;
      case 521: return 0;
      case 522: return 0;
      case 523: return 1;
      case 524: return 1;
      case 525: return 1;
      case 526: return 1;
      case 527: return 0;
      case 528: return 0;
      case 529: return 1;
      case 530: return 1;
      case 531: return 1;
      case 532: return 1;
      case 533: return 0;
      case 534: return 0;
      case 535: return 1;
      case 536: return 1;
      case 537: return 1;
      case 538: return 1;
      case 539: return 0;
      case 540: return 0;
      case 541: return 1;
      case 542: return 1;
      case 543: return 1;
      case 544: return 1;
      case 545: return 0;
      case 546: return 0;
      case 547: return 1;
      case 548: return 1;
      case 549: return 1;
      case 550: return 1;
      case 551: return 0;
      case 552: return 0;
      case 553: return 1;
      case 554: return 1;
      case 555: return 1;
      case 556: return 1;
      case 557: return 0;
      case 558: return 0;
      case 559: return 1;
      case 560: return 1;
      case 561: return 1;
      case 562: return 1;
      case 563: return 0;
      case 564: return 0;
      case 565: return 1;
      case 566: return 1;
      case 567: return 1;
      case 568: return 1;
      case 569: return 0;
      case 570: return 0;
      case 571: return 1;
      case 572: return 1;
      case 573: return 1;
      case 574: return 1;
      case 575: return 0;
      case 576: return 0;
      case 577: return 1;
      case 578: return 1;
      case 579: return 1;
      case 580: return 1;
      case 581: return 0;
      case 582: return 0;
      case 583: return 1;
      case 584: return 1;
      case 585: return 1;
      case 586: return 1;
      case 587: return 0;
      case 588: return 0;
      case 589: return 1;
      case 590: return 1;
      case 591: return 1;
      case 592: return 1;
      case 593: return 0;
      case 594: return 0;
      case 595: return 1;
      case 596: return 1;
      case 597: return 1;
      case 598: return 1;
      case 599: return 0;
      case 600: return 0;
      case 601: return 1;
      case 602: return 1;
      case 603: return 1;
      case 604: return 1;
      case 605: return 1;
      case 606: return 1;
      case 607: return 0;
      case 608: return 0;
      case 609: return 1;
      case 610: return 1;
      case 611: return 1;
      case 612: return 1;
      case 613: return 1;
      case 614: return 1;
      case 615: return 1;
      case 616: return 0;
      case 617: return 0;
      case 618: return 1;
      case 619: return 1;
      case 620: return 1;
      case 621: return 1;
      case 622: return 0;
      case 623: return 0;
      case 624: return 1;
      case 625: return 1;
      case 626: return 1;
      case 627: return 1;
      case 628: return 0;
      case 629: return 0;
      case 630: return 1;
      case 631: return 1;
      case 632: return 1;
      case 633: return 1;
      case 634: return 0;
      case 635: return 0;
      case 636: return 1;
      case 637: return 1;
      case 638: return 1;
      case 639: return 1;
      case 640: return 0;
      case 641: return 0;
      case 642: return 1;
      case 643: return 1;
      case 644: return 1;
      case 645: return 1;
      case 646: return 1;
      case 647: return 1;
      case 648: return 1;
      case 649: return 1;
      case 650: return 1;
      case 651: return 1;
      case 652: return 1;
      case 653: return 0;
      case 654: return 0;
      case 655: return 1;
      case 656: return 1;
      case 657: return 1;
      case 658: return 1;
      case 659: return 1;
      case 660: return 1;
      case 661: return 1;
      case 662: return 0;
      case 663: return 0;
      case 664: return 1;
      case 665: return 1;
      case 666: return 1;
      case 667: return 1;
      case 668: return 0;
      case 669: return 0;
      case 670: return 1;
      case 671: return 1;
      case 672: return 1;
      case 673: return 1;
      case 674: return 1;
      case 675: return 0;
      case 676: return 0;
      case 677: return 1;
      case 678: return 1;
      case 679: return 1;
      case 680: return 1;
      case 681: return 1;
      case 682: return 0;
      case 683: return 0;
      case 684: return 1;
      case 685: return 1;
      case 686: return 1;
      case 687: return 1;
      case 688: return 1;
      case 689: return 1;
      case 690: return 0;
      case 691: return 0;
      case 692: return 1;
      case 693: return 1;
      case 694: return 1;
      case 695: return 1;
      case 696: return 1;
      case 697: return 0;
      case 698: return 0;
      case 699: return 1;
      case 700: return 1;
      case 701: return 1;
      case 702: return 1;
      case 703: return 1;
      case 704: return 1;
      case 705: return 1;
      case 706: return 1;
      case 707: return 1;
      case 708: return 1;
      case 709: return 1;
      case 710: return 0;
      case 711: return 0;
      case 712: return 1;
      case 713: return 1;
      case 714: return 1;
      case 715: return 1;
      case 716: return 1;
      case 717: return 0;
      case 718: return 0;
      case 719: return 1;
      case 720: return 1;
      case 721: return 1;
      case 722: return 1;
      case 723: return 1;
      case 724: return 1;
      case 725: return 1;
      case 726: return 1;
      case 727: return 1;
      case 728: return 1;
      case 729: return 1;
      case 730: return 1;
      case 731: return 1;
      case 732: return 1;
      case 733: return 1;
      case 734: return 1;
      case 735: return 0;
      case 736: return 0;
      case 737: return 1;
      case 738: return 1;
      case 739: return 1;
      case 740: return 1;
      case 741: return 1;
      case 742: return 1;
      case 743: return 1;
      case 744: return 0;
      case 745: return 0;
      case 746: return 1;
      case 747: return 1;
      case 748: return 1;
      case 749: return 1;
      case 750: return 1;
      case 751: return 1;
      case 752: return 1;
      case 753: return 1;
      case 754: return 1;
      case 755: return 1;
      case 756: return 1;
      case 757: return 1;
      case 758: return 1;
      case 759: return 1;
      case 760: return 1;
      case 761: return 0;
      case 762: return 0;
      case 763: return 1;
      case 764: return 1;
      case 765: return 1;
      case 766: return 1;
      case 767: return 1;
      case 768: return 1;
      case 769: return 1;
      case 770: return 1;
      case 771: return 1;
      case 772: return 1;
      case 773: return 0;
      case 774: return 0;
      case 775: return 1;
      case 776: return 1;
      case 777: return 1;
      case 778: return 1;
      case 779: return 1;
      case 780: return 1;
      case 781: return 1;
      case 782: return 1;
      case 783: return 1;
      case 784: return 1;
      case 785: return 0;
      case 786: return 0;
      case 787: return 1;
      case 788: return 1;
      case 789: return 1;
      case 790: return 1;
      case 791: return 1;
      case 792: return 0;
      case 793: return 0;
      case 794: return 1;
      case 795: return 1;
      case 796: return 1;
      case 797: return 1;
      case 798: return 1;
      case 799: return 1;
      case 800: return 1;
      case 801: return 1;
      case 802: return 1;
      case 803: return 1;
      case 804: return 1;
      case 805: return 1;
      case 806: return 1;
      case 807: return 0;
      case 808: return 0;
      case 809: return 1;
      case 810: return 1;
      case 811: return 1;
      case 812: return 1;
      case 813: return 1;
      case 814: return 0;
      case 815: return 0;
      case 816: return 1;
      case 817: return 1;
      case 818: return 1;
      case 819: return 1;
      case 820: return 1;
      case 821: return 1;
      case 822: return 1;
      case 823: return 1;
      case 824: return 1;
      case 825: return 1;
      case 826: return 0;
      case 827: return 0;
      case 828: return 1;
      case 829: return 1;
      case 830: return 1;
      case 831: return 1;
      case 832: return 1;
      case 833: return 0;
      case 834: return 0;
      case 835: return 1;
      case 836: return 1;
      case 837: return 1;
      case 838: return 1;
      case 839: return 1;
      case 840: return 1;
      case 841: return 0;
      case 842: return 0;
      case 843: return 1;
      case 844: return 1;
      case 845: return 1;
      case 846: return 1;
      case 847: return 1;
      case 848: return 0;
      case 849: return 0;
      case 850: return 1;
      case 851: return 1;
      case 852: return 1;
      case 853: return 1;
      case 854: return 1;
      case 855: return 1;
      case 856: return 1;
      case 857: return 1;
      case 858: return 1;
      case 859: return 1;
      case 860: return 1;
      case 861: return 1;
      case 862: return 0;
      case 863: return 0;
      case 864: return 1;
      case 865: return 1;
      case 866: return 1;
      case 867: return 1;
      case 868: return 1;
      case 869: return 0;
      case 870: return 0;
      case 871: return 1;
      case 872: return 1;
      case 873: return 1;
      case 874: return 1;
      case 875: return 1;
      case 876: return 1;
      case 877: return 0;
      case 878: return 0;
      case 879: return 1;
      case 880: return 1;
      case 881: return 1;
      case 882: return 1;
      case 883: return 1;
      case 884: return 0;
      case 885: return 0;
      case 886: return 1;
      case 887: return 1;
      case 888: return 1;
      case 889: return 1;
      case 890: return 1;
      case 891: return 1;
      case 892: return 1;
      case 893: return 0;
      case 894: return 0;
      case 895: return 1;
      case 896: return 1;
      case 897: return 1;
      case 898: return 1;
      case 899: return 1;
      case 900: return 0;
      case 901: return 0;
      case 902: return 1;
      case 903: return 1;
      case 904: return 1;
      case 905: return 1;
      case 906: return 1;
      case 907: return 1;
      case 908: return 1;
      case 909: return 0;
      case 910: return 0;
      case 911: return 1;
      case 912: return 1;
      case 913: return 1;
      case 914: return 1;
      case 915: return 1;
      case 916: return 0;
      case 917: return 0;
      case 918: return 1;
      case 919: return 1;
      case 920: return 1;
      case 921: return 1;
      case 922: return 1;
      case 923: return 1;
      case 924: return 1;
      case 925: return 0;
      case 926: return 0;
      case 927: return 1;
      case 928: return 1;
      case 929: return 1;
      case 930: return 1;
      case 931: return 1;
      case 932: return 0;
      case 933: return 0;
      case 934: return 1;
      case 935: return 1;
      case 936: return 1;
      case 937: return 1;
      case 938: return 1;
      case 939: return 0;
      case 940: return 0;
      case 941: return 1;
      case 942: return 1;
      case 943: return 1;
      case 944: return 1;
      case 945: return 1;
      case 946: return 0;
      case 947: return 0;
      case 948: return 1;
      case 949: return 1;
      case 950: return 1;
      case 951: return 1;
      case 952: return 1;
      case 953: return 0;
      case 954: return 0;
      case 955: return 1;
      case 956: return 1;
      case 957: return 1;
      case 958: return 1;
      case 959: return 1;
      case 960: return 0;
      case 961: return 0;
      case 962: return 1;
      case 963: return 1;
      case 964: return 1;
      case 965: return 1;
      case 966: return 1;
      case 967: return 1;
      case 968: return 1;
      case 969: return 1;
      case 970: return 1;
      case 971: return 1;
      case 972: return 0;
      case 973: return 0;
      case 974: return 1;
      case 975: return 1;
      case 976: return 1;
      case 977: return 1;
      case 978: return 1;
      case 979: return 1;
      case 980: return 1;
      case 981: return 0;
      case 982: return 0;
      case 983: return 1;
      case 984: return 1;
      case 985: return 1;
      case 986: return 1;
      case 987: return 1;
      case 988: return 0;
      case 989: return 0;
      case 990: return 1;
      case 991: return 1;
      case 992: return 1;
      case 993: return 1;
      case 994: return 1;
      case 995: return 0;
      case 996: return 0;
      case 997: return 1;
      case 998: return 1;
      case 999: return 1;
      case 1000: return 1;
      case 1001: return 1;
      case 1002: return 1;
      case 1003: return 1;
      case 1004: return 0;
      case 1005: return 0;
      case 1006: return 1;
      case 1007: return 1;
      case 1008: return 1;
      case 1009: return 1;
      case 1010: return 0;
      case 1011: return 0;
      case 1012: return 1;
      case 1013: return 1;
      case 1014: return 1;
      case 1015: return 1;
      case 1016: return 1;
      case 1017: return 1;
      case 1018: return 1;
      case 1019: return 0;
      case 1020: return 0;
      case 1021: return 1;
      case 1022: return 1;
      case 1023: return 1;
      case 1024: return 1;
      case 1025: return 1;
      case 1026: return 1;
      case 1027: return 1;
      case 1028: return 0;
      case 1029: return 0;
      case 1030: return 1;
      case 1031: return 1;
      case 1032: return 1;
      case 1033: return 1;
      case 1034: return 1;
      case 1035: return 1;
      case 1036: return 1;
      case 1037: return 0;
      case 1038: return 0;
      case 1039: return 1;
      case 1040: return 1;
      case 1041: return 1;
      case 1042: return 1;
      case 1043: return 1;
      case 1044: return 1;
      case 1045: return 1;
      case 1046: return 0;
      case 1047: return 0;
      case 1048: return 1;
      case 1049: return 1;
      case 1050: return 1;
      case 1051: return 1;
      case 1052: return 1;
      case 1053: return 1;
      case 1054: return 1;
      case 1055: return 1;
      case 1056: return 0;
      case 1057: return 0;
      case 1058: return 1;
      case 1059: return 1;
      case 1060: return 1;
      case 1061: return 1;
      case 1062: return 1;
      case 1063: return 1;
      case 1064: return 1;
      case 1065: return 1;
      case 1066: return 1;
      case 1067: return 1;
      case 1068: return 1;
      case 1069: return 1;
      case 1070: return 1;
      case 1071: return 1;
      case 1072: return 0;
      case 1073: return 0;
      case 1074: return 1;
      case 1075: return 1;
      case 1076: return 1;
      case 1077: return 1;
      case 1078: return 1;
      case 1079: return 1;
      case 1080: return 1;
      case 1081: return 1;
      case 1082: return 1;
      case 1083: return 1;
      case 1084: return 1;
      case 1085: return 0;
      case 1086: return 0;
      case 1087: return 1;
      case 1088: return 1;
      case 1089: return 1;
      case 1090: return 1;
      case 1091: return 1;
      case 1092: return 0;
      case 1093: return 0;
      case 1094: return 1;
      case 1095: return 1;
      case 1096: return 1;
      case 1097: return 1;
      case 1098: return 0;
      case 1099: return 0;
      case 1100: return 1;
      case 1101: return 1;
      case 1102: return 1;
      case 1103: return 1;
      case 1104: return 1;
      case 1105: return 1;
      case 1106: return 1;
      case 1107: return 0;
      case 1108: return 0;
      case 1109: return 1;
      case 1110: return 1;
      case 1111: return 1;
      case 1112: return 1;
      case 1113: return 1;
      case 1114: return 1;
      case 1115: return 0;
      case 1116: return 0;
      case 1117: return 1;
      case 1118: return 1;
      case 1119: return 1;
      case 1120: return 1;
      case 1121: return 1;
      case 1122: return 1;
      case 1123: return 1;
      case 1124: return 0;
      case 1125: return 0;
      case 1126: return 1;
      case 1127: return 1;
      case 1128: return 1;
      case 1129: return 1;
      case 1130: return 1;
      case 1131: return 1;
      case 1132: return 1;
      case 1133: return 0;
      case 1134: return 0;
      case 1135: return 1;
      case 1136: return 1;
      case 1137: return 1;
      case 1138: return 1;
      case 1139: return 1;
      case 1140: return 1;
      case 1141: return 1;
      case 1142: return 1;
      case 1143: return 0;
      case 1144: return 0;
      case 1145: return 1;
      case 1146: return 1;
      case 1147: return 1;
      case 1148: return 1;
      case 1149: return 1;
      case 1150: return 1;
      case 1151: return 1;
      case 1152: return 0;
      case 1153: return 0;
      case 1154: return 1;
      case 1155: return 1;
      case 1156: return 1;
      case 1157: return 1;
      case 1158: return 1;
      case 1159: return 1;
      case 1160: return 1;
      case 1161: return 0;
      case 1162: return 0;
      case 1163: return 1;
      case 1164: return 1;
      case 1165: return 1;
      case 1166: return 1;
      case 1167: return 1;
      case 1168: return 0;
      case 1169: return 0;
      case 1170: return 1;
      case 1171: return 1;
      case 1172: return 1;
      case 1173: return 1;
      case 1174: return 1;
      case 1175: return 0;
      case 1176: return 0;
      case 1177: return 1;
      case 1178: return 1;
      case 1179: return 1;
      case 1180: return 1;
      case 1181: return 1;
      case 1182: return 1;
      case 1183: return 1;
      case 1184: return 1;
      case 1185: return 1;
      case 1186: return 1;
      case 1187: return 0;
      case 1188: return 0;
      case 1189: return 0;
      case 1190: return 0;
      case 1191: return 1;
      case 1192: return 1;
      case 1193: return 1;
      case 1194: return 1;
      case 1195: return 1;
      case 1196: return 1;
      case 1197: return 1;
      case 1198: return 1;
      case 1199: return 1;
      case 1200: return 1;
      case 1201: return 1;
      case 1202: return 0;
      case 1203: return 0;
      case 1204: return 1;
      case 1205: return 1;
      case 1206: return 1;
      case 1207: return 1;
      case 1208: return 1;
      case 1209: return 1;
      case 1210: return 1;
      case 1211: return 0;
      case 1212: return 0;
      case 1213: return 1;
      case 1214: return 1;
      case 1215: return 1;
      case 1216: return 1;
      case 1217: return 0;
      case 1218: return 0;
      case 1219: return 1;
      case 1220: return 1;
      case 1221: return 1;
      case 1222: return 1;
      case 1223: return 1;
      case 1224: return 1;
      case 1225: return 0;
      case 1226: return 0;
      case 1227: return 0;
      case 1228: return 1;
      case 1229: return 1;
      case 1230: return 1;
      case 1231: return 1;
      case 1232: return 1;
      case 1233: return 1;
      case 1234: return 0;
      case 1235: return 0;
      case 1236: return 1;
      case 1237: return 1;
      case 1238: return 1;
      case 1239: return 1;
      case 1240: return 1;
      case 1241: return 1;
      case 1242: return 0;
      case 1243: return 0;
      case 1244: return 1;
      case 1245: return 1;
      case 1246: return 1;
      case 1247: return 1;
      case 1248: return 1;
      case 1249: return 1;
      case 1250: return 1;
      case 1251: return 0;
      case 1252: return 0;
      case 1253: return 1;
      case 1254: return 1;
      case 1255: return 1;
      case 1256: return 1;
      case 1257: return 1;
      case 1258: return 0;
      case 1259: return 0;
      case 1260: return 1;
      case 1261: return 1;
      case 1262: return 1;
      case 1263: return 1;
      case 1264: return 1;
      case 1265: return 0;
      case 1266: return 0;
      case 1267: return 1;
      case 1268: return 1;
      case 1269: return 1;
      case 1270: return 1;
      case 1271: return 1;
      case 1272: return 1;
      case 1273: return 1;
      case 1274: return 1;
      case 1275: return 1;
      case 1276: return 1;
      case 1277: return 1;
      case 1278: return 1;
      case 1279: return 1;
      case 1280: return 1;
      case 1281: return 0;
      case 1282: return 0;
      case 1283: return 0;
      case 1284: return 0;
      case 1285: return 1;
      case 1286: return 1;
      case 1287: return 1;
      case 1288: return 1;
      case 1289: return 1;
      case 1290: return 1;
      case 1291: return 1;
      case 1292: return 1;
      case 1293: return 1;
      case 1294: return 1;
      case 1295: return 0;
      case 1296: return 0;
      case 1297: return 1;
      case 1298: return 1;
      case 1299: return 1;
      case 1300: return 1;
      case 1301: return 1;
      case 1302: return 1;
      case 1303: return 1;
      case 1304: return 1;
      case 1305: return 1;
      case 1306: return 0;
      case 1307: return 0;
      case 1308: return 0;
      case 1309: return 1;
      case 1310: return 1;
      case 1311: return 1;
      case 1312: return 1;
      case 1313: return 1;
      case 1314: return 1;
      case 1315: return 0;
      case 1316: return 0;
      case 1317: return 1;
      case 1318: return 1;
      case 1319: return 1;
      case 1320: return 1;
      case 1321: return 1;
      case 1322: return 1;
      case 1323: return 1;
      case 1324: return 1;
      case 1325: return 1;
      case 1326: return 0;
      case 1327: return 0;
      case 1328: return 1;
      case 1329: return 1;
      case 1330: return 1;
      case 1331: return 1;
      case 1332: return 1;
      case 1333: return 1;
      case 1334: return 1;
      case 1335: return 1;
      case 1336: return 1;
      case 1337: return 1;
      case 1338: return 1;
      case 1339: return 1;
      case 1340: return 1;
      case 1341: return 1;
      case 1342: return 0;
      case 1343: return 0;
      case 1344: return 1;
      case 1345: return 1;
      case 1346: return 1;
      case 1347: return 1;
      case 1348: return 1;
      case 1349: return 1;
      case 1350: return 1;
      case 1351: return 0;
      case 1352: return 0;
      case 1353: return 1;
      case 1354: return 1;
      case 1355: return 1;
      case 1356: return 1;
      case 1357: return 0;
      case 1358: return 0;
      case 1359: return 1;
      case 1360: return 1;
      case 1361: return 1;
      case 1362: return 1;
      case 1363: return 0;
      case 1364: return 0;
      case 1365: return 1;
      case 1366: return 1;
      case 1367: return 1;
      case 1368: return 1;
      case 1369: return 1;
      case 1370: return 1;
      case 1371: return 0;
      case 1372: return 0;
      case 1373: return 1;
      case 1374: return 1;
      case 1375: return 1;
      case 1376: return 1;
      case 1377: return 1;
      case 1378: return 1;
      case 1379: return 1;
      case 1380: return 1;
      case 1381: return 1;
      case 1382: return 1;
      case 1383: return 1;
      case 1384: return 1;
      case 1385: return 1;
      case 1386: return 1;
      case 1387: return 1;
      case 1388: return 1;
      case 1389: return 1;
      case 1390: return 0;
      case 1391: return 0;
      case 1392: return 0;
      case 1393: return 0;
      case 1394: return 1;
      case 1395: return 1;
      case 1396: return 1;
      case 1397: return 1;
      case 1398: return 1;
      case 1399: return 1;
      case 1400: return 1;
      case 1401: return 1;
      case 1402: return 1;
      case 1403: return 1;
      case 1404: return 1;
      case 1405: return 1;
      case 1406: return 1;
      case 1407: return 1;
      case 1408: return 1;
      case 1409: return 1;
      case 1410: return 1;
      case 1411: return 1;
      case 1412: return 1;
      case 1413: return 1;
      case 1414: return 1;
      case 1415: return 1;
      case 1416: return 1;
      case 1417: return 0;
      case 1418: return 0;
      case 1419: return 0;
      case 1420: return 1;
      case 1421: return 1;
      case 1422: return 1;
      case 1423: return 1;
      case 1424: return 1;
      case 1425: return 1;
      case 1426: return 1;
      case 1427: return 1;
      case 1428: return 1;
      case 1429: return 1;
      case 1430: return 1;
      case 1431: return 1;
      case 1432: return 1;
      case 1433: return 0;
      case 1434: return 0;
      case 1435: return 1;
      case 1436: return 1;
      case 1437: return 1;
      case 1438: return 1;
      case 1439: return 1;
      case 1440: return 1;
      case 1441: return 1;
      case 1442: return 0;
      case 1443: return 0;
      case 1444: return 1;
      case 1445: return 1;
      case 1446: return 1;
      case 1447: return 1;
      case 1448: return 1;
      case 1449: return 0;
      case 1450: return 0;
      case 1451: return 1;
      case 1452: return 1;
      case 1453: return 1;
      case 1454: return 1;
      case 1455: return 0;
      case 1456: return 0;
      case 1457: return 0;
      case 1458: return 0;
      case 1459: return 0;
      case 1460: return 0;
      case 1461: return 0;
      case 1462: return 0;
      case 1463: return 0;
      case 1464: return 0;
      case 1465: return 0;
      case 1466: return 0;
      case 1467: return 0;
      case 1468: return 0;
      case 1469: return 0;
      case 1470: return 0;
      case 1471: return 0;
      case 1472: return 0;
      case 1473: return 0;
      case 1474: return 0;
      case 1475: return 0;
      case 1476: return 0;
      case 1477: return 0;
      case 1478: return 0;
      case 1479: return 0;
      case 1480: return 0;
      case 1481: return 0;
      case 1482: return 0;
      case 1483: return 0;
      case 1484: return 0;
      case 1485: return 0;
      case 1486: return 0;
      case 1487: return 0;
      case 1488: return 0;
      case 1489: return 0;
      case 1490: return 0;
      case 1491: return 0;
      case 1492: return 0;
      case 1493: return 0;
      case 1494: return 0;
      case 1495: return 0;
      case 1496: return 0;
      case 1497: return 0;
      case 1498: return 0;
      case 1499: return 0;
      case 1500: return 0;
      case 1501: return 0;
      case 1502: return 0;
      case 1503: return 0;
      case 1504: return 0;
      case 1505: return 0;
      case 1506: return 0;
      case 1507: return 0;
      case 1508: return 0;
      case 1509: return 0;
      case 1510: return 0;
      case 1511: return 0;
      case 1512: return 0;
      case 1513: return 0;
      case 1514: return 0;
      case 1515: return 0;
      case 1516: return 0;
      case 1517: return 0;
      case 1518: return 0;
      case 1519: return 0;
      case 1520: return 0;
      case 1521: return 0;
      case 1522: return 0;
      case 1523: return 0;
      case 1524: return 0;
      case 1525: return 0;
      case 1526: return 0;
      case 1527: return 0;
      case 1528: return 0;
      case 1529: return 0;
      case 1530: return 0;
      case 1531: return 0;
      case 1532: return 0;
      case 1533: return 0;
      case 1534: return 0;
      case 1535: return 0;
      case 1536: return 0;
      case 1537: return 0;
      case 1538: return 0;
      case 1539: return 0;
      case 1540: return 0;
      case 1541: return 0;
      case 1542: return 0;
      case 1543: return 0;
      case 1544: return 0;
      case 1545: return 0;
      case 1546: return 0;
      case 1547: return 0;
      case 1548: return 0;
      case 1549: return 0;
      case 1550: return 0;
      case 1551: return 0;
      case 1552: return 0;
      case 1553: return 0;
      case 1554: return 0;
      case 1555: return 0;
      case 1556: return 0;
      case 1557: return 0;
      case 1558: return 0;
      case 1559: return 0;
      case 1560: return 0;
      case 1561: return 0;
      case 1562: return 0;
      case 1563: return 0;
      case 1564: return 0;
      case 1565: return 0;
      case 1566: return 0;
      case 1567: return 0;
      case 1568: return 0;
      case 1569: return 0;
      case 1570: return 0;
      case 1571: return 0;
      case 1572: return 0;
      case 1573: return 0;
      case 1574: return 0;
      case 1575: return 0;
      case 1576: return 0;
      case 1577: return 0;
      case 1578: return 0;
      case 1579: return 0;
      case 1580: return 0;
      case 1581: return 0;
      case 1582: return 0;
      case 1583: return 0;
      case 1584: return 0;
      case 1585: return 0;
      case 1586: return 0;
      case 1587: return 0;
      case 1588: return 0;
      case 1589: return 0;
      case 1590: return 0;
      case 1591: return 0;
      case 1592: return 0;
      case 1593: return 0;
      case 1594: return 0;
      case 1595: return 0;
      case 1596: return 0;
      case 1597: return 0;
      case 1598: return 0;
      case 1599: return 0;
      case 1600: return 0;
      case 1601: return 0;
      case 1602: return 0;
      case 1603: return 0;
      case 1604: return 0;
      case 1605: return 0;
      case 1606: return 0;
      case 1607: return 0;
      case 1608: return 0;
      case 1609: return 0;
      case 1610: return 0;
      case 1611: return 0;
      case 1612: return 0;
      case 1613: return 0;
      case 1614: return 0;
      case 1615: return 0;
      case 1616: return 0;
      case 1617: return 0;
      case 1618: return 0;
      case 1619: return 0;
      case 1620: return 0;
      case 1621: return 0;
      case 1622: return 0;
      case 1623: return 0;
      case 1624: return 0;
      case 1625: return 0;
      case 1626: return 0;
      case 1627: return 0;
      case 1628: return 0;
      case 1629: return 0;
      case 1630: return 0;
      case 1631: return 0;
      case 1632: return 0;
      case 1633: return 0;
      case 1634: return 0;
      case 1635: return 0;
      case 1636: return 0;
      case 1637: return 0;
      case 1638: return 0;
      case 1639: return 0;
      case 1640: return 0;
      case 1641: return 0;
      case 1642: return 0;
      case 1643: return 0;
      case 1644: return 0;
      case 1645: return 0;
      case 1646: return 0;
      case 1647: return 0;
      case 1648: return 0;
      case 1649: return 0;
      case 1650: return 0;
      case 1651: return 0;
      case 1652: return 0;
      case 1653: return 0;
      case 1654: return 0;
      case 1655: return 0;
      case 1656: return 0;
      case 1657: return 0;
      case 1658: return 0;
      case 1659: return 0;
      case 1660: return 0;
      case 1661: return 0;
      case 1662: return 0;
      case 1663: return 0;
      case 1664: return 0;
      case 1665: return 0;
      case 1666: return 0;
      case 1667: return 0;
      case 1668: return 0;
      case 1669: return 0;
      case 1670: return 0;
      case 1671: return 0;
      case 1672: return 0;
      case 1673: return 0;
      case 1674: return 0;
      case 1675: return 0;
      case 1676: return 0;
      case 1677: return 0;
      case 1678: return 0;
      case 1679: return 0;
      case 1680: return 0;
      case 1681: return 0;
      case 1682: return 0;
      case 1683: return 0;
      case 1684: return 0;
      case 1685: return 0;
      case 1686: return 0;
      case 1687: return 0;
      case 1688: return 0;
      case 1689: return 0;
      case 1690: return 0;
      case 1691: return 0;
      case 1692: return 0;
      case 1693: return 0;
      case 1694: return 0;
      case 1695: return 0;
      case 1696: return 0;
      case 1697: return 0;
      case 1698: return 0;
      case 1699: return 0;
      case 1700: return 0;
      case 1701: return 0;
      case 1702: return 0;
      case 1703: return 0;
      case 1704: return 0;
      case 1705: return 0;
      case 1706: return 0;
      case 1707: return 0;
      case 1708: return 0;
      case 1709: return 0;
      case 1710: return 0;
      case 1711: return 0;
      case 1712: return 0;
      case 1713: return 0;
      case 1714: return 0;
      case 1715: return 0;
      case 1716: return 0;
      case 1717: return 0;
      case 1718: return 0;
      case 1719: return 0;
      case 1720: return 0;
      case 1721: return 0;
      case 1722: return 0;
      case 1723: return 0;
      case 1724: return 0;
      case 1725: return 0;
      case 1726: return 0;
      case 1727: return 0;
      case 1728: return 0;
      case 1729: return 0;
      case 1730: return 0;
      case 1731: return 0;
      case 1732: return 0;
      case 1733: return 0;
      case 1734: return 0;
      case 1735: return 0;
      case 1736: return 0;
      case 1737: return 0;
      case 1738: return 0;
      case 1739: return 0;
      case 1740: return 0;
      case 1741: return 0;
      case 1742: return 0;
      case 1743: return 0;
      case 1744: return 0;
      case 1745: return 0;
      case 1746: return 0;
      case 1747: return 0;
      case 1748: return 0;
      case 1749: return 0;
      case 1750: return 0;
      case 1751: return 0;
      case 1752: return 0;
      case 1753: return 0;
      case 1754: return 0;
      case 1755: return 0;
      case 1756: return 0;
      case 1757: return 0;
      case 1758: return 0;
      case 1759: return 0;
      case 1760: return 0;
      case 1761: return 0;
      case 1762: return 0;
      case 1763: return 0;
      case 1764: return 0;
      case 1765: return 0;
      case 1766: return 0;
      case 1767: return 0;
      case 1768: return 0;
      case 1769: return 0;
      case 1770: return 0;
      case 1771: return 0;
      case 1772: return 0;
      case 1773: return 0;
      case 1774: return 0;
      case 1775: return 0;
      case 1776: return 0;
      case 1777: return 0;
      case 1778: return 0;
      case 1779: return 0;
      case 1780: return 0;
      case 1781: return 0;
      case 1782: return 0;
      case 1783: return 0;
      case 1784: return 0;
      case 1785: return 0;
      case 1786: return 0;
      case 1787: return 0;
      case 1788: return 0;
      case 1789: return 0;
      case 1790: return 0;
      case 1791: return 0;
      case 1792: return 0;
      case 1793: return 0;
      case 1794: return 0;
      case 1795: return 0;
      case 1796: return 0;
      case 1797: return 0;
      case 1798: return 0;
      case 1799: return 0;
      case 1800: return 0;
      case 1801: return 0;
      case 1802: return 0;
      case 1803: return 0;
      case 1804: return 0;
      case 1805: return 0;
      case 1806: return 0;
      case 1807: return 0;
      case 1808: return 0;
      case 1809: return 0;
      case 1810: return 0;
      case 1811: return 0;
      case 1812: return 0;
      case 1813: return 0;
      case 1814: return 0;
      case 1815: return 0;
      case 1816: return 0;
      case 1817: return 0;
      case 1818: return 0;
      case 1819: return 0;
      case 1820: return 0;
      case 1821: return 0;
      case 1822: return 0;
      case 1823: return 0;
      case 1824: return 0;
      case 1825: return 0;
      case 1826: return 0;
      case 1827: return 0;
      case 1828: return 0;
      case 1829: return 0;
      case 1830: return 0;
      case 1831: return 0;
      case 1832: return 0;
      case 1833: return 0;
      case 1834: return 0;
      case 1835: return 0;
      case 1836: return 0;
      case 1837: return 0;
      case 1838: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt6vectorIPN9c_grammar10definitionIN5boost6spirit7scannerIPKcNS3_16scanner_policiesINS3_28skip_parser_iteration_policyI12skip_grammarNS3_16iteration_policyEEENS3_12match_policyENS3_13action_policyEEEEEEESaISH_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPSH_SJ_EEmRKSH_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      case 62: return 0;
      case 63: return 0;
      case 64: return 0;
      case 65: return 1;
      case 66: return 1;
      case 67: return 0;
      case 68: return 0;
      case 69: return 0;
      case 70: return 0;
      case 71: return 0;
      case 72: return 0;
      case 73: return 0;
      case 74: return 0;
      case 75: return 0;
      case 76: return 0;
      case 77: return 0;
      case 78: return 0;
      case 79: return 0;
      case 80: return 0;
      case 81: return 0;
      case 82: return 0;
      case 83: return 0;
      case 84: return 0;
      case 85: return 2;
      case 86: return 1;
      case 87: return 1;
      case 88: return 1;
      case 89: return 1;
      case 90: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_5chlitIcEENS0_6strlitIPKcEEEENS0_7scannerIS8_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS0_5chlitIcEENS0_6strlitIPKcEEE5parseINS0_7scannerIS6_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultIS8_T_E4typeERKSL_") {
      switch(AccessId) {
      case 0: return 1805160;
      case 1: return 1805160;
      case 2: return 1805160;
      case 3: return 1805160;
      case 4: return 137400;
      case 5: return 1667760;
      case 6: return 1667760;
      case 7: return 1667760;
      case 8: return 1667760;
      case 9: return 1667760;
      case 10: return 1667760;
      case 11: return 1667760;
      case 12: return 1667760;
      case 13: return 372040;
      case 14: return 372040;
      case 15: return 372040;
      case 16: return 2039800;
      case 17: return 2039800;
      case 18: return 1667760;
      case 19: return 1667760;
      case 20: return 1667760;
      case 21: return 1667760;
      case 22: return 1667760;
      case 23: return 1667760;
      case 24: return 1667760;
      case 25: return 1690800;
      case 26: return 1690800;
      case 27: return 23040;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11char_parserINS0_5chlitIcEEE5parseINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultIS3_T_E4typeERKSJ_") {
      switch(AccessId) {
      case 0: return 12686880;
      case 1: return 12686880;
      case 2: return 12686880;
      case 3: return 12686880;
      case 4: return 12686880;
      case 5: return 12686880;
      case 6: return 1697440;
      case 7: return 1697440;
      case 8: return 1697440;
      case 9: return 14384320;
      case 10: return 14384320;
      case 11: return 12686880;
      case 12: return 12686880;
      case 13: return 12686880;
      case 14: return 12686880;
      case 15: return 12686880;
      case 16: return 12686800;
      case 17: return 12686800;
      case 18: return 1166720;
      case 19: return 1166720;
      case 20: return 1166720;
      case 21: return 1166720;
      case 22: return 1166720;
      case 23: return 1166720;
      case 24: return 1166720;
      case 25: return 1390680;
      case 26: return 1390680;
      case 27: return 1390680;
      case 28: return 2557400;
      case 29: return 2557400;
      case 30: return 1166720;
      case 31: return 1166720;
      case 32: return 1166720;
      case 33: return 1166720;
      case 34: return 1166720;
      case 35: return 11520160;
      case 36: return 11520160;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_6strlitIPKcEENS0_7scannerIS5_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 3858040;
      case 1: return 3858040;
      case 2: return 3858040;
      case 3: return 3858040;
      case 4: return 3858040;
      case 5: return 3858040;
      case 6: return 671880;
      case 7: return 671880;
      case 8: return 671880;
      case 9: return 4529920;
      case 10: return 4529920;
      case 11: return 3858040;
      case 12: return 3858040;
      case 13: return 3858040;
      case 14: return 3858040;
      case 15: return 3858040;
      case 16: return 3858040;
      case 17: return 3858040;
      case 18: return 4265880;
      case 19: return 4265880;
      case 20: return 497120;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_6strlitIPKcEENS0_7scannerIS5_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_10contiguousINS0_10differenceINS0_8sequenceINS0_11alternativeINS6_INS0_12alpha_parserENS0_5chlitIcEEEES9_EENS0_11kleene_starINS6_INS6_INS0_12alnum_parserES9_EES9_EEEEEENS5_INS0_7symbolsIicNS1_3tstIicEEEENS4_INS0_14anychar_parserESF_EEEEEEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE16do_parse_virtualERKS12_") {
      switch(AccessId) {
      case 0: return 1310880;
      case 1: return 1310880;
      case 2: return 1310880;
      case 3: return 1310880;
      case 4: return 1310880;
      case 5: return 1310880;
      case 6: return 208960;
      case 7: return 208960;
      case 8: return 208960;
      case 9: return 1519840;
      case 10: return 1519840;
      case 11: return 1310880;
      case 12: return 1310880;
      case 13: return 1310880;
      case 14: return 1310880;
      case 15: return 1310880;
      case 16: return 1310880;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_10contiguousINS0_10differenceINS0_8sequenceINS0_11alternativeINS6_INS0_12alpha_parserENS0_5chlitIcEEEES9_EENS0_11kleene_starINS6_INS6_INS0_12alnum_parserES9_EES9_EEEEEENS5_INS0_7symbolsIicNS1_3tstIicEEEENS4_INS0_14anychar_parserESF_EEEEEEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit10differenceINS0_8sequenceINS0_11alternativeINS3_INS0_12alpha_parserENS0_5chlitIcEEEES6_EENS0_11kleene_starINS3_INS3_INS0_12alnum_parserES6_EES6_EEEEEENS2_INS0_7symbolsIicNS0_4impl3tstIicEEEENS1_INS0_14anychar_parserESC_EEEEE5parseINS0_7scannerIPKcNS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISN_T_E4typeERKS14_") {
      switch(AccessId) {
      case 0: return 1310880;
      case 1: return 1310880;
      case 2: return 1310880;
      case 3: return 1310840;
      case 4: return 507960;
      case 5: return 507960;
      case 6: return 802880;
      case 7: return 802880;
      case 8: return 802880;
      case 9: return 802880;
      case 10: return 3506480;
      case 11: return 952840;
      case 12: return 802880;
      case 13: return 2703600;
      case 14: return 2703600;
      case 15: return 2703600;
      case 16: return 2703600;
      case 17: return 802880;
      case 18: return 741080;
      case 19: return 741080;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS0_7symbolsIicNS0_4impl3tstIicEEEENS0_10differenceINS0_14anychar_parserENS0_11alternativeINS9_INS0_12alnum_parserENS0_5chlitIcEEEESC_EEEEE5parseINS0_7scannerIPKcNS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISG_T_E4typeERKSX_") {
      switch(AccessId) {
      case 0: return 802880;
      case 1: return 802880;
      case 2: return 802880;
      case 3: return 802880;
      case 4: return 802880;
      case 5: return 802880;
      case 6: return 6474640;
      case 7: return 0;
      case 8: return 0;
      case 9: return 931520;
      case 10: return 931520;
      case 11: return 931520;
      case 12: return 931520;
      case 13: return 931520;
      case 14: return 88520;
      case 15: return 6474640;
      case 16: return 802880;
      case 17: return 87960;
      case 18: return 87960;
      case 19: return 87960;
      case 20: return 87960;
      case 21: return 87960;
      case 22: return 87960;
      case 23: return 87960;
      case 24: return 87960;
      case 25: return 87960;
      case 26: return 87960;
      case 27: return 87960;
      case 28: return 67440;
      case 29: return 26160;
      case 30: return 61800;
      case 31: return 0;
      case 32: return 61800;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_10contiguousINS0_8sequenceINS4_INS4_INS0_8optionalINS0_5chlitIcEEEES7_EENS0_11kleene_starINS0_11alternativeINS0_6strlitIPKcEENS0_10differenceINS0_14anychar_parserES7_EEEEEEEES7_EEEENS0_7scannerISE_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit10contiguousINS0_8sequenceINS2_INS2_INS0_8optionalINS0_5chlitIcEEEES5_EENS0_11kleene_starINS0_11alternativeINS0_6strlitIPKcEENS0_10differenceINS0_14anychar_parserES5_EEEEEEEES5_EEE5parseINS0_7scannerISC_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISL_T_E4typeERKSY_") {
      switch(AccessId) {
      case 0: return 323800;
      case 1: return 323800;
      case 2: return 323800;
      case 3: return 323800;
      case 4: return 323800;
      case 5: return 323800;
      case 6: return 19920;
      case 7: return 19920;
      case 8: return 19920;
      case 9: return 343720;
      case 10: return 343720;
      case 11: return 323800;
      case 12: return 323800;
      case 13: return 323800;
      case 14: return 323800;
      case 15: return 323800;
      case 16: return 323800;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS0_8optionalINS0_5chlitIcEEEES4_EENS0_11kleene_starINS0_11alternativeINS0_6strlitIPKcEENS0_10differenceINS0_14anychar_parserES4_EEEEEEE5parseINS0_7scannerISB_NS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISI_T_E4typeERKSX_") {
      switch(AccessId) {
      case 0: return 323800;
      case 1: return 323800;
      case 2: return 323800;
      case 3: return 323800;
      case 4: return 323800;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 323800;
      case 10: return 323800;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8positiveINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EEEESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 355280;
      case 1: return 355280;
      case 2: return 355280;
      case 3: return 355280;
      case 4: return 17760;
      case 5: return 17760;
      case 6: return 17760;
      case 7: return 17760;
      case 8: return 21880;
      case 9: return 21880;
      case 10: return 21880;
      case 11: return 39640;
      case 12: return 39640;
      case 13: return 39640;
      case 14: return 17760;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8positiveINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EEEESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_10contiguousINS0_8sequenceINS4_INS4_INS0_5chlitIcEENS0_12inhibit_caseIS6_EEEENS0_8positiveINS0_13xdigit_parserEEEEENS0_8optionalINS7_INS0_11alternativeIS6_S6_EEEEEEEEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl23contiguous_parser_parseINS0_5matchINS0_5nil_tEEENS0_8sequenceINS6_INS6_INS0_5chlitIcEENS0_12inhibit_caseIS8_EEEENS0_8positiveINS0_13xdigit_parserEEEEENS0_8optionalINS9_INS0_11alternativeIS8_S8_EEEEEEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEESS_EET_RKT0_RKT1_RKNS0_24skipper_iteration_policyIT2_EE") {
      switch(AccessId) {
      case 0: return 533480;
      case 1: return 533480;
      case 2: return 533480;
      case 3: return 533480;
      case 4: return 533480;
      case 5: return 533480;
      case 6: return 118080;
      case 7: return 118080;
      case 8: return 118080;
      case 9: return 651560;
      case 10: return 651560;
      case 11: return 533480;
      case 12: return 533480;
      case 13: return 533480;
      case 14: return 533480;
      case 15: return 533480;
      case 16: return 533480;
      case 17: return 68960;
      case 18: return 68960;
      case 19: return 68960;
      case 20: return 68960;
      case 21: return 68960;
      case 22: return 68960;
      case 23: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS0_5chlitIcEENS0_12inhibit_caseIS3_EEEENS0_8positiveINS0_13xdigit_parserEEEE5parseINS0_7scannerIPKcNS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISA_T_E4typeERKSR_") {
      switch(AccessId) {
      case 0: return 533480;
      case 1: return 533480;
      case 2: return 533480;
      case 3: return 533480;
      case 4: return 533480;
      case 5: return 88560;
      case 6: return 88560;
      case 7: return 88560;
      case 8: return 88560;
      case 9: return 88560;
      case 10: return 88560;
      case 11: return 68960;
      case 12: return 68960;
      case 13: return 68960;
      case 14: return 68960;
      case 15: return 68960;
      case 16: return 68960;
      case 17: return 68960;
      case 18: return 68960;
      case 19: return 68960;
      case 20: return 303680;
      case 21: return 234720;
      case 22: return 234720;
      case 23: return 234720;
      case 24: return 234720;
      case 25: return 68960;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_10contiguousINS0_8sequenceINS4_INS0_5chlitIcEENS0_8positiveINS0_5rangeIcEEEEEENS0_8optionalINS0_12inhibit_caseINS0_11alternativeIS6_S6_EEEEEEEEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl23contiguous_parser_parseINS0_5matchINS0_5nil_tEEENS0_8sequenceINS6_INS0_5chlitIcEENS0_8positiveINS0_5rangeIcEEEEEENS0_8optionalINS0_12inhibit_caseINS0_11alternativeIS8_S8_EEEEEEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEESR_EET_RKT0_RKT1_RKNS0_24skipper_iteration_policyIT2_EE") {
      switch(AccessId) {
      case 0: return 464520;
      case 1: return 464520;
      case 2: return 464520;
      case 3: return 464520;
      case 4: return 464520;
      case 5: return 464520;
      case 6: return 117920;
      case 7: return 117920;
      case 8: return 117920;
      case 9: return 582440;
      case 10: return 582440;
      case 11: return 464520;
      case 12: return 464520;
      case 13: return 464520;
      case 14: return 464520;
      case 15: return 464520;
      case 16: return 464520;
      case 17: return 464520;
      case 18: return 19600;
      case 19: return 19600;
      case 20: return 19600;
      case 21: return 3320;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_10contiguousINS0_8sequenceINS0_8positiveINS0_12digit_parserEEENS0_8optionalINS0_12inhibit_caseINS0_11alternativeINS0_5chlitIcEESC_EEEEEEEEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl23contiguous_parser_parseINS0_5matchINS0_5nil_tEEENS0_8sequenceINS0_8positiveINS0_12digit_parserEEENS0_8optionalINS0_12inhibit_caseINS0_11alternativeINS0_5chlitIcEESE_EEEEEEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEESP_EET_RKT0_RKT1_RKNS0_24skipper_iteration_policyIT2_EE") {
      switch(AccessId) {
      case 0: return 464520;
      case 1: return 464520;
      case 2: return 464520;
      case 3: return 464520;
      case 4: return 464520;
      case 5: return 464520;
      case 6: return 117920;
      case 7: return 117920;
      case 8: return 117920;
      case 9: return 582440;
      case 10: return 582440;
      case 11: return 464520;
      case 12: return 464520;
      case 13: return 464520;
      case 14: return 464520;
      case 15: return 464520;
      case 16: return 464520;
      case 17: return 140720;
      case 18: return 140720;
      case 19: return 217680;
      case 20: return 76960;
      case 21: return 76960;
      case 22: return 140720;
      case 23: return 140720;
      case 24: return 140720;
      case 25: return 140720;
      case 26: return 140720;
      case 27: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_10contiguousINS0_8sequenceINS4_INS4_INS0_8optionalINS0_5chlitIcEEEES7_EENS0_19longest_alternativeINSA_INS0_14anychar_parserENS4_INS4_IS7_S7_EENS0_11finite_loopINS0_5rangeIcEEiiEEEEEENS4_IS7_SB_EEEEEES7_EEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit10contiguousINS0_8sequenceINS2_INS2_INS0_8optionalINS0_5chlitIcEEEES5_EENS0_19longest_alternativeINS8_INS0_14anychar_parserENS2_INS2_IS5_S5_EENS0_11finite_loopINS0_5rangeIcEEiiEEEEEENS2_IS5_S9_EEEEEES5_EEE5parseINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISL_T_E4typeERKS10_") {
      switch(AccessId) {
      case 0: return 323800;
      case 1: return 323800;
      case 2: return 323800;
      case 3: return 323800;
      case 4: return 323800;
      case 5: return 323800;
      case 6: return 19920;
      case 7: return 19920;
      case 8: return 19920;
      case 9: return 343720;
      case 10: return 343720;
      case 11: return 323800;
      case 12: return 323800;
      case 13: return 323800;
      case 14: return 323800;
      case 15: return 323800;
      case 16: return 323800;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS0_8optionalINS0_5chlitIcEEEES4_EENS0_19longest_alternativeINS7_INS0_14anychar_parserENS1_INS1_IS4_S4_EENS0_11finite_loopINS0_5rangeIcEEiiEEEEEENS1_IS4_S8_EEEEE5parseINS0_7scannerIPKcNS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISI_T_E4typeERKSZ_") {
      switch(AccessId) {
      case 0: return 323800;
      case 1: return 323800;
      case 2: return 323800;
      case 3: return 323800;
      case 4: return 323800;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 323800;
      case 10: return 323800;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit19longest_alternativeINS0_14anychar_parserENS0_8sequenceINS3_INS0_5chlitIcEES5_EENS0_11finite_loopINS0_5rangeIcEEiiEEEEE5parseINS0_7scannerIPKcNS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISC_T_E4typeERKST_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESI_EESI_EESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 533480;
      case 1: return 533480;
      case 2: return 533480;
      case 3: return 533480;
      case 4: return 533480;
      case 5: return 533480;
      case 6: return 464520;
      case 7: return 464520;
      case 8: return 464520;
      case 9: return 464520;
      case 10: return 464520;
      case 11: return 464520;
      case 12: return 464520;
      case 13: return 464520;
      case 14: return 464520;
      case 15: return 464520;
      case 16: return 464520;
      case 17: return 464520;
      case 18: return 323800;
      case 19: return 323800;
      case 20: return 323800;
      case 21: return 323800;
      case 22: return 323800;
      case 23: return 323800;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESI_EESI_EESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_10contiguousINS0_8sequenceINS4_INS4_INS4_INS0_8positiveINS0_12digit_parserEEENS0_11alternativeINS0_5chlitIcEESA_EEEENS0_8optionalISB_EEEES7_EENSD_INS0_12inhibit_caseISB_EEEEEEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl23contiguous_parser_parseINS0_5matchINS0_5nil_tEEENS0_8sequenceINS6_INS6_INS6_INS0_8positiveINS0_12digit_parserEEENS0_11alternativeINS0_5chlitIcEESC_EEEENS0_8optionalISD_EEEES9_EENSF_INS0_12inhibit_caseISD_EEEEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEEST_EET_RKT0_RKT1_RKNS0_24skipper_iteration_policyIT2_EE") {
      switch(AccessId) {
      case 0: return 533480;
      case 1: return 533480;
      case 2: return 533480;
      case 3: return 533480;
      case 4: return 533480;
      case 5: return 533480;
      case 6: return 118080;
      case 7: return 118080;
      case 8: return 118080;
      case 9: return 651560;
      case 10: return 651560;
      case 11: return 533480;
      case 12: return 533480;
      case 13: return 533480;
      case 14: return 533480;
      case 15: return 533480;
      case 16: return 533480;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS1_INS0_8positiveINS0_12digit_parserEEENS0_11alternativeINS0_5chlitIcEES7_EEEENS0_8optionalIS8_EEEES4_E5parseINS0_7scannerIPKcNS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISD_T_E4typeERKSU_") {
      switch(AccessId) {
      case 0: return 533480;
      case 1: return 533480;
      case 2: return 533480;
      case 3: return 533480;
      case 4: return 209680;
      case 5: return 209680;
      case 6: return 209680;
      case 7: return 209680;
      case 8: return 286640;
      case 9: return 76960;
      case 10: return 76960;
      case 11: return 76960;
      case 12: return 76960;
      case 13: return 209680;
      case 14: return 209680;
      case 15: return 209680;
      case 16: return 209680;
      case 17: return 209680;
      case 18: return 209680;
      case 19: return 209680;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_10contiguousINS0_8sequenceINS4_INS4_INS4_INS0_11kleene_starINS0_12digit_parserEEENS0_5chlitIcEEEENS0_8positiveIS6_EEEENS0_8optionalINS4_INS4_INS0_11alternativeIS9_S9_EENSE_ISG_EEEESC_EEEEEENSE_INS0_12inhibit_caseISG_EEEEEEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE16do_parse_virtualERKS12_") {
      switch(AccessId) {
      case 0: return 533480;
      case 1: return 533480;
      case 2: return 533480;
      case 3: return 533480;
      case 4: return 533480;
      case 5: return 533480;
      case 6: return 118080;
      case 7: return 118080;
      case 8: return 118080;
      case 9: return 651560;
      case 10: return 651560;
      case 11: return 533480;
      case 12: return 533480;
      case 13: return 533480;
      case 14: return 533480;
      case 15: return 533480;
      case 16: return 533480;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_10contiguousINS0_8sequenceINS4_INS4_INS4_INS0_11kleene_starINS0_12digit_parserEEENS0_5chlitIcEEEENS0_8positiveIS6_EEEENS0_8optionalINS4_INS4_INS0_11alternativeIS9_S9_EENSE_ISG_EEEESC_EEEEEENSE_INS0_12inhibit_caseISG_EEEEEEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS1_INS1_INS0_11kleene_starINS0_12digit_parserEEENS0_5chlitIcEEEENS0_8positiveIS3_EEEENS0_8optionalINS1_INS1_INS0_11alternativeIS6_S6_EENSB_ISD_EEEES9_EEEEEENSB_INS0_12inhibit_caseISD_EEEEE5parseINS0_7scannerIPKcNS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISM_T_E4typeERKS13_") {
      switch(AccessId) {
      case 0: return 600;
      case 1: return 600;
      case 2: return 600;
      case 3: return 600;
      case 4: return 600;
      case 5: return 400;
      case 6: return 200;
      case 7: return 200;
      case 8: return 200;
      case 9: return 200;
      case 10: return 200;
      case 11: return 200;
      case 12: return 200;
      case 13: return 40;
      case 14: return 40;
      case 15: return 40;
      case 16: return 40;
      case 17: return 200;
      case 18: return 200;
      case 19: return 200;
      case 20: return 200;
      case 21: return 200;
      case 22: return 400;
      case 23: return 200;
      case 24: return 200;
      case 25: return 200;
      case 26: return 200;
      case 27: return 200;
      case 28: return 400;
      case 29: return 400;
      case 30: return 600;
      case 31: return 600;
      case 32: return 600;
      case 33: return 600;
      case 34: return 600;
      case 35: return 600;
      case 36: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS0_11kleene_starINS0_12digit_parserEEENS0_5chlitIcEEEENS0_8positiveIS3_EEE5parseINS0_7scannerIPKcNS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISA_T_E4typeERKSR_") {
      switch(AccessId) {
      case 0: return 533480;
      case 1: return 533480;
      case 2: return 533480;
      case 3: return 820120;
      case 4: return 286640;
      case 5: return 286640;
      case 6: return 286640;
      case 7: return 286640;
      case 8: return 533480;
      case 9: return 533480;
      case 10: return 533480;
      case 11: return 533480;
      case 12: return 533480;
      case 13: return 533480;
      case 14: return 600;
      case 15: return 600;
      case 16: return 600;
      case 17: return 600;
      case 18: return 600;
      case 19: return 600;
      case 20: return 600;
      case 21: return 600;
      case 22: return 600;
      case 23: return 1400;
      case 24: return 800;
      case 25: return 800;
      case 26: return 800;
      case 27: return 800;
      case 28: return 600;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_10contiguousINS0_8sequenceINS4_INS4_INS4_INS0_8positiveINS0_12digit_parserEEENS0_5chlitIcEEEENS0_11kleene_starIS6_EEEENS0_8optionalINS4_INS4_INS0_11alternativeIS9_S9_EENSE_ISG_EEEES7_EEEEEENSE_INS0_12inhibit_caseISG_EEEEEEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE16do_parse_virtualERKS12_") {
      switch(AccessId) {
      case 0: return 532880;
      case 1: return 532880;
      case 2: return 532880;
      case 3: return 532880;
      case 4: return 532880;
      case 5: return 532880;
      case 6: return 118080;
      case 7: return 118080;
      case 8: return 118080;
      case 9: return 650960;
      case 10: return 650960;
      case 11: return 532880;
      case 12: return 532880;
      case 13: return 532880;
      case 14: return 532880;
      case 15: return 532880;
      case 16: return 532880;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_10contiguousINS0_8sequenceINS4_INS4_INS4_INS0_8positiveINS0_12digit_parserEEENS0_5chlitIcEEEENS0_11kleene_starIS6_EEEENS0_8optionalINS4_INS4_INS0_11alternativeIS9_S9_EENSE_ISG_EEEES7_EEEEEENSE_INS0_12inhibit_caseISG_EEEEEEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS1_INS1_INS0_8positiveINS0_12digit_parserEEENS0_5chlitIcEEEENS0_11kleene_starIS3_EEEENS0_8optionalINS1_INS1_INS0_11alternativeIS6_S6_EENSB_ISD_EEEES4_EEEEEENSB_INS0_12inhibit_caseISD_EEEEE5parseINS0_7scannerIPKcNS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISM_T_E4typeERKS13_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS0_8positiveINS0_12digit_parserEEENS0_5chlitIcEEEENS0_11kleene_starIS3_EEE5parseINS0_7scannerIPKcNS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISA_T_E4typeERKSR_") {
      switch(AccessId) {
      case 0: return 532880;
      case 1: return 532880;
      case 2: return 532880;
      case 3: return 532880;
      case 4: return 209080;
      case 5: return 209080;
      case 6: return 209080;
      case 7: return 209080;
      case 8: return 286040;
      case 9: return 76960;
      case 10: return 76960;
      case 11: return 76960;
      case 12: return 76960;
      case 13: return 209080;
      case 14: return 209080;
      case 15: return 209080;
      case 16: return 209080;
      case 17: return 209080;
      case 18: return 209080;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESI_EESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 533480;
      case 1: return 533480;
      case 2: return 533480;
      case 3: return 533480;
      case 4: return 533480;
      case 5: return 533480;
      case 6: return 533480;
      case 7: return 533480;
      case 8: return 533480;
      case 9: return 533480;
      case 10: return 533480;
      case 11: return 533480;
      case 12: return 532880;
      case 13: return 532880;
      case 14: return 532880;
      case 15: return 532880;
      case 16: return 532880;
      case 17: return 532880;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESI_EESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_19longest_alternativeINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 533480;
      case 1: return 533480;
      case 2: return 533480;
      case 3: return 533480;
      case 4: return 533480;
      case 5: return 533480;
      case 6: return 533480;
      case 7: return 533480;
      case 8: return 533480;
      case 9: return 533480;
      case 10: return 533480;
      case 11: return 533480;
      case 12: return 533480;
      case 13: return 600;
      case 14: return 600;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_19longest_alternativeINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESI_EENS0_8sequenceINSL_INS0_5chlitIcEESI_EESN_EEEESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS1_INS1_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESF_EESG_EESG_EENS0_8sequenceINSJ_INS0_5chlitIcEESG_EESL_EEE5parseISE_EENS0_13parser_resultISO_T_E4typeERKSR_") {
      switch(AccessId) {
      case 0: return 1163280;
      case 1: return 1163280;
      case 2: return 1163280;
      case 3: return 1163280;
      case 4: return 1163280;
      case 5: return 1163280;
      case 6: return 533480;
      case 7: return 533480;
      case 8: return 533480;
      case 9: return 533480;
      case 10: return 533480;
      case 11: return 533480;
      case 12: return 323800;
      case 13: return 323800;
      case 14: return 323800;
      case 15: return 323800;
      case 16: return 323800;
      case 17: return 323800;
      case 18: return 323800;
      case 19: return 323800;
      case 20: return 323800;
      case 21: return 323800;
      case 22: return 219880;
      case 23: return 219880;
      case 24: return 219880;
      case 25: return 219880;
      case 26: return 219880;
      case 27: return 207040;
      case 28: return 207040;
      case 29: return 207040;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 7345520;
      case 1: return 7345520;
      case 2: return 7345520;
      case 3: return 7345520;
      case 4: return 6672400;
      case 5: return 6672400;
      case 6: return 6672400;
      case 7: return 6672400;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS3_INS3_INS3_INS3_INS3_INS4_INS4_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EESJ_EESJ_EENS4_INS4_INS0_5chlitIcEENS0_8optionalISJ_EEEESN_EEEENS4_ISN_SJ_EEEENS4_INS0_6strlitIS8_EESJ_EEEESW_EESW_EESJ_EENS0_14epsilon_parserEEESH_SI_E16do_parse_virtualERKSH_") {
      switch(AccessId) {
      case 0: return 1198000;
      case 1: return 1198000;
      case 2: return 1046600;
      case 3: return 1046600;
      case 4: return 1046600;
      case 5: return 1046600;
      case 6: return 1046600;
      case 7: return 1046600;
      case 8: return 1046600;
      case 9: return 1046600;
      case 10: return 222320;
      case 11: return 222320;
      case 12: return 222320;
      case 13: return 1268920;
      case 14: return 1268920;
      case 15: return 1046600;
      case 16: return 1046600;
      case 17: return 1046600;
      case 18: return 1046600;
      case 19: return 1046600;
      case 20: return 1046600;
      case 21: return 1046600;
      case 22: return 1050560;
      case 23: return 1050560;
      case 24: return 4040;
      case 25: return 151480;
      case 26: return 151480;
      case 27: return 151480;
      case 28: return 151480;
      case 29: return 1046520;
      case 30: return 1046520;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS3_INS3_INS3_INS3_INS3_INS4_INS4_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EESJ_EESJ_EENS4_INS4_INS0_5chlitIcEENS0_8optionalISJ_EEEESN_EEEENS4_ISN_SJ_EEEENS4_INS0_6strlitIS8_EESJ_EEEESW_EESW_EESJ_EENS0_14epsilon_parserEEESH_SI_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS1_INS1_INS1_INS0_8sequenceINS2_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESG_EESH_EESH_EENS2_INS2_INS0_5chlitIcEENS0_8optionalISH_EEEESL_EEEENS2_ISL_SH_EEEENS2_INS0_6strlitIS6_EESH_EEEESU_E5parseISF_EENS0_13parser_resultISX_T_E4typeERKS10_") {
      switch(AccessId) {
      case 0: return 1198000;
      case 1: return 1198000;
      case 2: return 1112960;
      case 3: return 1112960;
      case 4: return 1112960;
      case 5: return 1112960;
      case 6: return 66280;
      case 7: return 66280;
      case 8: return 66280;
      case 9: return 66280;
      case 10: return 66280;
      case 11: return 1046680;
      case 12: return 1046680;
      case 13: return 1046680;
      case 14: return 1046680;
      case 15: return 1046680;
      case 16: return 1046680;
      case 17: return 1046680;
      case 18: return 1046680;
      case 19: return 1046680;
      case 20: return 1046680;
      case 21: return 222320;
      case 22: return 222320;
      case 23: return 222320;
      case 24: return 1269000;
      case 25: return 1269000;
      case 26: return 1046680;
      case 27: return 1046680;
      case 28: return 1046680;
      case 29: return 1046680;
      case 30: return 1046680;
      case 31: return 1046680;
      case 32: return 1046680;
      case 33: return 1070720;
      case 34: return 1070720;
      case 35: return 24120;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS0_6strlitIPKcEENS0_4ruleINS0_7scannerIS4_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EEE5parseISG_EENS0_13parser_resultISJ_T_E4typeERKSM_") {
      switch(AccessId) {
      case 0: return 5375560;
      case 1: return 5375560;
      case 2: return 5375560;
      case 3: return 5375560;
      case 4: return 5375560;
      case 5: return 5375560;
      case 6: return 507800;
      case 7: return 507800;
      case 8: return 507800;
      case 9: return 5883360;
      case 10: return 5883360;
      case 11: return 5375560;
      case 12: return 5375560;
      case 13: return 5375560;
      case 14: return 5375560;
      case 15: return 5375560;
      case 16: return 5375560;
      case 17: return 5375560;
      case 18: return 5485720;
      case 19: return 5485720;
      case 20: return 212520;
      case 21: return 102360;
      case 22: return 102360;
      case 23: return 102360;
      case 24: return 102360;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS0_8sequenceINS2_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESG_EESH_EESH_EENS2_INS2_INS0_5chlitIcEENS0_8optionalISH_EEEESL_EEE5parseISF_EENS0_13parser_resultISQ_T_E4typeERKST_") {
      switch(AccessId) {
      case 0: return 1198000;
      case 1: return 1198000;
      case 2: return 1198000;
      case 3: return 1198000;
      case 4: return 1198000;
      case 5: return 1198000;
      case 6: return 50720;
      case 7: return 50720;
      case 8: return 50720;
      case 9: return 50720;
      case 10: return 50720;
      case 11: return 50720;
      case 12: return 50720;
      case 13: return 50720;
      case 14: return 1147280;
      case 15: return 1147280;
      case 16: return 1147280;
      case 17: return 1147280;
      case 18: return 34320;
      case 19: return 34320;
      case 20: return 34320;
      case 21: return 34320;
      case 22: return 34320;
      case 23: return 34320;
      case 24: return 34320;
      case 25: return 9040;
      case 26: return 9040;
      case 27: return 34320;
      case 28: return 34320;
      case 29: return 34320;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_11kleene_starINS3_INS0_5chlitIcEESI_EEEEEESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 57800;
      case 1: return 57800;
      case 2: return 57800;
      case 3: return 57800;
      case 4: return 143600;
      case 5: return 143600;
      case 6: return 143600;
      case 7: return 143600;
      case 8: return 94880;
      case 9: return 94880;
      case 10: return 94880;
      case 11: return 94880;
      case 12: return 94880;
      case 13: return 48720;
      case 14: return 48720;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_11kleene_starINS3_INS0_5chlitIcEESI_EEEEEESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8sequenceINS0_6strlitIS7_EESI_EEEESM_EENSJ_ISI_SI_EEEENSJ_ISI_NS3_ISI_NSJ_INSJ_INS0_5chlitIcEESI_EESS_EEEEEEEESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 1163280;
      case 1: return 1163280;
      case 2: return 106880;
      case 3: return 106880;
      case 4: return 106880;
      case 5: return 106880;
      case 6: return 106880;
      case 7: return 106880;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8sequenceINS0_6strlitIS7_EESI_EEEESM_EENSJ_ISI_SI_EEEENSJ_ISI_NS3_ISI_NSJ_INSJ_INS0_5chlitIcEESI_EESS_EEEEEEEESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS1_INS1_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESF_EENS0_8sequenceINS0_6strlitIS5_EESG_EEEESK_EENSH_ISG_SG_EEE5parseISE_EENS0_13parser_resultISO_T_E4typeERKSR_") {
      switch(AccessId) {
      case 0: return 1163280;
      case 1: return 1163280;
      case 2: return 1163280;
      case 3: return 1163280;
      case 4: return 1163280;
      case 5: return 1163280;
      case 6: return 116760;
      case 7: return 116760;
      case 8: return 116600;
      case 9: return 116600;
      case 10: return 116600;
      case 11: return 116600;
      case 12: return 116600;
      case 13: return 116600;
      case 14: return 116600;
      case 15: return 116600;
      case 16: return 9720;
      case 17: return 9720;
      case 18: return 9720;
      case 19: return 9720;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESF_EENS0_8sequenceINSH_INS0_5chlitIcEESG_EESJ_EEE5parseISE_EENS0_13parser_resultISM_T_E4typeERKSP_") {
      switch(AccessId) {
      case 0: return 32360;
      case 1: return 32360;
      case 2: return 32360;
      case 3: return 32360;
      case 4: return 32360;
      case 5: return 32360;
      case 6: return 7440;
      case 7: return 7440;
      case 8: return 7440;
      case 9: return 7440;
      case 10: return 160;
      case 11: return 160;
      case 12: return 160;
      case 13: return 160;
      case 14: return 160;
      case 15: return 160;
      case 16: return 160;
      case 17: return 160;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS3_INS3_INS0_5chlitIcEES5_EES5_EES5_EES5_EES5_EENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE16do_parse_virtualERKSM_") {
      switch(AccessId) {
      case 0: return 116600;
      case 1: return 116600;
      case 2: return 114640;
      case 3: return 114640;
      case 4: return 114640;
      case 5: return 114640;
      case 6: return 320;
      case 7: return 114320;
      case 8: return 114320;
      case 9: return 114320;
      case 10: return 114320;
      case 11: return 7440;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS3_INS3_INS0_5chlitIcEES5_EES5_EES5_EES5_EES5_EENS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS1_INS1_INS0_5chlitIcEES3_EES3_EES3_E5parseINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultIS6_T_E4typeERKSL_") {
      switch(AccessId) {
      case 0: return 116600;
      case 1: return 116600;
      case 2: return 116600;
      case 3: return 116600;
      case 4: return 80;
      case 5: return 116520;
      case 6: return 116520;
      case 7: return 116520;
      case 8: return 116520;
      case 9: return 160;
      case 10: return 116360;
      case 11: return 116360;
      case 12: return 116360;
      case 13: return 116360;
      case 14: return 0;
      case 15: return 116360;
      case 16: return 116360;
      case 17: return 116360;
      case 18: return 116360;
      case 19: return 1720;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS4_INS4_INS0_5chlitIcEENS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEES6_EESL_EESL_EESJ_SK_E16do_parse_virtualERKSJ_") {
      switch(AccessId) {
      case 0: return 708520;
      case 1: return 708520;
      case 2: return 682200;
      case 3: return 682200;
      case 4: return 682200;
      case 5: return 682200;
      case 6: return 682200;
      case 7: return 682200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS4_INS4_INS0_5chlitIcEENS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEES6_EESL_EESL_EESJ_SK_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS1_INS0_5chlitIcEENS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EEEES3_EESI_E5parseISG_EENS0_13parser_resultISL_T_E4typeERKSO_") {
      switch(AccessId) {
      case 0: return 1136240;
      case 1: return 1136240;
      case 2: return 148960;
      case 3: return 148960;
      case 4: return 148960;
      case 5: return 148960;
      case 6: return 148960;
      case 7: return 27120;
      case 8: return 27120;
      case 9: return 27080;
      case 10: return 27080;
      case 11: return 27080;
      case 12: return 27080;
      case 13: return 27080;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS3_INS3_INS4_INS0_5chlitIcEENS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEESM_EESM_EESL_EENS0_14epsilon_parserEEESJ_SK_E16do_parse_virtualERKSJ_") {
      switch(AccessId) {
      case 0: return 623800;
      case 1: return 623800;
      case 2: return 621360;
      case 3: return 621360;
      case 4: return 621360;
      case 5: return 621360;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 2440;
      case 12: return 2440;
      case 13: return 2440;
      case 14: return 2440;
      case 15: return 621360;
      case 16: return 621360;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS3_INS3_INS4_INS0_5chlitIcEENS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEESM_EESM_EESL_EENS0_14epsilon_parserEEESJ_SK_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS0_8sequenceINS0_5chlitIcEENS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EEEESK_E5parseISH_EENS0_13parser_resultISL_T_E4typeERKSO_") {
      switch(AccessId) {
      case 0: return 1755200;
      case 1: return 1755200;
      case 2: return 1755200;
      case 3: return 1755200;
      case 4: return 16000;
      case 5: return 16000;
      case 6: return 16000;
      case 7: return 16000;
      case 8: return 16000;
      case 9: return 1739400;
      case 10: return 1739400;
      case 11: return 1739400;
      case 12: return 1739400;
      case 13: return 2720;
      case 14: return 2720;
      case 15: return 2720;
      case 16: return 2720;
      case 17: return 2720;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS3_INS4_INS0_5chlitIcEENS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEESM_EESL_EENS0_14epsilon_parserEEESJ_SK_E16do_parse_virtualERKSJ_") {
      switch(AccessId) {
      case 0: return 621360;
      case 1: return 621360;
      case 2: return 14160;
      case 3: return 14160;
      case 4: return 14160;
      case 5: return 14160;
      case 6: return 607200;
      case 7: return 607200;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS3_INS4_INS0_5chlitIcEENS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEESM_EESL_EENS0_14epsilon_parserEEESJ_SK_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS3_INS4_INS0_6strlitIPKcEENS0_4ruleINS0_7scannerIS7_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEESM_EESL_EENS0_14epsilon_parserEEESJ_SK_E16do_parse_virtualERKSJ_") {
      switch(AccessId) {
      case 0: return 1115120;
      case 1: return 1115120;
      case 2: return 1104520;
      case 3: return 1104520;
      case 4: return 99040;
      case 5: return 99040;
      case 6: return 99040;
      case 7: return 99040;
      case 8: return 1016080;
      case 9: return 1016080;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS3_INS4_INS0_6strlitIPKcEENS0_4ruleINS0_7scannerIS7_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEESM_EESL_EENS0_14epsilon_parserEEESJ_SK_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS3_INS3_INS3_INS4_INS0_5chlitIcEENS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEESM_EENS4_INS0_6strlitISA_EESL_EEEESQ_EESL_EENS0_14epsilon_parserEEESJ_SK_E16do_parse_virtualERKSJ_") {
      switch(AccessId) {
      case 0: return 510040;
      case 1: return 510040;
      case 2: return 508480;
      case 3: return 508480;
      case 4: return 508280;
      case 5: return 508280;
      case 6: return 2120;
      case 7: return 2120;
      case 8: return 2120;
      case 9: return 2120;
      case 10: return 507920;
      case 11: return 507920;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS3_INS3_INS3_INS4_INS0_5chlitIcEENS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEESM_EENS4_INS0_6strlitISA_EESL_EEEESQ_EESL_EENS0_14epsilon_parserEEESJ_SK_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS4_INS0_5chlitIcEENS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEESL_EENS0_14epsilon_parserEEESJ_SK_E16do_parse_virtualERKSJ_") {
      switch(AccessId) {
      case 0: return 1666320;
      case 1: return 1666320;
      case 2: return 1666320;
      case 3: return 1666320;
      case 4: return 79080;
      case 5: return 79080;
      case 6: return 79080;
      case 7: return 79080;
      case 8: return 79080;
      case 9: return 76480;
      case 10: return 76480;
      case 11: return 76480;
      case 12: return 76480;
      case 13: return 1589840;
      case 14: return 1589840;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS4_INS0_5chlitIcEENS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEESL_EENS0_14epsilon_parserEEESJ_SK_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS4_INS0_6strlitIPKcEENS0_4ruleINS0_7scannerIS7_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEESL_EENS0_14epsilon_parserEEESJ_SK_E16do_parse_virtualERKSJ_") {
      switch(AccessId) {
      case 0: return 859120;
      case 1: return 859120;
      case 2: return 2600;
      case 3: return 2600;
      case 4: return 2600;
      case 5: return 2600;
      case 6: return 856520;
      case 7: return 856520;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS4_INS0_6strlitIPKcEENS0_4ruleINS0_7scannerIS7_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEESL_EENS0_14epsilon_parserEEESJ_SK_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS4_INS4_INS4_INS0_5chlitIcEENS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEES6_EESL_EESL_EENS0_14epsilon_parserEEESJ_SK_E16do_parse_virtualERKSJ_") {
      switch(AccessId) {
      case 0: return 427720;
      case 1: return 427720;
      case 2: return 760;
      case 3: return 760;
      case 4: return 760;
      case 5: return 760;
      case 6: return 426960;
      case 7: return 426960;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS4_INS4_INS4_INS0_5chlitIcEENS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EEEES6_EESL_EESL_EENS0_14epsilon_parserEEESJ_SK_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS4_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EESJ_EESJ_EESJ_EESH_SI_E16do_parse_virtualERKSH_") {
      switch(AccessId) {
      case 0: return 480920;
      case 1: return 480920;
      case 2: return 480920;
      case 3: return 480920;
      case 4: return 480920;
      case 5: return 480920;
      case 6: return 422720;
      case 7: return 422720;
      case 8: return 422720;
      case 9: return 422720;
      case 10: return 12200;
      case 11: return 12200;
      case 12: return 12200;
      case 13: return 12200;
      case 14: return 469240;
      case 15: return 469240;
      case 16: return 469240;
      case 17: return 469240;
      case 18: return 469240;
      case 19: return 469240;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS4_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EESJ_EESJ_EESJ_EESH_SI_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS3_INS3_INS3_INS3_INS3_INS3_INS3_INS0_5chlitIcEENS0_6strlitIPKcEEEES9_EES9_EES9_EES9_EES9_EES9_EES9_EES9_EES9_EENS0_7scannerIS8_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS1_INS1_INS1_INS1_INS1_INS1_INS1_INS1_INS1_INS0_5chlitIcEENS0_6strlitIPKcEEEES7_EES7_EES7_EES7_EES7_EES7_EES7_EES7_EES7_E5parseINS0_7scannerIS6_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISH_T_E4typeERKSU_") {
      switch(AccessId) {
      case 0: return 422720;
      case 1: return 422720;
      case 2: return 410520;
      case 3: return 410520;
      case 4: return 410520;
      case 5: return 410520;
      case 6: return 410520;
      case 7: return 410520;
      case 8: return 410520;
      case 9: return 410520;
      case 10: return 106400;
      case 11: return 106400;
      case 12: return 106400;
      case 13: return 516920;
      case 14: return 516920;
      case 15: return 410520;
      case 16: return 410520;
      case 17: return 410520;
      case 18: return 410520;
      case 19: return 410520;
      case 20: return 410520;
      case 21: return 410520;
      case 22: return 476840;
      case 23: return 476840;
      case 24: return 66320;
      case 25: return 410520;
      case 26: return 410520;
      case 27: return 410520;
      case 28: return 410520;
      case 29: return 410520;
      case 30: return 410520;
      case 31: return 410520;
      case 32: return 410520;
      case 33: return 106400;
      case 34: return 106400;
      case 35: return 106400;
      case 36: return 516920;
      case 37: return 516920;
      case 38: return 410520;
      case 39: return 410520;
      case 40: return 410520;
      case 41: return 410520;
      case 42: return 410520;
      case 43: return 410520;
      case 44: return 410520;
      case 45: return 413920;
      case 46: return 413920;
      case 47: return 3400;
      case 48: return 410520;
      case 49: return 410520;
      case 50: return 410520;
      case 51: return 410520;
      case 52: return 410520;
      case 53: return 410520;
      case 54: return 410520;
      case 55: return 410520;
      case 56: return 410520;
      case 57: return 410520;
      case 58: return 106400;
      case 59: return 106400;
      case 60: return 106400;
      case 61: return 516920;
      case 62: return 516920;
      case 63: return 410520;
      case 64: return 410520;
      case 65: return 410520;
      case 66: return 410520;
      case 67: return 410520;
      case 68: return 410520;
      case 69: return 410520;
      case 70: return 414400;
      case 71: return 414400;
      case 72: return 3880;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS1_INS1_INS1_INS1_INS1_INS1_INS0_5chlitIcEENS0_6strlitIPKcEEEES7_EES7_EES7_EES7_EES7_EES7_E5parseINS0_7scannerIS6_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISE_T_E4typeERKSR_") {
      switch(AccessId) {
      case 0: return 422720;
      case 1: return 422720;
      case 2: return 410560;
      case 3: return 410560;
      case 4: return 410560;
      case 5: return 410560;
      case 6: return 410560;
      case 7: return 410560;
      case 8: return 410560;
      case 9: return 410560;
      case 10: return 106440;
      case 11: return 106440;
      case 12: return 106440;
      case 13: return 517000;
      case 14: return 517000;
      case 15: return 410560;
      case 16: return 410560;
      case 17: return 410560;
      case 18: return 410560;
      case 19: return 410560;
      case 20: return 410560;
      case 21: return 410560;
      case 22: return 412440;
      case 23: return 412440;
      case 24: return 1920;
      case 25: return 410520;
      case 26: return 410520;
      case 27: return 410520;
      case 28: return 410520;
      case 29: return 410520;
      case 30: return 410520;
      case 31: return 410520;
      case 32: return 410520;
      case 33: return 106400;
      case 34: return 106400;
      case 35: return 106400;
      case 36: return 516920;
      case 37: return 516920;
      case 38: return 410520;
      case 39: return 410520;
      case 40: return 410520;
      case 41: return 410520;
      case 42: return 410520;
      case 43: return 410520;
      case 44: return 410520;
      case 45: return 432080;
      case 46: return 432080;
      case 47: return 21560;
      case 48: return 410520;
      case 49: return 410520;
      case 50: return 410520;
      case 51: return 410520;
      case 52: return 410520;
      case 53: return 410520;
      case 54: return 410520;
      case 55: return 410520;
      case 56: return 410520;
      case 57: return 410520;
      case 58: return 106400;
      case 59: return 106400;
      case 60: return 106400;
      case 61: return 516920;
      case 62: return 516920;
      case 63: return 410520;
      case 64: return 410520;
      case 65: return 410520;
      case 66: return 410520;
      case 67: return 410520;
      case 68: return 410520;
      case 69: return 410520;
      case 70: return 584520;
      case 71: return 584520;
      case 72: return 174000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS1_INS1_INS1_INS0_5chlitIcEENS0_6strlitIPKcEEEES7_EES7_EES7_E5parseINS0_7scannerIS6_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISB_T_E4typeERKSO_") {
      switch(AccessId) {
      case 0: return 422720;
      case 1: return 422720;
      case 2: return 410600;
      case 3: return 410600;
      case 4: return 410600;
      case 5: return 410600;
      case 6: return 410600;
      case 7: return 410600;
      case 8: return 410600;
      case 9: return 410600;
      case 10: return 106480;
      case 11: return 106480;
      case 12: return 106480;
      case 13: return 517080;
      case 14: return 517080;
      case 15: return 410600;
      case 16: return 410600;
      case 17: return 410600;
      case 18: return 410600;
      case 19: return 410600;
      case 20: return 410600;
      case 21: return 410600;
      case 22: return 410600;
      case 23: return 410600;
      case 24: return 0;
      case 25: return 410600;
      case 26: return 410600;
      case 27: return 410600;
      case 28: return 410600;
      case 29: return 410600;
      case 30: return 410600;
      case 31: return 410600;
      case 32: return 410600;
      case 33: return 106480;
      case 34: return 106480;
      case 35: return 106480;
      case 36: return 517080;
      case 37: return 517080;
      case 38: return 410600;
      case 39: return 410600;
      case 40: return 410600;
      case 41: return 410600;
      case 42: return 410600;
      case 43: return 410600;
      case 44: return 410600;
      case 45: return 410600;
      case 46: return 410600;
      case 47: return 0;
      case 48: return 410600;
      case 49: return 410600;
      case 50: return 410600;
      case 51: return 410600;
      case 52: return 410600;
      case 53: return 410600;
      case 54: return 410600;
      case 55: return 410600;
      case 56: return 410600;
      case 57: return 410600;
      case 58: return 106480;
      case 59: return 106480;
      case 60: return 106480;
      case 61: return 517080;
      case 62: return 517080;
      case 63: return 410600;
      case 64: return 410600;
      case 65: return 410600;
      case 66: return 410600;
      case 67: return 410600;
      case 68: return 410600;
      case 69: return 410600;
      case 70: return 422400;
      case 71: return 422400;
      case 72: return 11840;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESG_EESF_SG_E16do_parse_virtualERKSF_") {
      switch(AccessId) {
      case 0: return 2480;
      case 1: return 2480;
      case 2: return 2480;
      case 3: return 2480;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESG_EESF_SG_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8optionalISI_EEEENS0_5chlitIcEEEESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 34880;
      case 1: return 34880;
      case 2: return 34880;
      case 3: return 34880;
      case 4: return 15160;
      case 5: return 15160;
      case 6: return 15160;
      case 7: return 15160;
      case 8: return 15160;
      case 9: return 15160;
      case 10: return 40;
      case 11: return 40;
      case 12: return 15160;
      case 13: return 15160;
      case 14: return 15160;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8optionalISI_EEEENS0_5chlitIcEEEESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_11alternativeINS4_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EESJ_EESJ_EENS0_8optionalISJ_EEEESH_SI_E16do_parse_virtualERKSH_") {
      switch(AccessId) {
      case 0: return 93520;
      case 1: return 93520;
      case 2: return 93520;
      case 3: return 93520;
      case 4: return 93520;
      case 5: return 93520;
      case 6: return 86280;
      case 7: return 86280;
      case 8: return 86280;
      case 9: return 86280;
      case 10: return 86280;
      case 11: return 86280;
      case 12: return 51720;
      case 13: return 51720;
      case 14: return 51720;
      case 15: return 51720;
      case 16: return 51720;
      case 17: return 51720;
      case 18: return 41800;
      case 19: return 41800;
      case 20: return 41800;
      case 21: return 41800;
      case 22: return 41800;
      case 23: return 41800;
      case 24: return 31960;
      case 25: return 31960;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_11alternativeINS4_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EESJ_EESJ_EENS0_8optionalISJ_EEEESH_SI_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8optionalINS3_INS0_5chlitIcEESI_EEEEEESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 15200;
      case 1: return 15200;
      case 2: return 15200;
      case 3: return 15200;
      case 4: return 15160;
      case 5: return 15160;
      case 6: return 15160;
      case 7: return 15160;
      case 8: return 14760;
      case 9: return 14760;
      case 10: return 14760;
      case 11: return 14760;
      case 12: return 14760;
      case 13: return 400;
      case 14: return 400;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8optionalINS3_INS0_5chlitIcEESI_EEEEEESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESI_EESI_EESI_EESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS1_INS1_INS1_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESF_EESG_EESG_EESG_EESG_E5parseISE_EENS0_13parser_resultISK_T_E4typeERKSN_") {
      switch(AccessId) {
      case 0: return 407360;
      case 1: return 407360;
      case 2: return 407360;
      case 3: return 407360;
      case 4: return 407360;
      case 5: return 407360;
      case 6: return 390320;
      case 7: return 390320;
      case 8: return 390320;
      case 9: return 390320;
      case 10: return 390320;
      case 11: return 390320;
      case 12: return 386400;
      case 13: return 386400;
      case 14: return 386400;
      case 15: return 386400;
      case 16: return 386400;
      case 17: return 386400;
      case 18: return 342080;
      case 19: return 342080;
      case 20: return 342080;
      case 21: return 342080;
      case 22: return 342080;
      case 23: return 342080;
      case 24: return 322960;
      case 25: return 322960;
      case 26: return 322960;
      case 27: return 322960;
      case 28: return 322960;
      case 29: return 322960;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS3_INS3_INS3_INS3_INS3_INS3_INS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESI_EESI_EESI_EESI_EESI_EESI_EESI_EESI_EESI_EESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 265040;
      case 1: return 265040;
      case 2: return 200160;
      case 3: return 200160;
      case 4: return 200160;
      case 5: return 200160;
      case 6: return 200160;
      case 7: return 200160;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS3_INS3_INS3_INS3_INS3_INS3_INS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESI_EESI_EESI_EESI_EESI_EESI_EESI_EESI_EESI_EESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS1_INS1_INS1_INS1_INS1_INS1_INS1_INS1_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESF_EESG_EESG_EESG_EESG_EESG_EESG_EESG_EESG_EESG_E5parseISE_EENS0_13parser_resultISP_T_E4typeERKSS_") {
      switch(AccessId) {
      case 0: return 265040;
      case 1: return 265040;
      case 2: return 210560;
      case 3: return 210560;
      case 4: return 210560;
      case 5: return 210560;
      case 6: return 210560;
      case 7: return 210560;
      case 8: return 210520;
      case 9: return 210520;
      case 10: return 210520;
      case 11: return 210520;
      case 12: return 210520;
      case 13: return 210520;
      case 14: return 206720;
      case 15: return 206720;
      case 16: return 206720;
      case 17: return 206720;
      case 18: return 206720;
      case 19: return 206720;
      case 20: return 206720;
      case 21: return 206720;
      case 22: return 206720;
      case 23: return 206720;
      case 24: return 206720;
      case 25: return 206720;
      case 26: return 200320;
      case 27: return 200320;
      case 28: return 200320;
      case 29: return 200320;
      case 30: return 200320;
      case 31: return 200320;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_11alternativeINS3_ISI_NS0_8optionalINS3_INS3_ISI_SI_EESI_EEEEEESM_EEEESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 200320;
      case 1: return 200320;
      case 2: return 200320;
      case 3: return 200320;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_11alternativeINS3_ISI_NS0_8optionalINS3_INS3_ISI_SI_EESI_EEEEEESM_EEEESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESG_EENS0_8optionalINS2_INS2_ISH_SH_EESH_EEEEEESK_E5parseISF_EENS0_13parser_resultISN_T_E4typeERKSQ_") {
      switch(AccessId) {
      case 0: return 160;
      case 1: return 160;
      case 2: return 160;
      case 3: return 160;
      case 4: return 160;
      case 5: return 160;
      case 6: return 160;
      case 7: return 160;
      case 8: return 160;
      case 9: return 160;
      case 10: return 160;
      case 11: return 160;
      case 12: return 80;
      case 13: return 80;
      case 14: return 80;
      case 15: return 80;
      case 16: return 80;
      case 17: return 80;
      case 18: return 80;
      case 19: return 80;
      case 20: return 80;
      case 21: return 80;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 408840;
      case 1: return 408840;
      case 2: return 408840;
      case 3: return 408840;
      case 4: return 408840;
      case 5: return 408840;
      case 6: return 400880;
      case 7: return 400880;
      case 8: return 400880;
      case 9: return 400880;
      case 10: return 400880;
      case 11: return 400880;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EENS0_5chlitIcEEEESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 240;
      case 1: return 240;
      case 2: return 240;
      case 3: return 240;
      case 4: return 160;
      case 5: return 160;
      case 6: return 160;
      case 7: return 160;
      case 8: return 160;
      case 9: return 160;
      case 10: return 160;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EENS0_5chlitIcEEEESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_11alternativeINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EESJ_EENS0_8optionalISJ_EEEESH_SI_E16do_parse_virtualERKSH_") {
      switch(AccessId) {
      case 0: return 178760;
      case 1: return 178760;
      case 2: return 178760;
      case 3: return 178760;
      case 4: return 178760;
      case 5: return 178760;
      case 6: return 148440;
      case 7: return 148440;
      case 8: return 148440;
      case 9: return 148440;
      case 10: return 148440;
      case 11: return 148440;
      case 12: return 30320;
      case 13: return 30320;
      case 14: return 30320;
      case 15: return 30320;
      case 16: return 30320;
      case 17: return 30320;
      case 18: return 26520;
      case 19: return 26520;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_11alternativeINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EESJ_EENS0_8optionalISJ_EEEESH_SI_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_13sequential_orINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8sequenceINS0_5chlitIcEESI_EEEESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit13sequential_orINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESF_EENS0_8sequenceINS0_5chlitIcEESG_EEE5parseISE_EENS0_13parser_resultISL_T_E4typeERKSO_") {
      switch(AccessId) {
      case 0: return 160;
      case 1: return 160;
      case 2: return 160;
      case 3: return 160;
      case 4: return 160;
      case 5: return 160;
      case 6: return 160;
      case 7: return 160;
      case 8: return 160;
      case 9: return 160;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 160;
      case 16: return 160;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS3_INS3_INS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8optionalISI_EEEESI_EESI_EESI_EESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 200160;
      case 1: return 200160;
      case 2: return 200160;
      case 3: return 200160;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS3_INS3_INS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8optionalISI_EEEESI_EESI_EESI_EESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_8optionalINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EEEESJ_EESH_SI_E16do_parse_virtualERKSH_") {
      switch(AccessId) {
      case 0: return 32360;
      case 1: return 32360;
      case 2: return 32360;
      case 3: return 32360;
      case 4: return 32360;
      case 5: return 32360;
      case 6: return 32200;
      case 7: return 32200;
      case 8: return 32360;
      case 9: return 32360;
      case 10: return 32360;
      case 11: return 32360;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_8optionalINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EEEESJ_EESH_SI_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_11alternativeINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EENS3_INS3_INS0_5chlitIcEESJ_EESL_EEEESJ_EESH_SI_E16do_parse_virtualERKSH_") {
      switch(AccessId) {
      case 0: return 25080;
      case 1: return 25080;
      case 2: return 25080;
      case 3: return 25080;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_11alternativeINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EENS3_INS3_INS0_5chlitIcEESJ_EESL_EEEESJ_EESH_SI_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS3_INS4_INS4_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EENS0_8optionalISJ_EEEESJ_EENS4_INS4_INS0_5chlitIcEENSK_INS3_ISJ_SJ_EEEEEESP_EEEESJ_EENS0_14epsilon_parserEEESH_SI_E16do_parse_virtualERKSH_") {
      switch(AccessId) {
      case 0: return 33440;
      case 1: return 33440;
      case 2: return 25080;
      case 3: return 25080;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS3_INS4_INS4_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EENS0_8optionalISJ_EEEESJ_EENS4_INS4_INS0_5chlitIcEENSK_INS3_ISJ_SJ_EEEEEESP_EEEESJ_EENS0_14epsilon_parserEEESH_SI_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS0_11alternativeINS1_INS1_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESG_EENS0_8optionalISH_EEEESH_EENS1_INS1_INS0_5chlitIcEENSI_INS2_ISH_SH_EEEEEESN_EEEESH_E5parseISF_EENS0_13parser_resultIST_T_E4typeERKSW_") {
      switch(AccessId) {
      case 0: return 33440;
      case 1: return 33440;
      case 2: return 33440;
      case 3: return 33440;
      case 4: return 33440;
      case 5: return 33440;
      case 6: return 240;
      case 7: return 240;
      case 8: return 240;
      case 9: return 240;
      case 10: return 240;
      case 11: return 240;
      case 12: return 160;
      case 13: return 160;
      case 14: return 240;
      case 15: return 240;
      case 16: return 240;
      case 17: return 240;
      case 18: return 33200;
      case 19: return 33200;
      case 20: return 8360;
      case 21: return 8360;
      case 22: return 8360;
      case 23: return 8360;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS0_5chlitIcEENS0_8optionalINS0_11alternativeINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESJ_EESK_EEEEEES3_E5parseISI_EENS0_13parser_resultISO_T_E4typeERKSR_") {
      switch(AccessId) {
      case 0: return 33200;
      case 1: return 33200;
      case 2: return 8120;
      case 3: return 8120;
      case 4: return 8120;
      case 5: return 8120;
      case 6: return 8120;
      case 7: return 8120;
      case 8: return 8120;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 8120;
      case 18: return 8120;
      case 19: return 8120;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_5chlitIcEENS0_8optionalINS0_13sequential_orINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESL_EESM_EEEEEESK_SL_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS0_5chlitIcEENS0_8optionalINS0_13sequential_orINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESJ_EESK_EEEEE5parseISI_EENS0_13parser_resultISN_T_E4typeERKSQ_") {
      switch(AccessId) {
      case 0: return 66040;
      case 1: return 66040;
      case 2: return 160;
      case 3: return 160;
      case 4: return 160;
      case 5: return 160;
      case 6: return 160;
      case 7: return 160;
      case 8: return 160;
      case 9: return 160;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 160;
      case 18: return 160;
      case 19: return 160;
      case 20: return 160;
      case 21: return 160;
      case 22: return 160;
      case 23: return 160;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8optionalINS3_INS0_5chlitIcEENS0_6strlitIS7_EEEEEEEESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 8120;
      case 1: return 8120;
      case 2: return 8120;
      case 3: return 8120;
      case 4: return 8120;
      case 5: return 8120;
      case 6: return 8120;
      case 7: return 8120;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8optionalINS3_INS0_5chlitIcEENS0_6strlitIS7_EEEEEEEESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS0_5chlitIcEENS0_6strlitIPKcEEE5parseINS0_7scannerIS6_NS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultIS8_T_E4typeERKSL_") {
      switch(AccessId) {
      case 0: return 8120;
      case 1: return 8120;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8optionalINS0_11alternativeISI_SI_EEEEEESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 8640;
      case 1: return 8640;
      case 2: return 8640;
      case 3: return 8640;
      case 4: return 8640;
      case 5: return 8640;
      case 6: return 8640;
      case 7: return 8640;
      case 8: return 8640;
      case 9: return 8640;
      case 10: return 7160;
      case 11: return 7160;
      case 12: return 7160;
      case 13: return 7160;
      case 14: return 7160;
      case 15: return 7160;
      case 16: return 7160;
      case 17: return 7160;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8optionalINS0_11alternativeISI_SI_EEEEEESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8optionalISI_EEEESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 148200;
      case 1: return 148200;
      case 2: return 148200;
      case 3: return 148200;
      case 4: return 26360;
      case 5: return 26360;
      case 6: return 26360;
      case 7: return 26360;
      case 8: return 26360;
      case 9: return 26360;
      case 10: return 26360;
      case 11: return 26360;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8optionalISI_EEEESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_13sequential_orINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 33520;
      case 1: return 33520;
      case 2: return 33520;
      case 3: return 33520;
      case 4: return 33520;
      case 5: return 33520;
      case 6: return 33520;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 33520;
      case 15: return 33520;
      case 16: return 33520;
      case 17: return 33520;
      case 18: return 33520;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_13sequential_orINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_11alternativeINS3_INS0_5chlitIcEENS4_INS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EES6_EENS3_INS0_8optionalISL_EES6_EEEEEENS3_INS3_ISL_SO_EESL_EEEESL_EESJ_SK_E16do_parse_virtualERKSJ_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_11alternativeINS3_INS0_5chlitIcEENS4_INS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESK_EES6_EENS3_INS0_8optionalISL_EES6_EEEEEENS3_INS3_ISL_SO_EESL_EEEESL_EESJ_SK_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS0_8sequenceINS0_5chlitIcEENS1_INS2_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EES4_EENS2_INS0_8optionalISJ_EES4_EEEEEENS2_INS2_ISJ_SM_EESJ_EEE5parseISH_EENS0_13parser_resultISS_T_E4typeERKSV_") {
      switch(AccessId) {
      case 0: return 33520;
      case 1: return 33520;
      case 2: return 33520;
      case 3: return 33520;
      case 4: return 0;
      case 5: return 33520;
      case 6: return 33520;
      case 7: return 33520;
      case 8: return 33520;
      case 9: return 33520;
      case 10: return 33520;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS0_8sequenceINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESG_EENS0_5chlitIcEEEENS2_INS0_8optionalISH_EESJ_EEE5parseISF_EENS0_13parser_resultISO_T_E4typeERKSR_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS3_INS4_INS4_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EENS0_8optionalISJ_EEEESJ_EENS4_INS4_INS0_5chlitIcEESL_EESP_EEEESJ_EENS0_14epsilon_parserEEESH_SI_E16do_parse_virtualERKSH_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS3_INS4_INS4_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EENS0_8optionalISJ_EEEESJ_EENS4_INS4_INS0_5chlitIcEESL_EESP_EEEESJ_EENS0_14epsilon_parserEEESH_SI_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS0_11alternativeINS1_INS1_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESG_EENS0_8optionalISH_EEEESH_EENS1_INS1_INS0_5chlitIcEESJ_EESN_EEEESH_E5parseISF_EENS0_13parser_resultISR_T_E4typeERKSU_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8sequenceINSJ_INSJ_ISI_SI_EENS0_8optionalINS0_5chlitIcEEEEEESI_EEEESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESF_EENS0_8sequenceINSH_INSH_ISG_SG_EENS0_8optionalINS0_5chlitIcEEEEEESG_EEE5parseISE_EENS0_13parser_resultISP_T_E4typeERKSS_") {
      switch(AccessId) {
      case 0: return 96680;
      case 1: return 96680;
      case 2: return 96680;
      case 3: return 96680;
      case 4: return 96680;
      case 5: return 96680;
      case 6: return 40;
      case 7: return 40;
      case 8: return 40;
      case 9: return 40;
      case 10: return 40;
      case 11: return 40;
      case 12: return 40;
      case 13: return 40;
      case 14: return 40;
      case 15: return 40;
      case 16: return 40;
      case 17: return 40;
      case 18: return 40;
      case 19: return 40;
      case 20: return 0;
      case 21: return 40;
      case 22: return 40;
      case 23: return 40;
      case 24: return 40;
      case 25: return 40;
      case 26: return 40;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS3_INS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESI_EESI_EESI_EESI_EESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 48800;
      case 1: return 48800;
      case 2: return 14360;
      case 3: return 14360;
      case 4: return 14360;
      case 5: return 14360;
      case 6: return 14360;
      case 7: return 14360;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS3_INS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EESI_EESI_EESI_EESI_EESI_EESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS0_8sequenceINS4_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EENS0_5chlitIcEEEESJ_EENS4_INS4_INS4_ISJ_SJ_EESL_EESJ_EEEESN_EESH_SI_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS1_INS0_8sequenceINS2_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESG_EENS0_5chlitIcEEEESH_EENS2_INS2_INS2_ISH_SH_EESJ_EESH_EEEESL_E5parseISF_EENS0_13parser_resultISQ_T_E4typeERKST_") {
      switch(AccessId) {
      case 0: return 48800;
      case 1: return 48800;
      case 2: return 48800;
      case 3: return 48800;
      case 4: return 48800;
      case 5: return 48800;
      case 6: return 19920;
      case 7: return 19920;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 48800;
      case 14: return 48800;
      case 15: return 46560;
      case 16: return 46560;
      case 17: return 46560;
      case 18: return 46560;
      case 19: return 46560;
      case 20: return 46560;
      case 21: return 40;
      case 22: return 40;
      case 23: return 40;
      case 24: return 40;
      case 25: return 40;
      case 26: return 40;
      case 27: return 40;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS1_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESF_EESG_EENS0_5chlitIcEEEESG_E5parseISE_EENS0_13parser_resultISL_T_E4typeERKSO_") {
      switch(AccessId) {
      case 0: return 48800;
      case 1: return 48800;
      case 2: return 48800;
      case 3: return 48800;
      case 4: return 2240;
      case 5: return 2240;
      case 6: return 2240;
      case 7: return 2240;
      case 8: return 2240;
      case 9: return 2240;
      case 10: return 2240;
      case 11: return 2240;
      case 12: return 2240;
      case 13: return 2240;
      case 14: return 2240;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8optionalINS0_13sequential_orISI_SI_EEEEEESI_EESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 54640;
      case 1: return 54640;
      case 2: return 54640;
      case 3: return 54640;
      case 4: return 11560;
      case 5: return 11560;
      case 6: return 11560;
      case 7: return 11560;
      case 8: return 11560;
      case 9: return 11560;
      case 10: return 11560;
      case 11: return 6160;
      case 12: return 6160;
      case 13: return 6160;
      case 14: return 6160;
      case 15: return 6160;
      case 16: return 0;
      case 17: return 0;
      case 18: return 5400;
      case 19: return 5400;
      case 20: return 5400;
      case 21: return 5400;
      case 22: return 5400;
      case 23: return 40;
      case 24: return 40;
      case 25: return 11560;
      case 26: return 11560;
      case 27: return 11560;
      case 28: return 11560;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS3_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EENS0_8optionalINS0_13sequential_orISI_SI_EEEEEESI_EESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_8optionalINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EEEENS0_5chlitIcEEEESH_SI_E16do_parse_virtualERKSH_") {
      switch(AccessId) {
      case 0: return 42920;
      case 1: return 42920;
      case 2: return 42920;
      case 3: return 42920;
      case 4: return 42920;
      case 5: return 42920;
      case 6: return 22880;
      case 7: return 22880;
      case 8: return 42920;
      case 9: return 42920;
      case 10: return 20080;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS0_8optionalINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EEEENS0_5chlitIcEEEESH_SI_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS0_8sequenceINS4_INS4_INS4_INS4_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EENS0_5chlitIcEEEESJ_EESL_EESJ_EENS0_8optionalINS4_ISJ_SJ_EEEEEESP_EESH_SI_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS0_8sequenceINS2_INS2_INS2_INS2_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESG_EENS0_5chlitIcEEEESH_EESJ_EESH_EENS0_8optionalINS2_ISH_SH_EEEEEESN_E5parseISF_EENS0_13parser_resultISS_T_E4typeERKSV_") {
      switch(AccessId) {
      case 0: return 22840;
      case 1: return 22840;
      case 2: return 8120;
      case 3: return 8120;
      case 4: return 8120;
      case 5: return 8120;
      case 6: return 8120;
      case 7: return 8120;
      case 8: return 8120;
      case 9: return 8120;
      case 10: return 8120;
      case 11: return 8120;
      case 12: return 1960;
      case 13: return 1960;
      case 14: return 1960;
      case 15: return 1960;
      case 16: return 6160;
      case 17: return 6160;
      case 18: return 14720;
      case 19: return 14720;
      case 20: return 120;
      case 21: return 120;
      case 22: return 120;
      case 23: return 120;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS1_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESF_EENS0_5chlitIcEEEESG_EESI_E5parseISE_EENS0_13parser_resultISL_T_E4typeERKSO_") {
      switch(AccessId) {
      case 0: return 52160;
      case 1: return 52160;
      case 2: return 52160;
      case 3: return 52160;
      case 4: return 8360;
      case 5: return 8360;
      case 6: return 8360;
      case 7: return 8360;
      case 8: return 8360;
      case 9: return 8360;
      case 10: return 8360;
      case 11: return 8360;
      case 12: return 8360;
      case 13: return 8360;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS0_8sequenceINS4_INS4_INS4_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EENS0_5chlitIcEEEESJ_EESL_EESJ_EENS4_INS4_INS4_INS4_INS4_INS4_ISJ_SJ_EESJ_EESL_EESJ_EESL_EESL_EEEENS4_INS4_INS4_INS4_ISN_SJ_EENS0_8optionalISJ_EEEESL_EESJ_EEEESH_SI_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS1_INS0_8sequenceINS2_INS2_INS2_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESG_EENS0_5chlitIcEEEESH_EESJ_EESH_EENS2_INS2_INS2_INS2_INS2_INS2_ISH_SH_EESH_EESJ_EESH_EESJ_EESJ_EEEENS2_INS2_INS2_INS2_ISL_SH_EENS0_8optionalISH_EEEESJ_EESH_EEE5parseISF_EENS0_13parser_resultIS11_T_E4typeERKS14_") {
      switch(AccessId) {
      case 0: return 14600;
      case 1: return 14600;
      case 2: return 120;
      case 3: return 120;
      case 4: return 120;
      case 5: return 120;
      case 6: return 14480;
      case 7: return 14480;
      case 8: return 14360;
      case 9: return 14360;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS1_INS1_INS1_INS1_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESF_EESG_EESG_EENS0_5chlitIcEEEESG_EESK_EESK_E5parseISE_EENS0_13parser_resultISO_T_E4typeERKSR_") {
      switch(AccessId) {
      case 0: return 120;
      case 1: return 120;
      case 2: return 120;
      case 3: return 120;
      case 4: return 120;
      case 5: return 120;
      case 6: return 120;
      case 7: return 120;
      case 8: return 120;
      case 9: return 120;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS1_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESF_EESG_EESG_EENS0_5chlitIcEEE5parseISE_EENS0_13parser_resultISL_T_E4typeERKSO_") {
      switch(AccessId) {
      case 0: return 14480;
      case 1: return 14480;
      case 2: return 14480;
      case 3: return 14480;
      case 4: return 120;
      case 5: return 120;
      case 6: return 120;
      case 7: return 120;
      case 8: return 120;
      case 9: return 120;
      case 10: return 120;
      case 11: return 120;
      case 12: return 120;
      case 13: return 120;
      case 14: return 120;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS1_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESF_EENS0_5chlitIcEEEESG_EESG_E5parseISE_EENS0_13parser_resultISL_T_E4typeERKSO_") {
      switch(AccessId) {
      case 0: return 14360;
      case 1: return 14360;
      case 2: return 14360;
      case 3: return 14360;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS0_8sequenceINS4_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EESJ_EENS0_5chlitIcEEEENS4_ISJ_SM_EEEESO_EENS4_INS4_ISJ_NS0_8optionalISJ_EEEESM_EEEESH_SI_E16do_parse_virtualERKSH_") {
      switch(AccessId) {
      case 0: return 14360;
      case 1: return 14360;
      case 2: return 14360;
      case 3: return 14360;
      case 4: return 14360;
      case 5: return 14360;
      case 6: return 14360;
      case 7: return 14360;
      case 8: return 280;
      case 9: return 280;
      case 10: return 280;
      case 11: return 14080;
      case 12: return 14080;
      case 13: return 14080;
      case 14: return 14080;
      case 15: return 14080;
      case 16: return 14080;
      case 17: return 2520;
      case 18: return 2520;
      case 19: return 2520;
      case 20: return 2520;
      case 21: return 2520;
      case 22: return 2520;
      case 23: return 40;
      case 24: return 40;
      case 25: return 2520;
      case 26: return 2520;
      case 27: return 2520;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS0_8sequenceINS4_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EESJ_EENS0_5chlitIcEEEENS4_ISJ_SM_EEEESO_EENS4_INS4_ISJ_NS0_8optionalISJ_EEEESM_EEEESH_SI_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS0_8sequenceINS2_INS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESG_EESH_EENS0_5chlitIcEEEENS2_ISH_SK_EEE5parseISF_EENS0_13parser_resultISN_T_E4typeERKSQ_") {
      switch(AccessId) {
      case 0: return 14360;
      case 1: return 14360;
      case 2: return 14360;
      case 3: return 14360;
      case 4: return 14360;
      case 5: return 14360;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 14360;
      case 14: return 14360;
      case 15: return 14360;
      case 16: return 14360;
      case 17: return 14360;
      case 18: return 14360;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_8sequenceINS3_INS3_INS0_8optionalINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESI_EEEESJ_EESK_EESJ_EESH_SI_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS1_INS0_8optionalINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESG_EEEESH_EESI_EESH_E5parseISF_EENS0_13parser_resultISL_T_E4typeERKSO_") {
      switch(AccessId) {
      case 0: return 8200;
      case 1: return 8200;
      case 2: return 8200;
      case 3: return 8200;
      case 4: return 8200;
      case 5: return 8200;
      case 6: return 40;
      case 7: return 40;
      case 8: return 8200;
      case 9: return 8200;
      case 10: return 8200;
      case 11: return 8200;
      case 12: return 8120;
      case 13: return 8120;
      case 14: return 8120;
      case 15: return 8120;
      case 16: return 8120;
      case 17: return 8120;
      case 18: return 8120;
      case 19: return 8120;
      case 20: return 8120;
      case 21: return 8120;
      case 22: return 8120;
      case 23: return 8120;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11kleene_starINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EEEESG_SH_E16do_parse_virtualERKSG_") {
      switch(AccessId) {
      case 0: return 40;
      case 1: return 40;
      case 2: return 40;
      case 3: return 40;
      case 4: return 8160;
      case 5: return 8160;
      case 6: return 8160;
      case 7: return 8200;
      case 8: return 8200;
      case 9: return 8200;
      case 10: return 40;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11kleene_starINS0_4ruleINS0_7scannerIPKcNS0_16scanner_policiesINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tESH_EEEESG_SH_E5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl14get_definitionI12skip_grammarNS0_14parser_contextINS0_5nil_tEEENS0_7scannerIPKcNS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyIS3_NS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEERNT_10definitionIT1_EEPKNS0_7grammarISK_T0_EE") {
      switch(AccessId) {
      case 0: return 42563480;
      case 1: return 42563480;
      case 2: return 42563479;
      case 3: return 42563440;
      case 4: return 42563440;
      case 5: return 0;
      case 6: return 42563480;
      case 7: return 42563440;
      case 8: return 42563440;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 42563480;
      case 16: return 42563480;
      case 17: return 42563480;
      case 18: return 42563480;
      case 19: return 0;
      case 20: return 42563480;
      case 21: return 42563480;
      case 22: return 42563480;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost8weak_ptrINS_6spirit4impl14grammar_helperINS1_7grammarI12skip_grammarNS1_14parser_contextINS1_5nil_tEEEEES5_NS1_7scannerIPKcNS1_16scanner_policiesINS1_27no_skipper_iteration_policyINS1_28skip_parser_iteration_policyIS5_NS1_16iteration_policyEEEEENS1_12match_policyENS1_13action_policyEEEEEEEED2Ev") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl14grammar_helperINS0_7grammarI12skip_grammarNS0_14parser_contextINS0_5nil_tEEEEES4_NS0_7scannerIPKcNS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyIS4_NS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEC2ERNS_8weak_ptrISM_EE") {
      switch(AccessId) {
      case 0: return 40;
      case 1: return 40;
      case 2: return 40;
      case 3: return 40;
      case 4: return 40;
      case 5: return 40;
      case 6: return 40;
      case 7: return 40;
      case 8: return 39;
      case 9: return 39;
      case 10: return 39;
      case 11: return 39;
      case 12: return 40;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl14grammar_helperINS0_7grammarI12skip_grammarNS0_14parser_contextINS0_5nil_tEEEEES4_NS0_7scannerIPKcNS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyIS4_NS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEE6defineEPKS8_") {
      switch(AccessId) {
      case 0: return 42563480;
      case 1: return 42563480;
      case 2: return 42563480;
      case 3: return 40;
      case 4: return 40;
      case 5: return 0;
      case 6: return 42563480;
      case 7: return 40;
      case 8: return 40;
      case 9: return 40;
      case 10: return 40;
      case 11: return 40;
      case 12: return 40;
      case 13: return 40;
      case 14: return 40;
      case 15: return 40;
      case 16: return 40;
      case 17: return 40;
      case 18: return 40;
      case 19: return 40;
      case 20: return 40;
      case 21: return 40;
      case 22: return 40;
      case 23: return 40;
      case 24: return 40;
      case 25: return 0;
      case 26: return 0;
      case 27: return 40;
      case 28: return 40;
      case 29: return 40;
      case 30: return 40;
      case 31: return 40;
      case 32: return 40;
      case 33: return 40;
      case 34: return 40;
      case 35: return 40;
      case 36: return 40;
      case 37: return 40;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl14grammar_helperINS0_7grammarI12skip_grammarNS0_14parser_contextINS0_5nil_tEEEEES4_NS0_7scannerIPKcNS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyIS4_NS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEE8undefineEPS8_") {
      switch(AccessId) {
      case 0: return 40;
      case 1: return 40;
      case 2: return 40;
      case 3: return 40;
      case 4: return 40;
      case 5: return 40;
      case 6: return 40;
      case 7: return 40;
      case 8: return 40;
      case 9: return 40;
      case 10: return 40;
      case 11: return 40;
      case 12: return 40;
      case 13: return 40;
      case 14: return 40;
      case 15: return 40;
      case 16: return 40;
      case 17: return 40;
      case 18: return 40;
      case 19: return 0;
      case 20: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6spirit4impl14grammar_helperINS0_7grammarI12skip_grammarNS0_14parser_contextINS0_5nil_tEEEEES4_NS0_7scannerIPKcNS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyIS4_NS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEED2Ev") {
      switch(AccessId) {
      case 0: return 40;
      case 1: return 40;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 40;
      case 11: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6detail12shared_countC2IPNS_6spirit4impl14grammar_helperINS3_7grammarI12skip_grammarNS3_14parser_contextINS3_5nil_tEEEEES7_NS3_7scannerIPKcNS3_16scanner_policiesINS3_27no_skipper_iteration_policyINS3_28skip_parser_iteration_policyIS7_NS3_16iteration_policyEEEEENS3_12match_policyENS3_13action_policyEEEEEEENS_15checked_deleterISP_EEEET_T0_") {
      switch(AccessId) {
      case 0: return 40;
      case 1: return 40;
      case 2: return 40;
      case 3: return 40;
      case 4: return 40;
      case 5: return 40;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6detail20sp_counted_base_implIPNS_6spirit4impl14grammar_helperINS2_7grammarI12skip_grammarNS2_14parser_contextINS2_5nil_tEEEEES6_NS2_7scannerIPKcNS2_16scanner_policiesINS2_27no_skipper_iteration_policyINS2_28skip_parser_iteration_policyIS6_NS2_16iteration_policyEEEEENS2_12match_policyENS2_13action_policyEEEEEEENS_15checked_deleterISO_EEED0Ev") {
      switch(AccessId) {
      case 0: return 40;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6detail20sp_counted_base_implIPNS_6spirit4impl14grammar_helperINS2_7grammarI12skip_grammarNS2_14parser_contextINS2_5nil_tEEEEES6_NS2_7scannerIPKcNS2_16scanner_policiesINS2_27no_skipper_iteration_policyINS2_28skip_parser_iteration_policyIS6_NS2_16iteration_policyEEEEENS2_12match_policyENS2_13action_policyEEEEEEENS_15checked_deleterISO_EEE7disposeEv") {
      switch(AccessId) {
      case 0: return 40;
      case 1: return 40;
      case 2: return 40;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN5boost6detail20sp_counted_base_implIPNS_6spirit4impl14grammar_helperINS2_7grammarI12skip_grammarNS2_14parser_contextINS2_5nil_tEEEEES6_NS2_7scannerIPKcNS2_16scanner_policiesINS2_27no_skipper_iteration_policyINS2_28skip_parser_iteration_policyIS6_NS2_16iteration_policyEEEEENS2_12match_policyENS2_13action_policyEEEEEEENS_15checked_deleterISO_EEE11get_deleterERKSt9type_info") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt6vectorIPN12skip_grammar10definitionIN5boost6spirit7scannerIPKcNS3_16scanner_policiesINS3_27no_skipper_iteration_policyINS3_28skip_parser_iteration_policyIS0_NS3_16iteration_policyEEEEENS3_12match_policyENS3_13action_policyEEEEEEESaISI_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPSI_SK_EEmRKSI_") {
      switch(AccessId) {
      case 0: return 40;
      case 1: return 40;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      case 62: return 0;
      case 63: return 0;
      case 64: return 0;
      case 65: return 40;
      case 66: return 40;
      case 67: return 0;
      case 68: return 0;
      case 69: return 0;
      case 70: return 0;
      case 71: return 0;
      case 72: return 0;
      case 73: return 0;
      case 74: return 0;
      case 75: return 0;
      case 76: return 0;
      case 77: return 0;
      case 78: return 0;
      case 79: return 0;
      case 80: return 0;
      case 81: return 0;
      case 82: return 0;
      case 83: return 40;
      case 84: return 40;
      case 85: return 0;
      case 86: return 40;
      case 87: return 40;
      case 88: return 40;
      case 89: return 40;
      case 90: return 40;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS3_INS0_12space_parserENS0_8sequenceINS5_INS0_6strlitIPKcEENS0_11kleene_starINS0_10differenceINS0_14anychar_parserENS0_5chlitIcEEEEEEEESE_EEEENS5_INS5_IS9_NSA_INSB_ISC_S9_EEEEEES9_EEEESI_EESI_EENS0_7scannerIS8_NS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE16do_parse_virtualERKS12_") {
      switch(AccessId) {
      case 0: return 42563480;
      case 1: return 42563480;
      case 2: return 35564120;
      case 3: return 35564120;
      case 4: return 35564120;
      case 5: return 35564120;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit4impl15concrete_parserINS0_11alternativeINS3_INS3_INS3_INS0_12space_parserENS0_8sequenceINS5_INS0_6strlitIPKcEENS0_11kleene_starINS0_10differenceINS0_14anychar_parserENS0_5chlitIcEEEEEEEESE_EEEENS5_INS5_IS9_NSA_INSB_ISC_S9_EEEEEES9_EEEESI_EESI_EENS0_7scannerIS8_NS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEENS0_5nil_tEE5cloneEv") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS1_INS0_6strlitIPKcEENS0_11kleene_starINS0_10differenceINS0_14anychar_parserENS0_5chlitIcEEEEEEEESA_E5parseINS0_7scannerIS4_NS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISE_T_E4typeERKST_") {
      switch(AccessId) {
      case 0: return 106692360;
      case 1: return 106692360;
      case 2: return 106692360;
      case 3: return 106692360;
      case 4: return 106692360;
      case 5: return 106687200;
      case 6: return 106687200;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit11alternativeINS1_INS0_12space_parserENS0_8sequenceINS3_INS0_6strlitIPKcEENS0_11kleene_starINS0_10differenceINS0_14anychar_parserENS0_5chlitIcEEEEEEEESC_EEEENS3_INS3_IS7_NS8_INS9_ISA_S7_EEEEEES7_EEE5parseINS0_7scannerIS6_NS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISM_T_E4typeERKS11_") {
      switch(AccessId) {
      case 0: return 42563480;
      case 1: return 42563480;
      case 2: return 42563480;
      case 3: return 42561760;
      case 4: return 6999360;
      case 5: return 35564120;
      case 6: return 35564120;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK5boost6spirit8sequenceINS0_6strlitIPKcEENS0_11kleene_starINS0_10differenceINS0_14anychar_parserES5_EEEEE5parseINS0_7scannerIS4_NS0_16scanner_policiesINS0_27no_skipper_iteration_policyINS0_28skip_parser_iteration_policyI12skip_grammarNS0_16iteration_policyEEEEENS0_12match_policyENS0_13action_policyEEEEEEENS0_13parser_resultISB_T_E4typeERKSQ_") {
      switch(AccessId) {
      case 0: return 35564120;
      case 1: return 35564120;
      case 2: return 35564120;
      case 3: return 35564120;
      case 4: return 35564120;
      case 5: return 35562400;
      case 6: return 35562400;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_GLOBAL__sub_I_spirit.cpp") {
      switch(AccessId) {
      case 0: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/flops-2.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/flops-8.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/evalloop.c") {
    if (FunctionName == "execute") {
      switch(AccessId) {
      case 0: return 204700000;
      case 1: return 204700000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "eval") {
      switch(AccessId) {
      case 0: return 100000;
      case 1: return 204700000;
      case 2: return 204700000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 255;
      case 1: return 255;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/matmul_f64_4x4.c") {
    if (FunctionName == "wrap_mul4") {
      switch(AccessId) {
      case 0: return 50000000;
      case 1: return 50000000;
      case 2: return 50000000;
      case 3: return 50000000;
      case 4: return 50000000;
      case 5: return 50000000;
      case 6: return 50000000;
      case 7: return 50000000;
      case 8: return 50000000;
      case 9: return 50000000;
      case 10: return 50000000;
      case 11: return 50000000;
      case 12: return 50000000;
      case 13: return 50000000;
      case 14: return 50000000;
      case 15: return 50000000;
      case 16: return 50000000;
      case 17: return 50000000;
      case 18: return 50000000;
      case 19: return 50000000;
      case 20: return 50000000;
      case 21: return 50000000;
      case 22: return 50000000;
      case 23: return 50000000;
      case 24: return 50000000;
      case 25: return 50000000;
      case 26: return 50000000;
      case 27: return 50000000;
      case 28: return 50000000;
      case 29: return 50000000;
      case 30: return 50000000;
      case 31: return 50000000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/salsa20.c") {
    if (FunctionName == "alsa20") {
      switch(AccessId) {
      case 0: return 33619969;
      case 1: return 33619969;
      case 2: return 33619969;
      case 3: return 33619969;
      case 4: return 33619969;
      case 5: return 33619969;
      case 6: return 33619969;
      case 7: return 33619969;
      case 8: return 33619969;
      case 9: return 33619969;
      case 10: return 33619969;
      case 11: return 33619969;
      case 12: return 33619969;
      case 13: return 33619969;
      case 14: return 33619969;
      case 15: return 33619969;
      case 16: return 33619969;
      case 17: return 33619969;
      case 18: return 33619969;
      case 19: return 33619969;
      case 20: return 33619969;
      case 21: return 33619969;
      case 22: return 33619969;
      case 23: return 33619969;
      case 24: return 33619969;
      case 25: return 33619969;
      case 26: return 33619969;
      case 27: return 33619969;
      case 28: return 33619969;
      case 29: return 33619969;
      case 30: return 33619969;
      case 31: return 33619969;
      case 32: return 33619969;
      case 33: return 33619969;
      case 34: return 33619969;
      case 35: return 33619969;
      case 36: return 33619969;
      case 37: return 33619969;
      case 38: return 33619969;
      case 39: return 33619969;
      case 40: return 33619969;
      case 41: return 33619969;
      case 42: return 33619969;
      case 43: return 33619969;
      case 44: return 33619969;
      case 45: return 33619969;
      case 46: return 33619969;
      case 47: return 33619969;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "alsa") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 33619969;
      case 6: return 33619969;
      case 7: return 33619969;
      case 8: return 537919489;
      case 9: return 537919489;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/flops-5.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/perlin.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 16;
      case 1: return 16;
      case 2: return 16;
      case 3: return 16;
      case 4: return 16;
      case 5: return 16;
      case 6: return 16;
      case 7: return 16;
      case 8: return 16;
      case 9: return 16;
      case 10: return 16;
      case 11: return 16;
      case 12: return 282706;
      case 13: return 282706;
      case 14: return 42688606;
      case 15: return 42688606;
      case 16: return 42688606;
      case 17: return 42688606;
      case 18: return 42688606;
      case 19: return 42688606;
      case 20: return 42688606;
      case 21: return 42688606;
      case 22: return 42688606;
      case 23: return 42688606;
      case 24: return 42688606;
      case 25: return 42688606;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/ffbench.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1024;
      case 4: return 1024;
      case 5: return 1024;
      case 6: return 1024;
      case 7: return 3840;
      case 8: return 8192;
      case 9: return 8192;
      case 10: return 8192;
      case 11: return 8192;
      case 12: return 4096;
      case 13: return 0;
      case 14: return 61440;
      case 15: return 0;
      case 16: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "fourn") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 252;
      case 3: return 252;
      case 4: return 7741440;
      case 5: return 7741440;
      case 6: return 7741440;
      case 7: return 7741440;
      case 8: return 7741440;
      case 9: return 7741440;
      case 10: return 7741440;
      case 11: return 7741440;
      case 12: return 66060288;
      case 13: return 66060288;
      case 14: return 66060288;
      case 15: return 66060288;
      case 16: return 66060288;
      case 17: return 66060288;
      case 18: return 66060288;
      case 19: return 66060288;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/pi.c") {
    if (FunctionName == "myadd") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/himenobmtxpa.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 4096;
      case 15: return 126976;
      case 16: return 12288;
      case 17: return 4096;
      case 18: return 126976;
      case 19: return 12288;
      case 20: return 2048;
      case 21: return 2048;
      case 22: return 2048;
      case 23: return 2048;
      case 24: return 4096;
      case 25: return 126976;
      case 26: return 12288;
      case 27: return 4096;
      case 28: return 126976;
      case 29: return 12288;
      case 30: return 4096;
      case 31: return 126976;
      case 32: return 12288;
      case 33: return 4096;
      case 34: return 126976;
      case 35: return 12288;
      case 36: return 2048;
      case 37: return 2048;
      case 38: return 2048;
      case 39: return 2048;
      case 40: return 2048;
      case 41: return 2048;
      case 42: return 4096;
      case 43: return 126976;
      case 44: return 12288;
      case 45: return 4096;
      case 46: return 126976;
      case 47: return 12288;
      case 48: return 4096;
      case 49: return 126976;
      case 50: return 12288;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "newMat") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "mat_set_init") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "mat_set") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "jacobi") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 246016;
      case 4: return 246016;
      case 5: return 246016;
      case 6: return 246016;
      case 7: return 246016;
      case 8: return 246016;
      case 9: return 246016;
      case 10: return 246016;
      case 11: return 246016;
      case 12: return 246016;
      case 13: return 246016;
      case 14: return 246016;
      case 15: return 246016;
      case 16: return 246016;
      case 17: return 246016;
      case 18: return 246016;
      case 19: return 246016;
      case 20: return 246016;
      case 21: return 246016;
      case 22: return 246016;
      case 23: return 246016;
      case 24: return 246016;
      case 25: return 30998016;
      case 26: return 30998016;
      case 27: return 30998016;
      case 28: return 30998016;
      case 29: return 30998016;
      case 30: return 30998016;
      case 31: return 30998016;
      case 32: return 30998016;
      case 33: return 30998016;
      case 34: return 30998016;
      case 35: return 30998016;
      case 36: return 30998016;
      case 37: return 30998016;
      case 38: return 30998016;
      case 39: return 30998016;
      case 40: return 30998016;
      case 41: return 30998016;
      case 42: return 30998016;
      case 43: return 30998016;
      case 44: return 30998016;
      case 45: return 30998016;
      case 46: return 30998016;
      case 47: return 30998016;
      case 48: return 30998016;
      case 49: return 30998016;
      case 50: return 30998016;
      case 51: return 30998016;
      case 52: return 30998016;
      case 53: return 30998016;
      case 54: return 30998016;
      case 55: return 30998016;
      case 56: return 30998016;
      case 57: return 30998016;
      case 58: return 492032;
      case 59: return 492032;
      case 60: return 3690240;
      case 61: return 3690240;
      case 62: return 3690240;
      case 63: return 3690240;
      case 64: return 246016;
      case 65: return 246016;
      case 66: return 246016;
      case 67: return 246016;
      case 68: return 246016;
      case 69: return 246016;
      case 70: return 246016;
      case 71: return 246016;
      case 72: return 3968;
      case 73: return 3968;
      case 74: return 3968;
      case 75: return 3968;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "clearMat") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "et_param") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "econd") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/dt.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 2048;
      case 1: return 2048;
      case 2: return 2048;
      case 3: return 2048;
      case 4: return 1;
      case 5: return 67108864;
      case 6: return 67108864;
      case 7: return 67108864;
      case 8: return 67108864;
      case 9: return 67108864;
      case 10: return 67108864;
      case 11: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/mandel-2.c") {
    if (FunctionName == "loop") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 156841345;
      case 1: return 6084;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/flops.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 15;
      case 21: return 15;
      case 22: return 15;
      case 23: return 15;
      case 24: return 15;
      case 25: return 15;
      case 26: return 15;
      case 27: return 15;
      case 28: return 15;
      case 29: return 15;
      case 30: return 15;
      case 31: return 15;
      case 32: return 15;
      case 33: return 15;
      case 34: return 15;
      case 35: return 15;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      case 58: return 1;
      case 59: return 1;
      case 60: return 1;
      case 61: return 1;
      case 62: return 1;
      case 63: return 1;
      case 64: return 1;
      case 65: return 1;
      case 66: return 1;
      case 67: return 1;
      case 68: return 1;
      case 69: return 1;
      case 70: return 1;
      case 71: return 1;
      case 72: return 1;
      case 73: return 1;
      case 74: return 1;
      case 75: return 1;
      case 76: return 1;
      case 77: return 1;
      case 78: return 1;
      case 79: return 1;
      case 80: return 1;
      case 81: return 1;
      case 82: return 1;
      case 83: return 1;
      case 84: return 1;
      case 85: return 1;
      case 86: return 1;
      case 87: return 1;
      case 88: return 1;
      case 89: return 1;
      case 90: return 1;
      case 91: return 1;
      case 92: return 1;
      case 93: return 1;
      case 94: return 1;
      case 95: return 1;
      case 96: return 1;
      case 97: return 1;
      case 98: return 1;
      case 99: return 1;
      case 100: return 1;
      case 101: return 1;
      case 102: return 1;
      case 103: return 1;
      case 104: return 1;
      case 105: return 1;
      case 106: return 1;
      case 107: return 1;
      case 108: return 1;
      case 109: return 1;
      case 110: return 1;
      case 111: return 1;
      case 112: return 1;
      case 113: return 1;
      case 114: return 1;
      case 115: return 1;
      case 116: return 1;
      case 117: return 1;
      case 118: return 1;
      case 119: return 1;
      case 120: return 1;
      case 121: return 1;
      case 122: return 1;
      case 123: return 1;
      case 124: return 1;
      case 125: return 1;
      case 126: return 1;
      case 127: return 1;
      case 128: return 1;
      case 129: return 1;
      case 130: return 1;
      case 131: return 1;
      case 132: return 1;
      case 133: return 1;
      case 134: return 1;
      case 135: return 1;
      case 136: return 1;
      case 137: return 1;
      case 138: return 1;
      case 139: return 1;
      case 140: return 1;
      case 141: return 1;
      case 142: return 1;
      case 143: return 1;
      case 144: return 1;
      case 145: return 1;
      case 146: return 1;
      case 147: return 1;
      case 148: return 1;
      case 149: return 1;
      case 150: return 1;
      case 151: return 1;
      case 152: return 1;
      case 153: return 1;
      case 154: return 1;
      case 155: return 1;
      case 156: return 1;
      case 157: return 1;
      case 158: return 1;
      case 159: return 1;
      case 160: return 1;
      case 161: return 1;
      case 162: return 1;
      case 163: return 1;
      case 164: return 1;
      case 165: return 1;
      case 166: return 1;
      case 167: return 1;
      case 168: return 1;
      case 169: return 1;
      case 170: return 1;
      case 171: return 1;
      case 172: return 1;
      case 173: return 1;
      case 174: return 1;
      case 175: return 1;
      case 176: return 1;
      case 177: return 1;
      case 178: return 1;
      case 179: return 1;
      case 180: return 1;
      case 181: return 1;
      case 182: return 1;
      case 183: return 1;
      case 184: return 1;
      case 185: return 1;
      case 186: return 1;
      case 187: return 1;
      case 188: return 1;
      case 189: return 1;
      case 190: return 1;
      case 191: return 1;
      case 192: return 1;
      case 193: return 1;
      case 194: return 1;
      case 195: return 1;
      case 196: return 1;
      case 197: return 1;
      case 198: return 1;
      case 199: return 1;
      case 200: return 1;
      case 201: return 1;
      case 202: return 1;
      case 203: return 1;
      case 204: return 1;
      case 205: return 1;
      case 206: return 1;
      case 207: return 1;
      case 208: return 1;
      case 209: return 1;
      case 210: return 1;
      case 211: return 1;
      case 212: return 1;
      case 213: return 1;
      case 214: return 1;
      case 215: return 1;
      case 216: return 1;
      case 217: return 1;
      case 218: return 1;
      case 219: return 1;
      case 220: return 1;
      case 221: return 1;
      case 222: return 1;
      case 223: return 1;
      case 224: return 1;
      case 225: return 1;
      case 226: return 1;
      case 227: return 1;
      case 228: return 1;
      case 229: return 1;
      case 230: return 1;
      case 231: return 1;
      case 232: return 1;
      case 233: return 1;
      case 234: return 1;
      case 235: return 1;
      case 236: return 1;
      case 237: return 1;
      case 238: return 1;
      case 239: return 1;
      case 240: return 1;
      case 241: return 1;
      case 242: return 1;
      case 243: return 1;
      case 244: return 1;
      case 245: return 1;
      case 246: return 1;
      case 247: return 1;
      case 248: return 1;
      case 249: return 1;
      case 250: return 1;
      case 251: return 1;
      case 252: return 1;
      case 253: return 1;
      case 254: return 1;
      case 255: return 1;
      case 256: return 1;
      case 257: return 1;
      case 258: return 1;
      case 259: return 1;
      case 260: return 1;
      case 261: return 1;
      case 262: return 1;
      case 263: return 1;
      case 264: return 1;
      case 265: return 1;
      case 266: return 1;
      case 267: return 1;
      case 268: return 1;
      case 269: return 1;
      case 270: return 1;
      case 271: return 1;
      case 272: return 1;
      case 273: return 1;
      case 274: return 1;
      case 275: return 1;
      case 276: return 1;
      case 277: return 1;
      case 278: return 1;
      case 279: return 1;
      case 280: return 1;
      case 281: return 1;
      case 282: return 1;
      case 283: return 1;
      case 284: return 1;
      case 285: return 1;
      case 286: return 1;
      case 287: return 1;
      case 288: return 1;
      case 289: return 1;
      case 290: return 1;
      case 291: return 1;
      case 292: return 1;
      case 293: return 1;
      case 294: return 1;
      case 295: return 1;
      case 296: return 1;
      case 297: return 1;
      case 298: return 1;
      case 299: return 1;
      case 300: return 1;
      case 301: return 1;
      case 302: return 1;
      case 303: return 1;
      case 304: return 1;
      case 305: return 1;
      case 306: return 1;
      case 307: return 1;
      case 308: return 1;
      case 309: return 1;
      case 310: return 1;
      case 311: return 1;
      case 312: return 1;
      case 313: return 1;
      case 314: return 1;
      case 315: return 1;
      case 316: return 1;
      case 317: return 1;
      case 318: return 1;
      case 319: return 1;
      case 320: return 1;
      case 321: return 1;
      case 322: return 1;
      case 323: return 1;
      case 324: return 1;
      case 325: return 1;
      case 326: return 1;
      case 327: return 1;
      case 328: return 1;
      case 329: return 1;
      case 330: return 1;
      case 331: return 1;
      case 332: return 1;
      case 333: return 1;
      case 334: return 1;
      case 335: return 1;
      case 336: return 1;
      case 337: return 1;
      case 338: return 1;
      case 339: return 1;
      case 340: return 1;
      case 341: return 1;
      case 342: return 1;
      case 343: return 1;
      case 344: return 1;
      case 345: return 1;
      case 346: return 1;
      case 347: return 1;
      case 348: return 1;
      case 349: return 1;
      case 350: return 1;
      case 351: return 1;
      case 352: return 1;
      case 353: return 1;
      case 354: return 1;
      case 355: return 1;
      case 356: return 1;
      case 357: return 1;
      case 358: return 1;
      case 359: return 1;
      case 360: return 1;
      case 361: return 1;
      case 362: return 1;
      case 363: return 1;
      case 364: return 1;
      case 365: return 1;
      case 366: return 1;
      case 367: return 1;
      case 368: return 1;
      case 369: return 1;
      case 370: return 1;
      case 371: return 1;
      case 372: return 1;
      case 373: return 1;
      case 374: return 1;
      case 375: return 1;
      case 376: return 1;
      case 377: return 1;
      case 378: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "dtime") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/richards_benchmark.c") {
    if (FunctionName == "createtask") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "pkt") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "trace") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "chedule") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 106674389;
      case 2: return 23263898;
      case 3: return 23263898;
      case 4: return 23263898;
      case 5: return 23263898;
      case 6: return 65833346;
      case 7: return 65833346;
      case 8: return 65833346;
      case 9: return 65833346;
      case 10: return 65833346;
      case 11: return 65833346;
      case 12: return 65833346;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 65833346;
      case 18: return 65833346;
      case 19: return 65833346;
      case 20: return 65833346;
      case 21: return 65833346;
      case 22: return 65833346;
      case 23: return 40841043;
      case 24: return 106674389;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "Wait") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "holdself") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "findtcb") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "release") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "qpkt") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "append") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "idlefn") {
      switch(AccessId) {
      case 0: return 10000000;
      case 1: return 10000000;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 9999999;
      case 9: return 4999918;
      case 10: return 4999918;
      case 11: return 4999918;
      case 12: return 4999918;
      case 13: return 4999918;
      case 14: return 4999918;
      case 15: return 4999918;
      case 16: return 5000081;
      case 17: return 5000081;
      case 18: return 5000081;
      case 19: return 5000081;
      case 20: return 5000081;
      case 21: return 5000081;
      case 22: return 5000081;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "workfn") {
      switch(AccessId) {
      case 0: return 2326391;
      case 1: return 2326391;
      case 2: return 2326391;
      case 3: return 2326391;
      case 4: return 2326391;
      case 5: return 2326391;
      case 6: return 2326391;
      case 7: return 2326391;
      case 8: return 2326391;
      case 9: return 2326391;
      case 10: return 2326391;
      case 11: return 2326391;
      case 12: return 2326391;
      case 13: return 2326391;
      case 14: return 2326391;
      case 15: return 2326391;
      case 16: return 2326391;
      case 17: return 2326391;
      case 18: return 2326391;
      case 19: return 2326391;
      case 20: return 2326391;
      case 21: return 2326391;
      case 22: return 2326391;
      case 23: return 2326391;
      case 24: return 2326391;
      case 25: return 2326391;
      case 26: return 2326391;
      case 27: return 2326391;
      case 28: return 2326391;
      case 29: return 2326391;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "handlerfn") {
      switch(AccessId) {
      case 0: return 11631951;
      case 1: return 11631951;
      case 2: return 13624893;
      case 3: return 11631951;
      case 4: return 23263900;
      case 5: return 20282682;
      case 6: return 2326389;
      case 7: return 2326389;
      case 8: return 17956293;
      case 9: return 9305560;
      case 10: return 9305560;
      case 11: return 9305560;
      case 12: return 9305560;
      case 13: return 9305560;
      case 14: return 11631949;
      case 15: return 11631949;
      case 16: return 11631949;
      case 17: return 11631949;
      case 18: return 11631949;
      case 19: return 11631949;
      case 20: return 11631949;
      case 21: return 11631949;
      case 22: return 3154854;
      case 23: return 3154854;
      case 24: return 3154854;
      case 25: return 3154854;
      case 26: return 3154854;
      case 27: return 3154854;
      case 28: return 8477095;
      case 29: return 16954190;
      case 30: return 8477095;
      case 31: return 8477095;
      case 32: return 11631951;
      case 33: return 11631951;
      case 34: return 11631951;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "devfn") {
      switch(AccessId) {
      case 0: return 18611108;
      case 1: return 9305554;
      case 2: return 9305554;
      case 3: return 9305554;
      case 4: return 9305554;
      case 5: return 9305554;
      case 6: return 9305554;
      case 7: return 9305554;
      case 8: return 9305554;
      case 9: return 9305554;
      case 10: return 9305554;
      case 11: return 9305554;
      case 12: return 9305554;
      case 13: return 9305554;
      case 14: return 9305554;
      case 15: return 9305554;
      case 16: return 9305554;
      case 17: return 9305554;
      case 18: return 9305554;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 9305556;
      case 24: return 9305556;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 9305556;
      case 30: return 9305556;
      case 31: return 9305556;
      case 32: return 9305556;
      case 33: return 9305556;
      case 34: return 9305556;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      case 58: return 1;
      case 59: return 1;
      case 60: return 1;
      case 61: return 1;
      case 62: return 1;
      case 63: return 1;
      case 64: return 1;
      case 65: return 1;
      case 66: return 1;
      case 67: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/whetstone.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 3200000;
      case 45: return 3200000;
      case 46: return 3200000;
      case 47: return 3200000;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      case 56: return 0;
      case 57: return 0;
      case 58: return 1;
      case 59: return 1;
      case 60: return 1;
      case 61: return 1;
      case 62: return 1;
      case 63: return 1;
      case 64: return 1;
      case 65: return 1;
      case 66: return 1;
      case 67: return 1;
      case 68: return 1;
      case 69: return 1;
      case 70: return 1;
      case 71: return 9300000;
      case 72: return 0;
      case 73: return 0;
      case 74: return 0;
      case 75: return 1;
      case 76: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "PA") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "P3") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "P0") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/flops-3.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/flops-1.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/fbench.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1000000;
      case 12: return 2000000;
      case 13: return 2000000;
      case 14: return 2000000;
      case 15: return 2000000;
      case 16: return 2000000;
      case 17: return 2000000;
      case 18: return 2000000;
      case 19: return 1000000;
      case 20: return 1000000;
      case 21: return 1000000;
      case 22: return 1000000;
      case 23: return 1000000;
      case 24: return 1000000;
      case 25: return 1000000;
      case 26: return 1000000;
      case 27: return 1000000;
      case 28: return 1000000;
      case 29: return 1000000;
      case 30: return 1000000;
      case 31: return 1000000;
      case 32: return 1000000;
      case 33: return 1000000;
      case 34: return 1000000;
      case 35: return 1000000;
      case 36: return 1000000;
      case 37: return 1000000;
      case 38: return 1000000;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      case 49: return 8;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "trace_line") {
      switch(AccessId) {
      case 0: return 4000000;
      case 1: return 4000000;
      case 2: return 4000000;
      case 3: return 4000000;
      case 4: return 16000000;
      case 5: return 16000000;
      case 6: return 16000000;
      case 7: return 16000000;
      case 8: return 8000000;
      case 9: return 8000000;
      case 10: return 8000000;
      case 11: return 8000000;
      case 12: return 8000000;
      case 13: return 8000000;
      case 14: return 16000000;
      case 15: return 1000000;
      case 16: return 1000000;
      case 17: return 3000000;
      case 18: return 4000000;
      case 19: return 1000000;
      case 20: return 3000000;
      case 21: return 4000000;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 3000000;
      case 26: return 3000000;
      case 27: return 9000000;
      case 28: return 12000000;
      case 29: return 12000000;
      case 30: return 12000000;
      case 31: return 12000000;
      case 32: return 12000000;
      case 33: return 12000000;
      case 34: return 12000000;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 16000000;
      case 43: return 16000000;
      case 44: return 16000000;
      case 45: return 12000000;
      case 46: return 12000000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/fp-convert.c") {
    if (FunctionName == "loop") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 64000000;
      case 1: return 64000000;
      case 2: return 64000000;
      case 3: return 64000000;
      case 4: return 64000000;
      case 5: return 64000000;
      case 6: return 64000000;
      case 7: return 64000000;
      case 8: return 512000000;
      case 9: return 512000000;
      case 10: return 512000000;
      case 11: return 512000000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/ReedSolomon.c") {
    if (FunctionName == "rsdec_204") {
      switch(AccessId) {
      case 0: return 150000;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 150000;
      case 19: return 150000;
      case 20: return 150000;
      case 21: return 150000;
      case 22: return 150000;
      case 23: return 150000;
      case 24: return 150000;
      case 25: return 150000;
      case 26: return 150000;
      case 27: return 150000;
      case 28: return 150000;
      case 29: return 150000;
      case 30: return 150000;
      case 31: return 150000;
      case 32: return 150000;
      case 33: return 150000;
      case 34: return 150000;
      case 35: return 150000;
      case 36: return 150000;
      case 37: return 150000;
      case 38: return 150000;
      case 39: return 150000;
      case 40: return 150000;
      case 41: return 150000;
      case 42: return 150000;
      case 43: return 150000;
      case 44: return 150000;
      case 45: return 150000;
      case 46: return 150000;
      case 47: return 150000;
      case 48: return 150000;
      case 49: return 150000;
      case 50: return 150000;
      case 51: return 150000;
      case 52: return 150000;
      case 53: return 150000;
      case 54: return 150000;
      case 55: return 150000;
      case 56: return 150000;
      case 57: return 150000;
      case 58: return 150000;
      case 59: return 150000;
      case 60: return 150000;
      case 61: return 150000;
      case 62: return 150000;
      case 63: return 150000;
      case 64: return 150000;
      case 65: return 150000;
      case 66: return 150000;
      case 67: return 150000;
      case 68: return 150000;
      case 69: return 150000;
      case 70: return 150000;
      case 71: return 150000;
      case 72: return 150000;
      case 73: return 150000;
      case 74: return 150000;
      case 75: return 150000;
      case 76: return 150000;
      case 77: return 150000;
      case 78: return 150000;
      case 79: return 150000;
      case 80: return 150000;
      case 81: return 150000;
      case 82: return 150000;
      case 83: return 150000;
      case 84: return 150000;
      case 85: return 150000;
      case 86: return 150000;
      case 87: return 150000;
      case 88: return 150000;
      case 89: return 150000;
      case 90: return 150000;
      case 91: return 150000;
      case 92: return 150000;
      case 93: return 150000;
      case 94: return 150000;
      case 95: return 150000;
      case 96: return 150000;
      case 97: return 150000;
      case 98: return 150000;
      case 99: return 150000;
      case 100: return 150000;
      case 101: return 150000;
      case 102: return 150000;
      case 103: return 150000;
      case 104: return 150000;
      case 105: return 150000;
      case 106: return 150000;
      case 107: return 150000;
      case 108: return 150000;
      case 109: return 150000;
      case 110: return 150000;
      case 111: return 150000;
      case 112: return 150000;
      case 113: return 150000;
      case 114: return 150000;
      case 115: return 150000;
      case 116: return 150000;
      case 117: return 150000;
      case 118: return 150000;
      case 119: return 150000;
      case 120: return 150000;
      case 121: return 150000;
      case 122: return 150000;
      case 123: return 150000;
      case 124: return 150000;
      case 125: return 150000;
      case 126: return 7650000;
      case 127: return 7650000;
      case 128: return 7650000;
      case 129: return 7650000;
      case 130: return 7650000;
      case 131: return 7650000;
      case 132: return 7650000;
      case 133: return 7650000;
      case 134: return 7650000;
      case 135: return 7650000;
      case 136: return 7650000;
      case 137: return 7650000;
      case 138: return 7650000;
      case 139: return 7650000;
      case 140: return 7650000;
      case 141: return 2400000;
      case 142: return 612000000;
      case 143: return 487681600;
      case 144: return 487681600;
      case 145: return 2400000;
      case 146: return 2400000;
      case 147: return 148787;
      case 148: return 148787;
      case 149: return 148787;
      case 150: return 148787;
      case 151: return 148787;
      case 152: return 148787;
      case 153: return 148787;
      case 154: return 148787;
      case 155: return 148787;
      case 156: return 148787;
      case 157: return 148787;
      case 158: return 148787;
      case 159: return 148787;
      case 160: return 148787;
      case 161: return 148787;
      case 162: return 75338;
      case 163: return 138026;
      case 164: return 138026;
      case 165: return 138026;
      case 166: return 138026;
      case 167: return 138026;
      case 168: return 138026;
      case 169: return 138026;
      case 170: return 138026;
      case 171: return 2313599;
      case 172: return 17083265;
      case 173: return 17024934;
      case 174: return 17024934;
      case 175: return 2305252;
      case 176: return 2305252;
      case 177: return 2305252;
      case 178: return 10262864;
      case 179: return 10235747;
      case 180: return 10235747;
      case 181: return 10235747;
      case 182: return 5136793;
      case 183: return 5136793;
      case 184: return 5136793;
      case 185: return 5136793;
      case 186: return 5136793;
      case 187: return 5136793;
      case 188: return 5136793;
      case 189: return 5136793;
      case 190: return 5136793;
      case 191: return 5136793;
      case 192: return 33348;
      case 193: return 33348;
      case 194: return 33348;
      case 195: return 33348;
      case 196: return 1153313;
      case 197: return 1153313;
      case 198: return 1153313;
      case 199: return 1153313;
      case 200: return 1153313;
      case 201: return 2380590;
      case 202: return 2231805;
      case 203: return 2223064;
      case 204: return 2231805;
      case 205: return 601;
      case 206: return 601;
      case 207: return 9355727;
      case 208: return 9319129;
      case 209: return 9287687;
      case 210: return 9287687;
      case 211: return 9287687;
      case 212: return 2231204;
      case 213: return 2231204;
      case 214: return 287049;
      case 215: return 287049;
      case 216: return 287049;
      case 217: return 287049;
      case 218: return 287049;
      case 219: return 287049;
      case 220: return 287049;
      case 221: return 287049;
      case 222: return 287049;
      case 223: return 287049;
      case 224: return 287049;
      case 225: return 287049;
      case 226: return 153170;
      case 227: return 153170;
      case 228: return 153170;
      case 229: return 294035145;
      case 230: return 292878720;
      case 231: return 292878720;
      case 232: return 180068;
      case 233: return 180068;
      case 234: return 43074;
      case 235: return 42899;
      case 236: return 42779;
      case 237: return 175;
      case 238: return 43074;
      case 239: return 100972;
      case 240: return 100566;
      case 241: return 100185;
      case 242: return 100185;
      case 243: return 43074;
      case 244: return 43074;
      case 245: return 33538;
      case 246: return 810560;
      case 247: return 645926;
      case 248: return 810560;
      case 249: return 810560;
      case 250: return 43074;
      case 251: return 245018;
      case 252: return 243901;
      case 253: return 243901;
      case 254: return 43074;
      case 255: return 201944;
      case 256: return 201944;
      case 257: return 201944;
      case 258: return 201944;
      case 259: return 43074;
      case 260: return 43074;
      case 261: return 43074;
      case 262: return 11793835;
      case 263: return 9397860;
      case 264: return 11793835;
      case 265: return 11793835;
      case 266: return 42500;
      case 267: return 33875;
      case 268: return 42500;
      case 269: return 42500;
      case 270: return 103105;
      case 271: return 82159;
      case 272: return 103105;
      case 273: return 103105;
      case 274: return 150000;
      case 275: return 150000;
      case 276: return 150000;
      case 277: return 150000;
      case 278: return 150000;
      case 279: return 150000;
      case 280: return 150000;
      case 281: return 150000;
      case 282: return 150000;
      case 283: return 150000;
      case 284: return 150000;
      case 285: return 150000;
      case 286: return 150000;
      case 287: return 150000;
      case 288: return 150000;
      case 289: return 150000;
      case 290: return 150000;
      case 291: return 150000;
      case 292: return 150000;
      case 293: return 150000;
      case 294: return 150000;
      case 295: return 150000;
      case 296: return 150000;
      case 297: return 150000;
      case 298: return 150000;
      case 299: return 150000;
      case 300: return 150000;
      case 301: return 150000;
      case 302: return 150000;
      case 303: return 150000;
      case 304: return 150000;
      case 305: return 150000;
      case 306: return 150000;
      case 307: return 150000;
      case 308: return 150000;
      case 309: return 150000;
      case 310: return 150000;
      case 311: return 150000;
      case 312: return 150000;
      case 313: return 150000;
      case 314: return 150000;
      case 315: return 150000;
      case 316: return 150000;
      case 317: return 150000;
      case 318: return 150000;
      case 319: return 150000;
      case 320: return 150000;
      case 321: return 150000;
      case 322: return 150000;
      case 323: return 150000;
      case 324: return 150000;
      case 325: return 150000;
      case 326: return 150000;
      case 327: return 150000;
      case 328: return 150000;
      case 329: return 150000;
      case 330: return 150000;
      case 331: return 150000;
      case 332: return 150000;
      case 333: return 150000;
      case 334: return 150000;
      case 335: return 150000;
      case 336: return 150000;
      case 337: return 150000;
      case 338: return 150000;
      case 339: return 150000;
      case 340: return 150000;
      case 341: return 150000;
      case 342: return 150000;
      case 343: return 150000;
      case 344: return 150000;
      case 345: return 150000;
      case 346: return 150000;
      case 347: return 150000;
      case 348: return 150000;
      case 349: return 150000;
      case 350: return 150000;
      case 351: return 150000;
      case 352: return 150000;
      case 353: return 150000;
      case 354: return 150000;
      case 355: return 150000;
      case 356: return 150000;
      case 357: return 150000;
      case 358: return 150000;
      case 359: return 150000;
      case 360: return 150000;
      case 361: return 150000;
      case 362: return 150000;
      case 363: return 150000;
      case 364: return 150000;
      case 365: return 150000;
      case 366: return 150000;
      case 367: return 150000;
      case 368: return 150000;
      case 369: return 150000;
      case 370: return 150000;
      case 371: return 150000;
      case 372: return 150000;
      case 373: return 150000;
      case 374: return 82152;
      case 375: return 103105;
      case 376: return 103105;
      case 377: return 82151;
      case 378: return 103105;
      case 379: return 33860;
      case 380: return 42500;
      case 381: return 42500;
      case 382: return 33875;
      case 383: return 42500;
      case 384: return 645980;
      case 385: return 810560;
      case 386: return 810560;
      case 387: return 645909;
      case 388: return 810560;
      case 389: return 9398166;
      case 390: return 11793835;
      case 391: return 11793835;
      case 392: return 9398187;
      case 393: return 11793835;
      case 394: return 0;
      case 395: return 0;
      case 396: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "rsenc_204") {
      switch(AccessId) {
      case 0: return 150000;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 60;
      case 14: return 123;
      case 15: return 123;
      case 16: return 1;
      case 17: return 1;
      case 18: return 150000;
      case 19: return 150000;
      case 20: return 150000;
      case 21: return 150000;
      case 22: return 150000;
      case 23: return 150000;
      case 24: return 150000;
      case 25: return 150000;
      case 26: return 150000;
      case 27: return 150000;
      case 28: return 150000;
      case 29: return 150000;
      case 30: return 150000;
      case 31: return 150000;
      case 32: return 150000;
      case 33: return 150000;
      case 34: return 150000;
      case 35: return 150000;
      case 36: return 150000;
      case 37: return 150000;
      case 38: return 150000;
      case 39: return 150000;
      case 40: return 150000;
      case 41: return 150000;
      case 42: return 150000;
      case 43: return 150000;
      case 44: return 150000;
      case 45: return 150000;
      case 46: return 150000;
      case 47: return 150000;
      case 48: return 150000;
      case 49: return 150000;
      case 50: return 150000;
      case 51: return 150000;
      case 52: return 150000;
      case 53: return 150000;
      case 54: return 150000;
      case 55: return 150000;
      case 56: return 150000;
      case 57: return 150000;
      case 58: return 150000;
      case 59: return 150000;
      case 60: return 150000;
      case 61: return 150000;
      case 62: return 150000;
      case 63: return 150000;
      case 64: return 150000;
      case 65: return 150000;
      case 66: return 150000;
      case 67: return 150000;
      case 68: return 150000;
      case 69: return 150000;
      case 70: return 150000;
      case 71: return 150000;
      case 72: return 150000;
      case 73: return 150000;
      case 74: return 150000;
      case 75: return 150000;
      case 76: return 150000;
      case 77: return 150000;
      case 78: return 150000;
      case 79: return 150000;
      case 80: return 150000;
      case 81: return 150000;
      case 82: return 150000;
      case 83: return 150000;
      case 84: return 150000;
      case 85: return 150000;
      case 86: return 150000;
      case 87: return 150000;
      case 88: return 150000;
      case 89: return 150000;
      case 90: return 150000;
      case 91: return 150000;
      case 92: return 150000;
      case 93: return 150000;
      case 94: return 150000;
      case 95: return 150000;
      case 96: return 150000;
      case 97: return 150000;
      case 98: return 150000;
      case 99: return 150000;
      case 100: return 150000;
      case 101: return 150000;
      case 102: return 150000;
      case 103: return 150000;
      case 104: return 150000;
      case 105: return 150000;
      case 106: return 150000;
      case 107: return 150000;
      case 108: return 150000;
      case 109: return 150000;
      case 110: return 150000;
      case 111: return 150000;
      case 112: return 150000;
      case 113: return 150000;
      case 114: return 150000;
      case 115: return 150000;
      case 116: return 150000;
      case 117: return 150000;
      case 118: return 150000;
      case 119: return 150000;
      case 120: return 150000;
      case 121: return 150000;
      case 122: return 150000;
      case 123: return 150000;
      case 124: return 150000;
      case 125: return 150000;
      case 126: return 150000;
      case 127: return 150000;
      case 128: return 150000;
      case 129: return 150000;
      case 130: return 150000;
      case 131: return 150000;
      case 132: return 150000;
      case 133: return 150000;
      case 134: return 35850000;
      case 135: return 35850000;
      case 136: return 35709756;
      case 137: return 35709756;
      case 138: return 140244;
      case 139: return 140244;
      case 140: return 140244;
      case 141: return 140244;
      case 142: return 140244;
      case 143: return 140244;
      case 144: return 140244;
      case 145: return 140244;
      case 146: return 140244;
      case 147: return 140244;
      case 148: return 140244;
      case 149: return 140244;
      case 150: return 140244;
      case 151: return 140244;
      case 152: return 140244;
      case 153: return 35709756;
      case 154: return 35709756;
      case 155: return 35709756;
      case 156: return 35709756;
      case 157: return 35709756;
      case 158: return 35709756;
      case 159: return 35709756;
      case 160: return 35709756;
      case 161: return 35709756;
      case 162: return 35709756;
      case 163: return 35709756;
      case 164: return 35709756;
      case 165: return 35709756;
      case 166: return 35709756;
      case 167: return 35709756;
      case 168: return 35709756;
      case 169: return 35709756;
      case 170: return 35709756;
      case 171: return 35709756;
      case 172: return 35709756;
      case 173: return 35709756;
      case 174: return 35709756;
      case 175: return 35709756;
      case 176: return 35709756;
      case 177: return 35709756;
      case 178: return 35709756;
      case 179: return 35709756;
      case 180: return 35709756;
      case 181: return 35709756;
      case 182: return 150000;
      case 183: return 150000;
      case 184: return 150000;
      case 185: return 150000;
      case 186: return 150000;
      case 187: return 150000;
      case 188: return 150000;
      case 189: return 150000;
      case 190: return 150000;
      case 191: return 150000;
      case 192: return 150000;
      case 193: return 150000;
      case 194: return 150000;
      case 195: return 150000;
      case 196: return 150000;
      case 197: return 150000;
      case 198: return 150000;
      case 199: return 150000;
      case 200: return 150000;
      case 201: return 150000;
      case 202: return 150000;
      case 203: return 600000;
      case 204: return 600000;
      case 205: return 450000;
      case 206: return 450000;
      case 207: return 450000;
      case 208: return 450000;
      case 209: return 450000;
      case 210: return 450000;
      case 211: return 450000;
      case 212: return 450000;
      case 213: return 450000;
      case 214: return 450000;
      case 215: return 450000;
      case 216: return 450000;
      case 217: return 450000;
      case 218: return 450000;
      case 219: return 450000;
      case 220: return 450000;
      case 221: return 150000;
      case 222: return 150000;
      case 223: return 150000;
      case 224: return 150000;
      case 225: return 150000;
      case 226: return 150000;
      case 227: return 150000;
      case 228: return 150000;
      case 229: return 150000;
      case 230: return 150000;
      case 231: return 150000;
      case 232: return 150000;
      case 233: return 150000;
      case 234: return 150000;
      case 235: return 150000;
      case 236: return 150000;
      case 237: return 66;
      case 238: return 123;
      case 239: return 123;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 28200000;
      case 1: return 9525784;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "gen_poly") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 15;
      case 3: return 120;
      case 4: return 120;
      case 5: return 120;
      case 6: return 120;
      case 7: return 120;
      case 8: return 15;
      case 9: return 15;
      case 10: return 15;
      case 11: return 15;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      case 58: return 1;
      case 59: return 1;
      case 60: return 1;
      case 61: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/flops-4.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/mandel.c") {
    if (FunctionName == "emit") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "mandel") {
      switch(AccessId) {
      case 0: return 25000000;
      case 1: return 25000000;
      case 2: return 25000000;
      case 3: return 25000000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/flops-7.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/flops-6.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Misc/oourafft.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 64;
      case 3: return 64;
      case 4: return 64;
      case 5: return 64;
      case 6: return 1024;
      case 7: return 1024;
      case 8: return 2048;
      case 9: return 512;
      case 10: return 512;
      case 11: return 256;
      case 12: return 256;
      case 13: return 256;
      case 14: return 256;
      case 15: return 256;
      case 16: return 256;
      case 17: return 256;
      case 18: return 256;
      case 19: return 512;
      case 20: return 512;
      case 21: return 76800000;
      case 22: return 76800000;
      case 23: return 76800000;
      case 24: return 1024;
      case 25: return 1024;
      case 26: return 63;
      case 27: return 63;
      case 28: return 63;
      case 29: return 63;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "get_time") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "makewt") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "putdata") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "cdft") {
      switch(AccessId) {
      case 0: return 150001;
      case 1: return 150001;
      case 2: return 150001;
      case 3: return 150001;
      case 4: return 150001;
      case 5: return 450003;
      case 6: return 450003;
      case 7: return 150001;
      case 8: return 150001;
      case 9: return 150001;
      case 10: return 150001;
      case 11: return 150001;
      case 12: return 150001;
      case 13: return 150001;
      case 14: return 150001;
      case 15: return 2400016;
      case 16: return 18000120;
      case 17: return 18000120;
      case 18: return 18000120;
      case 19: return 18000120;
      case 20: return 18000120;
      case 21: return 18000120;
      case 22: return 18000120;
      case 23: return 18000120;
      case 24: return 18000120;
      case 25: return 18000120;
      case 26: return 18000120;
      case 27: return 18000120;
      case 28: return 18000120;
      case 29: return 18000120;
      case 30: return 18000120;
      case 31: return 18000120;
      case 32: return 18000120;
      case 33: return 18000120;
      case 34: return 18000120;
      case 35: return 18000120;
      case 36: return 18000120;
      case 37: return 18000120;
      case 38: return 18000120;
      case 39: return 18000120;
      case 40: return 18000120;
      case 41: return 18000120;
      case 42: return 18000120;
      case 43: return 18000120;
      case 44: return 18000120;
      case 45: return 18000120;
      case 46: return 18000120;
      case 47: return 18000120;
      case 48: return 18000120;
      case 49: return 2400016;
      case 50: return 2400016;
      case 51: return 2400016;
      case 52: return 2400016;
      case 53: return 2400016;
      case 54: return 2400016;
      case 55: return 2400016;
      case 56: return 2400016;
      case 57: return 2400016;
      case 58: return 2400016;
      case 59: return 2400016;
      case 60: return 2400016;
      case 61: return 0;
      case 62: return 0;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 0;
      case 69: return 0;
      case 70: return 0;
      case 71: return 0;
      case 72: return 0;
      case 73: return 0;
      case 74: return 0;
      case 75: return 0;
      case 76: return 0;
      case 77: return 0;
      case 78: return 0;
      case 79: return 0;
      case 80: return 0;
      case 81: return 0;
      case 82: return 0;
      case 83: return 0;
      case 84: return 0;
      case 85: return 0;
      case 86: return 0;
      case 87: return 38400256;
      case 88: return 38400256;
      case 89: return 38400256;
      case 90: return 38400256;
      case 91: return 38400256;
      case 92: return 38400256;
      case 93: return 38400256;
      case 94: return 38400256;
      case 95: return 38400256;
      case 96: return 38400256;
      case 97: return 38400256;
      case 98: return 38400256;
      case 99: return 38400256;
      case 100: return 38400256;
      case 101: return 0;
      case 102: return 0;
      case 103: return 0;
      case 104: return 0;
      case 105: return 0;
      case 106: return 0;
      case 107: return 0;
      case 108: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "errorcheck") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "bitrv2") {
      switch(AccessId) {
      case 0: return 150003;
      case 1: return 150002;
      case 2: return 150002;
      case 3: return 150002;
      case 4: return 150002;
      case 5: return 450009;
      case 6: return 450009;
      case 7: return 150003;
      case 8: return 150003;
      case 9: return 150003;
      case 10: return 150003;
      case 11: return 150003;
      case 12: return 150003;
      case 13: return 150003;
      case 14: return 150003;
      case 15: return 2400040;
      case 16: return 18000268;
      case 17: return 18000268;
      case 18: return 18000268;
      case 19: return 18000268;
      case 20: return 18000268;
      case 21: return 18000268;
      case 22: return 18000268;
      case 23: return 18000268;
      case 24: return 18000268;
      case 25: return 18000268;
      case 26: return 18000268;
      case 27: return 18000268;
      case 28: return 18000268;
      case 29: return 18000268;
      case 30: return 18000268;
      case 31: return 18000268;
      case 32: return 18000268;
      case 33: return 18000268;
      case 34: return 18000268;
      case 35: return 18000268;
      case 36: return 18000268;
      case 37: return 18000268;
      case 38: return 18000268;
      case 39: return 18000268;
      case 40: return 18000268;
      case 41: return 18000268;
      case 42: return 18000268;
      case 43: return 18000268;
      case 44: return 18000268;
      case 45: return 18000268;
      case 46: return 18000268;
      case 47: return 18000268;
      case 48: return 18000268;
      case 49: return 2400040;
      case 50: return 2400040;
      case 51: return 2400040;
      case 52: return 2400040;
      case 53: return 2400040;
      case 54: return 2400040;
      case 55: return 2400040;
      case 56: return 2400040;
      case 57: return 0;
      case 58: return 0;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      case 62: return 0;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 0;
      case 69: return 0;
      case 70: return 0;
      case 71: return 0;
      case 72: return 0;
      case 73: return 0;
      case 74: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "cftfsub") {
      switch(AccessId) {
      case 0: return 38400512;
      case 1: return 38400512;
      case 2: return 38400512;
      case 3: return 38400512;
      case 4: return 38400512;
      case 5: return 38400512;
      case 6: return 38400512;
      case 7: return 38400512;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "cft1st") {
      switch(AccessId) {
      case 0: return 300003;
      case 1: return 300003;
      case 2: return 300003;
      case 3: return 300003;
      case 4: return 300003;
      case 5: return 300003;
      case 6: return 300003;
      case 7: return 300003;
      case 8: return 300003;
      case 9: return 300003;
      case 10: return 300003;
      case 11: return 300003;
      case 12: return 300003;
      case 13: return 300003;
      case 14: return 300003;
      case 15: return 300003;
      case 16: return 300003;
      case 17: return 300003;
      case 18: return 38100381;
      case 19: return 38100381;
      case 20: return 38100381;
      case 21: return 38100381;
      case 22: return 38100381;
      case 23: return 38100381;
      case 24: return 38100381;
      case 25: return 38100381;
      case 26: return 38100381;
      case 27: return 38100381;
      case 28: return 38100381;
      case 29: return 38100381;
      case 30: return 38100381;
      case 31: return 38100381;
      case 32: return 38100381;
      case 33: return 38100381;
      case 34: return 38100381;
      case 35: return 38100381;
      case 36: return 38100381;
      case 37: return 38100381;
      case 38: return 38100381;
      case 39: return 38100381;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "cftmdl") {
      switch(AccessId) {
      case 0: return 25200252;
      case 1: return 25200252;
      case 2: return 25200252;
      case 3: return 25200252;
      case 4: return 25200252;
      case 5: return 25200252;
      case 6: return 25200252;
      case 7: return 25200252;
      case 8: return 900009;
      case 9: return 25200252;
      case 10: return 25200252;
      case 11: return 25200252;
      case 12: return 25200252;
      case 13: return 25200252;
      case 14: return 25200252;
      case 15: return 25200252;
      case 16: return 25200252;
      case 17: return 25200252;
      case 18: return 11700117;
      case 19: return 11700117;
      case 20: return 11700117;
      case 21: return 90000900;
      case 22: return 90000900;
      case 23: return 90000900;
      case 24: return 90000900;
      case 25: return 90000900;
      case 26: return 90000900;
      case 27: return 90000900;
      case 28: return 90000900;
      case 29: return 11700117;
      case 30: return 11700117;
      case 31: return 90000900;
      case 32: return 90000900;
      case 33: return 90000900;
      case 34: return 90000900;
      case 35: return 90000900;
      case 36: return 90000900;
      case 37: return 90000900;
      case 38: return 90000900;
      case 39: return 90000900;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/SmallPT/smallpt.cpp") {
    if (FunctionName == "_Z8radianceRK3RayiPt") {
      switch(AccessId) {
      case 0: return 268091946;
      case 1: return 268091946;
      case 2: return 268091946;
      case 3: return 268091946;
      case 4: return 268091946;
      case 5: return 268091946;
      case 6: return 268091946;
      case 7: return 268091946;
      case 8: return 268091946;
      case 9: return 268091946;
      case 10: return 29787994;
      case 11: return 29787994;
      case 12: return 29787994;
      case 13: return 29787994;
      case 14: return 29787994;
      case 15: return 29787994;
      case 16: return 29787994;
      case 17: return 29787994;
      case 18: return 29787994;
      case 19: return 29787994;
      case 20: return 26182682;
      case 21: return 22282957;
      case 22: return 22282957;
      case 23: return 22282957;
      case 24: return 22282957;
      case 25: return 22282957;
      case 26: return 22282957;
      case 27: return 22282957;
      case 28: return 22282957;
      case 29: return 22282957;
      case 30: return 22282957;
      case 31: return 1131153;
      case 32: return 1131153;
      case 33: return 1131153;
      case 34: return 1131153;
      case 35: return 1131153;
      case 36: return 1131153;
      case 37: return 1131153;
      case 38: return 1131153;
      case 39: return 1131153;
      case 40: return 1131153;
      case 41: return 1131153;
      case 42: return 1131153;
      case 43: return 2768572;
      case 44: return 2768572;
      case 45: return 2768572;
      case 46: return 2768572;
      case 47: return 2768572;
      case 48: return 2768572;
      case 49: return 4456;
      case 50: return 4456;
      case 51: return 4456;
      case 52: return 4456;
      case 53: return 4456;
      case 54: return 4456;
      case 55: return 677507;
      case 56: return 677507;
      case 57: return 1627025;
      case 58: return 1627025;
      case 59: return 1627025;
      case 60: return 1627025;
      case 61: return 1627025;
      case 62: return 1627025;
      case 63: return 459584;
      case 64: return 459584;
      case 65: return 459584;
      case 66: return 459584;
      case 67: return 459584;
      case 68: return 459584;
      case 69: return 459584;
      case 70: return 459584;
      case 71: return 2764116;
      case 72: return 2764116;
      case 73: return 2764116;
      case 74: return 2764116;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 768;
      case 3: return 768;
      case 4: return 768;
      case 5: return 1572864;
      case 6: return 1572864;
      case 7: return 1572864;
      case 8: return 1572864;
      case 9: return 1572864;
      case 10: return 1572864;
      case 11: return 1572864;
      case 12: return 1572864;
      case 13: return 1572864;
      case 14: return 1572864;
      case 15: return 1572864;
      case 16: return 1572864;
      case 17: return 1572864;
      case 18: return 1572864;
      case 19: return 1572864;
      case 20: return 1572864;
      case 21: return 1572864;
      case 22: return 1572864;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_GLOBAL__sub_I_smallpt.cpp") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/CoyoteBench/almabench.c") {
    if (FunctionName == "planetpv") {
      switch(AccessId) {
      case 0: return 5844000;
      case 1: return 5844000;
      case 2: return 5844000;
      case 3: return 5844000;
      case 4: return 5844000;
      case 5: return 5844000;
      case 6: return 5844000;
      case 7: return 5844000;
      case 8: return 5844000;
      case 9: return 5844000;
      case 10: return 5844000;
      case 11: return 5844000;
      case 12: return 5844000;
      case 13: return 5844000;
      case 14: return 5844000;
      case 15: return 5844000;
      case 16: return 5844000;
      case 17: return 5844000;
      case 18: return 5844000;
      case 19: return 5844000;
      case 20: return 5844000;
      case 21: return 5844000;
      case 22: return 5844000;
      case 23: return 5844000;
      case 24: return 5844000;
      case 25: return 5844000;
      case 26: return 5844000;
      case 27: return 5844000;
      case 28: return 5844000;
      case 29: return 5844000;
      case 30: return 5844000;
      case 31: return 5844000;
      case 32: return 5844000;
      case 33: return 5844000;
      case 34: return 5844000;
      case 35: return 5844000;
      case 36: return 5844000;
      case 37: return 5844000;
      case 38: return 5844000;
      case 39: return 5844000;
      case 40: return 5844000;
      case 41: return 5844000;
      case 42: return 5844000;
      case 43: return 5844000;
      case 44: return 5844000;
      case 45: return 5844000;
      case 46: return 5844000;
      case 47: return 5844000;
      case 48: return 5844000;
      case 49: return 5844000;
      case 50: return 5844000;
      case 51: return 5844000;
      case 52: return 5844000;
      case 53: return 5844000;
      case 54: return 5844000;
      case 55: return 5844000;
      case 56: return 5844000;
      case 57: return 5844000;
      case 58: return 5844000;
      case 59: return 5844000;
      case 60: return 5844000;
      case 61: return 5844000;
      case 62: return 5844000;
      case 63: return 5844000;
      case 64: return 5844000;
      case 65: return 5844000;
      case 66: return 5844000;
      case 67: return 5844000;
      case 68: return 5844000;
      case 69: return 5844000;
      case 70: return 5844000;
      case 71: return 5844000;
      case 72: return 5844000;
      case 73: return 5844000;
      case 74: return 5844000;
      case 75: return 5844000;
      case 76: return 5844000;
      case 77: return 5844000;
      case 78: return 5844000;
      case 79: return 5844000;
      case 80: return 5844000;
      case 81: return 5844000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "radecdist") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 20;
      case 1: return 730500;
      case 2: return 730500;
      case 3: return 730500;
      case 4: return 730500;
      case 5: return 730500;
      case 6: return 730500;
      case 7: return 730500;
      case 8: return 730500;
      case 9: return 730500;
      case 10: return 730500;
      case 11: return 730500;
      case 12: return 730500;
      case 13: return 730500;
      case 14: return 730500;
      case 15: return 730500;
      case 16: return 730500;
      case 17: return 730500;
      case 18: return 730500;
      case 19: return 730500;
      case 20: return 730500;
      case 21: return 730500;
      case 22: return 730500;
      case 23: return 730500;
      case 24: return 730500;
      case 25: return 730500;
      case 26: return 730500;
      case 27: return 730500;
      case 28: return 730500;
      case 29: return 730500;
      case 30: return 730500;
      case 31: return 730500;
      case 32: return 730500;
      case 33: return 730500;
      case 34: return 730500;
      case 35: return 730500;
      case 36: return 730500;
      case 37: return 730500;
      case 38: return 730500;
      case 39: return 730500;
      case 40: return 730500;
      case 41: return 730500;
      case 42: return 730500;
      case 43: return 730500;
      case 44: return 730500;
      case 45: return 730500;
      case 46: return 730500;
      case 47: return 730500;
      case 48: return 730500;
      case 49: return 730500;
      case 50: return 730480;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      case 58: return 1;
      case 59: return 1;
      case 60: return 1;
      case 61: return 1;
      case 62: return 1;
      case 63: return 1;
      case 64: return 1;
      case 65: return 1;
      case 66: return 1;
      case 67: return 1;
      case 68: return 1;
      case 69: return 1;
      case 70: return 1;
      case 71: return 1;
      case 72: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/CoyoteBench/lpbench.c") {
    if (FunctionName == "matgen") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "idamax") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "dscal") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "daxpy") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "dgefa") {
      switch(AccessId) {
      case 0: return 1999;
      case 1: return 1999;
      case 2: return 999000;
      case 3: return 999000;
      case 4: return 1000;
      case 5: return 1999;
      case 6: return 1999;
      case 7: return 3;
      case 8: return 1996;
      case 9: return 1996;
      case 10: return 1996;
      case 11: return 249000;
      case 12: return 249000;
      case 13: return 249000;
      case 14: return 249000;
      case 15: return 249000;
      case 16: return 249000;
      case 17: return 249000;
      case 18: return 249000;
      case 19: return 1000;
      case 20: return 1000;
      case 21: return 1000;
      case 22: return 1000;
      case 23: return 3000;
      case 24: return 3000;
      case 25: return 1998675;
      case 26: return 1998675;
      case 27: return 1998675;
      case 28: return 1998675;
      case 29: return 1998675;
      case 30: return 332195246;
      case 31: return 332195246;
      case 32: return 332195246;
      case 33: return 332195246;
      case 34: return 332195246;
      case 35: return 332195246;
      case 36: return 332195246;
      case 37: return 332195246;
      case 38: return 332195246;
      case 39: return 332195246;
      case 40: return 332195246;
      case 41: return 332195246;
      case 42: return 1001500;
      case 43: return 1001500;
      case 44: return 1001500;
      case 45: return 1001500;
      case 46: return 1001500;
      case 47: return 1001500;
      case 48: return 999997;
      case 49: return 999997;
      case 50: return 999997;
      case 51: return 1000183;
      case 52: return 1000183;
      case 53: return 1000183;
      case 54: return 1000183;
      case 55: return 1000183;
      case 56: return 1000183;
      case 57: return 325;
      case 58: return 325;
      case 59: return 12254;
      case 60: return 12254;
      case 61: return 12254;
      case 62: return 12254;
      case 63: return 12254;
      case 64: return 12254;
      case 65: return 12254;
      case 66: return 12254;
      case 67: return 12254;
      case 68: return 12254;
      case 69: return 12254;
      case 70: return 12254;
      case 71: return 0;
      case 72: return 0;
      case 73: return 0;
      case 74: return 0;
      case 75: return 0;
      case 76: return 0;
      case 77: return 3;
      case 78: return 3;
      case 79: return 3;
      case 80: return 317;
      case 81: return 317;
      case 82: return 317;
      case 83: return 317;
      case 84: return 317;
      case 85: return 317;
      case 86: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "dgesl") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      case 62: return 0;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 0;
      case 69: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 2000;
      case 2: return 1;
      case 3: return 4000000;
      case 4: return 4000000;
      case 5: return 1;
      case 6: return 2000;
      case 7: return 500000;
      case 8: return 500000;
      case 9: return 500000;
      case 10: return 500000;
      case 11: return 500000;
      case 12: return 500000;
      case 13: return 500000;
      case 14: return 500000;
      case 15: return 500000;
      case 16: return 500000;
      case 17: return 500000;
      case 18: return 500000;
      case 19: return 1999;
      case 20: return 1999;
      case 21: return 1996;
      case 22: return 1996;
      case 23: return 1996;
      case 24: return 1999;
      case 25: return 249000;
      case 26: return 249000;
      case 27: return 249000;
      case 28: return 249000;
      case 29: return 249000;
      case 30: return 249000;
      case 31: return 249000;
      case 32: return 249000;
      case 33: return 249000;
      case 34: return 249000;
      case 35: return 249000;
      case 36: return 249000;
      case 37: return 1000;
      case 38: return 1000;
      case 39: return 1000;
      case 40: return 1000;
      case 41: return 1000;
      case 42: return 1000;
      case 43: return 3000;
      case 44: return 3000;
      case 45: return 3000;
      case 46: return 2000;
      case 47: return 2000;
      case 48: return 2000;
      case 49: return 2000;
      case 50: return 249000;
      case 51: return 249000;
      case 52: return 249000;
      case 53: return 249000;
      case 54: return 249000;
      case 55: return 249000;
      case 56: return 249000;
      case 57: return 249000;
      case 58: return 249000;
      case 59: return 249000;
      case 60: return 249000;
      case 61: return 249000;
      case 62: return 1000;
      case 63: return 1000;
      case 64: return 1000;
      case 65: return 1000;
      case 66: return 1000;
      case 67: return 1000;
      case 68: return 3000;
      case 69: return 3000;
      case 70: return 3000;
      case 71: return 2000;
      case 72: return 1;
      case 73: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/CoyoteBench/fftbench.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 0;
      case 11: return 524288;
      case 12: return 524288;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 65535;
      case 18: return 65535;
      case 19: return 65535;
      case 20: return 65535;
      case 21: return 65535;
      case 22: return 65535;
      case 23: return 65535;
      case 24: return 65535;
      case 25: return 65535;
      case 26: return 65535;
      case 27: return 65535;
      case 28: return 65535;
      case 29: return 65535;
      case 30: return 65535;
      case 31: return 65535;
      case 32: return 65535;
      case 33: return 3;
      case 34: return 3;
      case 35: return 3;
      case 36: return 3;
      case 37: return 3;
      case 38: return 3;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 1;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 1;
      case 60: return 1;
      case 61: return 0;
      case 62: return 0;
      case 63: return 1;
      case 64: return 1;
      case 65: return 0;
      case 66: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNK10polynomialIdEmlERKS0_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 32768;
      case 6: return 32768;
      case 7: return 32768;
      case 8: return 32768;
      case 9: return 32768;
      case 10: return 32768;
      case 11: return 32768;
      case 12: return 32768;
      case 13: return 32768;
      case 14: return 32768;
      case 15: return 32768;
      case 16: return 32768;
      case 17: return 32768;
      case 18: return 32768;
      case 19: return 32768;
      case 20: return 32768;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      case 49: return 32768;
      case 50: return 32768;
      case 51: return 32768;
      case 52: return 32768;
      case 53: return 32768;
      case 54: return 32768;
      case 55: return 32768;
      case 56: return 32768;
      case 57: return 32768;
      case 58: return 32768;
      case 59: return 32768;
      case 60: return 32768;
      case 61: return 32768;
      case 62: return 32768;
      case 63: return 32768;
      case 64: return 32768;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 0;
      case 69: return 0;
      case 70: return 0;
      case 71: return 0;
      case 72: return 0;
      case 73: return 0;
      case 74: return 0;
      case 75: return 0;
      case 76: return 0;
      case 77: return 0;
      case 78: return 0;
      case 79: return 0;
      case 80: return 0;
      case 81: return 0;
      case 82: return 0;
      case 83: return 0;
      case 84: return 0;
      case 85: return 0;
      case 86: return 0;
      case 87: return 0;
      case 88: return 0;
      case 89: return 0;
      case 90: return 0;
      case 91: return 0;
      case 92: return 0;
      case 93: return 0;
      case 94: return 0;
      case 95: return 0;
      case 96: return 0;
      case 97: return 0;
      case 98: return 0;
      case 99: return 0;
      case 100: return 0;
      case 101: return 0;
      case 102: return 0;
      case 103: return 0;
      case 104: return 0;
      case 105: return 0;
      case 106: return 0;
      case 107: return 0;
      case 108: return 0;
      case 109: return 0;
      case 110: return 0;
      case 111: return 0;
      case 112: return 0;
      case 113: return 0;
      case 114: return 0;
      case 115: return 0;
      case 116: return 0;
      case 117: return 0;
      case 118: return 0;
      case 119: return 0;
      case 120: return 0;
      case 121: return 0;
      case 122: return 0;
      case 123: return 0;
      case 124: return 0;
      case 125: return 0;
      case 126: return 0;
      case 127: return 0;
      case 128: return 0;
      case 129: return 1;
      case 130: return 1;
      case 131: return 1;
      case 132: return 1;
      case 133: return 32768;
      case 134: return 32768;
      case 135: return 32768;
      case 136: return 32768;
      case 137: return 32768;
      case 138: return 32768;
      case 139: return 32768;
      case 140: return 32768;
      case 141: return 32768;
      case 142: return 32768;
      case 143: return 32768;
      case 144: return 32768;
      case 145: return 32768;
      case 146: return 32768;
      case 147: return 32768;
      case 148: return 32768;
      case 149: return 0;
      case 150: return 0;
      case 151: return 0;
      case 152: return 0;
      case 153: return 0;
      case 154: return 0;
      case 155: return 0;
      case 156: return 0;
      case 157: return 0;
      case 158: return 0;
      case 159: return 0;
      case 160: return 0;
      case 161: return 0;
      case 162: return 0;
      case 163: return 0;
      case 164: return 0;
      case 165: return 0;
      case 166: return 0;
      case 167: return 0;
      case 168: return 0;
      case 169: return 0;
      case 170: return 0;
      case 171: return 1;
      case 172: return 1048576;
      case 173: return 1048576;
      case 174: return 1048576;
      case 175: return 1048576;
      case 176: return 1048576;
      case 177: return 1048576;
      case 178: return 1;
      case 179: return 1;
      case 180: return 0;
      case 181: return 0;
      case 182: return 0;
      case 183: return 0;
      case 184: return 1;
      case 185: return 1048576;
      case 186: return 1048576;
      case 187: return 1;
      case 188: return 1;
      case 189: return 1;
      case 190: return 1;
      case 191: return 1;
      case 192: return 1;
      case 193: return 1;
      case 194: return 0;
      case 195: return 0;
      case 196: return 262143;
      case 197: return 262143;
      case 198: return 262143;
      case 199: return 262143;
      case 200: return 262143;
      case 201: return 262143;
      case 202: return 262143;
      case 203: return 262143;
      case 204: return 3;
      case 205: return 3;
      case 206: return 1;
      case 207: return 0;
      case 208: return 1;
      case 209: return 1;
      case 210: return 1;
      case 211: return 1;
      case 212: return 0;
      case 213: return 0;
      case 214: return 0;
      case 215: return 0;
      case 216: return 1;
      case 217: return 1;
      case 218: return 0;
      case 219: return 0;
      case 220: return 0;
      case 221: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN10polynomialIdED2Ev") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "__cxx_global_var_init.3") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN10polynomialIdED0Ev") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN10polynomialIdE11stretch_fftEv") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 32768;
      case 13: return 32768;
      case 14: return 32768;
      case 15: return 32768;
      case 16: return 32768;
      case 17: return 32768;
      case 18: return 32768;
      case 19: return 32768;
      case 20: return 32768;
      case 21: return 32768;
      case 22: return 32768;
      case 23: return 32768;
      case 24: return 32768;
      case 25: return 32768;
      case 26: return 32768;
      case 27: return 32768;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN10polynomialIdE3fftERKS0_") {
      switch(AccessId) {
      case 0: return 2;
      case 1: return 2;
      case 2: return 2;
      case 3: return 2;
      case 4: return 0;
      case 5: return 2;
      case 6: return 2;
      case 7: return 2097152;
      case 8: return 2097152;
      case 9: return 2097152;
      case 10: return 40;
      case 11: return 40;
      case 12: return 2097150;
      case 13: return 20971520;
      case 14: return 20971520;
      case 15: return 20971520;
      case 16: return 20971520;
      case 17: return 20971520;
      case 18: return 20971520;
      case 19: return 20971520;
      case 20: return 20971520;
      case 21: return 20971520;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN10polynomialIdE11inverse_fftERKS_ISt7complexIdEE") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 0;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1048576;
      case 8: return 1048576;
      case 9: return 20;
      case 10: return 20;
      case 11: return 1048575;
      case 12: return 10485760;
      case 13: return 10485760;
      case 14: return 10485760;
      case 15: return 10485760;
      case 16: return 10485760;
      case 17: return 10485760;
      case 18: return 10485760;
      case 19: return 10485760;
      case 20: return 10485760;
      case 21: return 1;
      case 22: return 524288;
      case 23: return 524288;
      case 24: return 0;
      case 25: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN10polynomialISt7complexIdEED2Ev") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN10polynomialISt7complexIdEED0Ev") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/CoyoteBench/huffbench.c") {
    if (FunctionName == "generate_test_data") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "compdecomp") {
      switch(AccessId) {
      case 0: return 75000000;
      case 1: return 75000000;
      case 2: return 75000000;
      case 3: return 75000000;
      case 4: return 75000000;
      case 5: return 75000000;
      case 6: return 75000000;
      case 7: return 75000000;
      case 8: return 75000000;
      case 9: return 75000000;
      case 10: return 75000000;
      case 11: return 75000000;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 3840;
      case 16: return 480;
      case 17: return 3840;
      case 18: return 960;
      case 19: return 480;
      case 20: return 720;
      case 21: return 720;
      case 22: return 720;
      case 23: return 720;
      case 24: return 810;
      case 25: return 810;
      case 26: return 540;
      case 27: return 960;
      case 28: return 930;
      case 29: return 930;
      case 30: return 930;
      case 31: return 900;
      case 32: return 2550;
      case 33: return 2550;
      case 34: return 2550;
      case 35: return 2550;
      case 36: return 2610;
      case 37: return 2610;
      case 38: return 2490;
      case 39: return 930;
      case 40: return 930;
      case 41: return 930;
      case 42: return 930;
      case 43: return 930;
      case 44: return 930;
      case 45: return 930;
      case 46: return 930;
      case 47: return 900;
      case 48: return 2550;
      case 49: return 2550;
      case 50: return 2550;
      case 51: return 2550;
      case 52: return 2730;
      case 53: return 2730;
      case 54: return 2730;
      case 55: return 930;
      case 56: return 30;
      case 57: return 7680;
      case 58: return 6720;
      case 59: return 6720;
      case 60: return 960;
      case 61: return 4800;
      case 62: return 960;
      case 63: return 960;
      case 64: return 0;
      case 65: return 0;
      case 66: return 300000000;
      case 67: return 300000000;
      case 68: return 187499970;
      case 69: return 187499970;
      case 70: return 0;
      case 71: return 1500000000;
      case 72: return 1500000000;
      case 73: return 30;
      case 74: return 7680;
      case 75: return 7680;
      case 76: return 7680;
      case 77: return 960;
      case 78: return 7650;
      case 79: return 7650;
      case 80: return 174930;
      case 81: return 167280;
      case 82: return 167280;
      case 83: return 167280;
      case 84: return 7650;
      case 85: return 7650;
      case 86: return 6750;
      case 87: return 1500000000;
      case 88: return 6154048650;
      case 89: return 300000000;
      case 90: return 300000000;
      case 91: return 480;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 10000000;
      case 3: return 10000000;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout/fib2.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout/sieve.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 3177300000;
      case 2: return 1392300000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout/heapsort.c") {
    if (FunctionName == "gen_random") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "benchmark_heapsort") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 4000000;
      case 3: return 4000000;
      case 4: return 0;
      case 5: return 1;
      case 6: return 4000000;
      case 7: return 7999999;
      case 8: return 7999999;
      case 9: return 7999999;
      case 10: return 171177404;
      case 11: return 171177404;
      case 12: return 171177419;
      case 13: return 168387721;
      case 14: return 11999998;
      case 15: return 1;
      case 16: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout/lists.c") {
    if (FunctionName == "list_push_tail") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "list_pop_tail") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "list_push_head") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "list_pop_head") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "list_equal") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "list_print") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "list_new") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "list_sequence") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "list_copy") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "list_reverse") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "test_lists") {
      switch(AccessId) {
      case 0: return 150000000;
      case 1: return 150000000;
      case 2: return 150000000;
      case 3: return 150000000;
      case 4: return 150000000;
      case 5: return 150000000;
      case 6: return 3000000;
      case 7: return 3000000;
      case 8: return 3000000;
      case 9: return 3000000;
      case 10: return 3000000;
      case 11: return 3000000;
      case 12: return 3000000;
      case 13: return 3000000;
      case 14: return 150000000;
      case 15: return 150000000;
      case 16: return 150000000;
      case 17: return 150000000;
      case 18: return 150000000;
      case 19: return 3000000;
      case 20: return 3000000;
      case 21: return 3000000;
      case 22: return 3000000;
      case 23: return 3000000;
      case 24: return 3000000;
      case 25: return 3000000;
      case 26: return 3000000;
      case 27: return 300000000;
      case 28: return 300000000;
      case 29: return 300000000;
      case 30: return 300000000;
      case 31: return 3000000;
      case 32: return 3000000;
      case 33: return 3000000;
      case 34: return 3000000;
      case 35: return 3000000;
      case 36: return 3000000;
      case 37: return 3000000;
      case 38: return 3000000;
      case 39: return 3000000;
      case 40: return 3000000;
      case 41: return 3000000;
      case 42: return 3000000;
      case 43: return 3000000;
      case 44: return 3000000;
      case 45: return 3000000;
      case 46: return 3000000;
      case 47: return 3000000;
      case 48: return 3000000;
      case 49: return 3000000;
      case 50: return 3000000;
      case 51: return 147000000;
      case 52: return 147000000;
      case 53: return 147000000;
      case 54: return 147000000;
      case 55: return 147000000;
      case 56: return 147000000;
      case 57: return 147000000;
      case 58: return 147000000;
      case 59: return 147000000;
      case 60: return 147000000;
      case 61: return 147000000;
      case 62: return 147000000;
      case 63: return 147000000;
      case 64: return 147000000;
      case 65: return 147000000;
      case 66: return 147000000;
      case 67: return 147000000;
      case 68: return 147000000;
      case 69: return 147000000;
      case 70: return 147000000;
      case 71: return 3000000;
      case 72: return 3000000;
      case 73: return 0;
      case 74: return 0;
      case 75: return 0;
      case 76: return 0;
      case 77: return 0;
      case 78: return 0;
      case 79: return 0;
      case 80: return 0;
      case 81: return 0;
      case 82: return 150000000;
      case 83: return 150000000;
      case 84: return 150000000;
      case 85: return 150000000;
      case 86: return 150000000;
      case 87: return 150000000;
      case 88: return 150000000;
      case 89: return 150000000;
      case 90: return 150000000;
      case 91: return 150000000;
      case 92: return 150000000;
      case 93: return 150000000;
      case 94: return 150000000;
      case 95: return 150000000;
      case 96: return 150000000;
      case 97: return 150000000;
      case 98: return 150000000;
      case 99: return 150000000;
      case 100: return 3000000;
      case 101: return 3000000;
      case 102: return 303000000;
      case 103: return 303000000;
      case 104: return 303000000;
      case 105: return 303000000;
      case 106: return 3000000;
      case 107: return 3000000;
      case 108: return 3000000;
      case 109: return 3000000;
      case 110: return 3000000;
      case 111: return 3000000;
      case 112: return 3000000;
      case 113: return 3000000;
      case 114: return 300000000;
      case 115: return 300000000;
      case 116: return 300000000;
      case 117: return 300000000;
      case 118: return 3000000;
      case 119: return 147000000;
      case 120: return 147000000;
      case 121: return 147000000;
      case 122: return 147000000;
      case 123: return 147000000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout/strcat.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout/objinst.c") {
    if (FunctionName == "toggle_value") {
      switch(AccessId) {
      case 0: return 7;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "toggle_activate") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "init_Toggle") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "new_Toggle") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "nth_toggle_activate") {
      switch(AccessId) {
      case 0: return 4;
      case 1: return 4;
      case 2: return 4;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "init_NthToggle") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "new_NthToggle") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout/hash.c") {
    if (FunctionName == "ht_node_create") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "ht_create") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "ht_destroy") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 18;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 3500000;
      case 8: return 19881525;
      case 9: return 3500000;
      case 10: return 3500000;
      case 11: return 151558623;
      case 12: return 151558623;
      case 13: return 3500000;
      case 14: return 3500000;
      case 15: return 3500000;
      case 16: return 3500000;
      case 17: return 3500000;
      case 18: return 3500000;
      case 19: return 0;
      case 20: return 3500000;
      case 21: return 23388896;
      case 22: return 3500000;
      case 23: return 3500000;
      case 24: return 46455518;
      case 25: return 46098719;
      case 26: return 6291469;
      case 27: return 3500000;
      case 28: return 3500000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout/nestedloop.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout/ackermann.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout/ary3.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 187500;
      case 2: return 187500;
      case 3: return 0;
      case 4: return 93750000;
      case 5: return 93750000;
      case 6: return 93750000;
      case 7: return 93750000;
      case 8: return 93750000;
      case 9: return 93750000;
      case 10: return 93750000;
      case 11: return 93750000;
      case 12: return 93750000;
      case 13: return 93750000;
      case 14: return 93750000;
      case 15: return 93750000;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout/methcall.c") {
    if (FunctionName == "toggle_value") {
      switch(AccessId) {
      case 0: return 1000000000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "toggle_activate") {
      switch(AccessId) {
      case 0: return 500000000;
      case 1: return 500000000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "init_Toggle") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "new_Toggle") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "nth_toggle_activate") {
      switch(AccessId) {
      case 0: return 500000000;
      case 1: return 500000000;
      case 2: return 500000000;
      case 3: return 166666666;
      case 4: return 166666666;
      case 5: return 166666666;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "init_NthToggle") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "new_NthToggle") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 499999999;
      case 6: return 499999999;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 499999999;
      case 14: return 499999999;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout/random.c") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout/matrix.c") {
    if (FunctionName == "mkmatrix") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "zeromatrix") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "freematrix") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "mmult") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 1;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      case 58: return 1;
      case 59: return 1;
      case 60: return 1;
      case 61: return 1;
      case 62: return 1;
      case 63: return 1;
      case 64: return 1;
      case 65: return 1;
      case 66: return 1;
      case 67: return 1;
      case 68: return 1;
      case 69: return 1;
      case 70: return 1;
      case 71: return 1;
      case 72: return 1;
      case 73: return 1;
      case 74: return 1;
      case 75: return 1;
      case 76: return 1;
      case 77: return 1;
      case 78: return 1;
      case 79: return 1;
      case 80: return 1;
      case 81: return 1;
      case 82: return 1;
      case 83: return 1;
      case 84: return 1;
      case 85: return 1;
      case 86: return 1;
      case 87: return 1;
      case 88: return 1;
      case 89: return 1;
      case 90: return 1;
      case 91: return 1;
      case 92: return 1;
      case 93: return 1;
      case 94: return 1;
      case 95: return 1;
      case 96: return 1;
      case 97: return 1;
      case 98: return 1;
      case 99: return 1;
      case 100: return 1;
      case 101: return 1;
      case 102: return 1;
      case 103: return 1;
      case 104: return 1;
      case 105: return 1;
      case 106: return 1;
      case 107: return 1;
      case 108: return 1;
      case 109: return 1;
      case 110: return 1;
      case 111: return 1;
      case 112: return 1;
      case 113: return 1;
      case 114: return 1;
      case 115: return 1;
      case 116: return 1;
      case 117: return 1;
      case 118: return 1;
      case 119: return 1;
      case 120: return 1;
      case 121: return 1;
      case 122: return 1;
      case 123: return 1;
      case 124: return 1;
      case 125: return 1;
      case 126: return 1;
      case 127: return 1;
      case 128: return 1;
      case 129: return 1;
      case 130: return 1;
      case 131: return 1;
      case 132: return 1;
      case 133: return 1;
      case 134: return 1;
      case 135: return 1;
      case 136: return 1;
      case 137: return 1;
      case 138: return 1;
      case 139: return 1;
      case 140: return 1;
      case 141: return 1;
      case 142: return 1;
      case 143: return 1;
      case 144: return 1;
      case 145: return 1;
      case 146: return 1;
      case 147: return 1;
      case 148: return 1;
      case 149: return 1;
      case 150: return 1;
      case 151: return 0;
      case 152: return 0;
      case 153: return 0;
      case 154: return 0;
      case 155: return 0;
      case 156: return 0;
      case 157: return 0;
      case 158: return 0;
      case 159: return 0;
      case 160: return 0;
      case 161: return 1;
      case 162: return 1;
      case 163: return 1;
      case 164: return 1;
      case 165: return 1;
      case 166: return 1;
      case 167: return 1;
      case 168: return 1;
      case 169: return 1;
      case 170: return 1;
      case 171: return 300000000;
      case 172: return 300000000;
      case 173: return 300000000;
      case 174: return 300000000;
      case 175: return 300000000;
      case 176: return 300000000;
      case 177: return 300000000;
      case 178: return 300000000;
      case 179: return 300000000;
      case 180: return 300000000;
      case 181: return 300000000;
      case 182: return 300000000;
      case 183: return 300000000;
      case 184: return 300000000;
      case 185: return 300000000;
      case 186: return 300000000;
      case 187: return 300000000;
      case 188: return 300000000;
      case 189: return 300000000;
      case 190: return 300000000;
      case 191: return 300000000;
      case 192: return 30000000;
      case 193: return 30000000;
      case 194: return 1;
      case 195: return 1;
      case 196: return 1;
      case 197: return 1;
      case 198: return 1;
      case 199: return 1;
      case 200: return 1;
      case 201: return 1;
      case 202: return 1;
      case 203: return 1;
      case 204: return 1;
      case 205: return 1;
      case 206: return 1;
      case 207: return 1;
      case 208: return 1;
      case 209: return 1;
      case 210: return 1;
      case 211: return 1;
      case 212: return 1;
      case 213: return 1;
      case 214: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/ary3.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 187500;
      case 2: return 187500;
      case 3: return 0;
      case 4: return 93750000;
      case 5: return 93750000;
      case 6: return 93750000;
      case 7: return 93750000;
      case 8: return 93750000;
      case 9: return 93750000;
      case 10: return 93750000;
      case 11: return 93750000;
      case 12: return 93750000;
      case 13: return 93750000;
      case 14: return 93750000;
      case 15: return 93750000;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 1;
      case 30: return 1;
      case 31: return 1;
      case 32: return 0;
      case 33: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/ary.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1125000;
      case 2: return 1125000;
      case 3: return 0;
      case 4: return 562500;
      case 5: return 562500;
      case 6: return 562500;
      case 7: return 562500;
      case 8: return 562500;
      case 9: return 562500;
      case 10: return 562500;
      case 11: return 562500;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 0;
      case 25: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/random.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/wc.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 0;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 0;
      case 20: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/fibo.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/moments.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 4999976;
      case 2: return 24;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN7momentsIdEC2IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEET_S9_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 625000;
      case 3: return 625000;
      case 4: return 625000;
      case 5: return 625000;
      case 6: return 625000;
      case 7: return 625000;
      case 8: return 625000;
      case 9: return 625000;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 5000000;
      case 16: return 5000000;
      case 17: return 5000000;
      case 18: return 5000000;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 3;
      case 24: return 3;
      case 25: return 624999;
      case 26: return 624999;
      case 27: return 624999;
      case 28: return 624999;
      case 29: return 624999;
      case 30: return 624999;
      case 31: return 624999;
      case 32: return 624999;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 0;
      case 37: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt13__introselectIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_T1_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 21;
      case 7: return 21;
      case 8: return 21;
      case 9: return 21;
      case 10: return 21;
      case 11: return 21;
      case 12: return 22;
      case 13: return 4999999;
      case 14: return 7499989;
      case 15: return 1;
      case 16: return 1;
      case 17: return 21;
      case 18: return 21;
      case 19: return 21;
      case 20: return 2;
      case 21: return 2;
      case 22: return 2;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 2;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/lists.cpp") {
    if (FunctionName == "_Z10test_listsv") {
      switch(AccessId) {
      case 0: return 3000;
      case 1: return 3000;
      case 2: return 3000;
      case 3: return 30000000;
      case 4: return 30000000;
      case 5: return 30000000;
      case 6: return 0;
      case 7: return 0;
      case 8: return 3000;
      case 9: return 30000000;
      case 10: return 30000000;
      case 11: return 3000;
      case 12: return 3000;
      case 13: return 3000;
      case 14: return 30000000;
      case 15: return 30000000;
      case 16: return 30000000;
      case 17: return 30000000;
      case 18: return 30000000;
      case 19: return 0;
      case 20: return 0;
      case 21: return 3000;
      case 22: return 3000;
      case 23: return 3000;
      case 24: return 30000000;
      case 25: return 30000000;
      case 26: return 30000000;
      case 27: return 30000000;
      case 28: return 30000000;
      case 29: return 30000000;
      case 30: return 30000000;
      case 31: return 30000000;
      case 32: return 0;
      case 33: return 0;
      case 34: return 3000;
      case 35: return 30000000;
      case 36: return 30000000;
      case 37: return 30000000;
      case 38: return 30000000;
      case 39: return 30000000;
      case 40: return 30000000;
      case 41: return 30000000;
      case 42: return 30000000;
      case 43: return 3000;
      case 44: return 3000;
      case 45: return 3000;
      case 46: return 3000;
      case 47: return 3000;
      case 48: return 30000000;
      case 49: return 30000000;
      case 50: return 30000000;
      case 51: return 30000000;
      case 52: return 3000;
      case 53: return 0;
      case 54: return 3000;
      case 55: return 30000000;
      case 56: return 0;
      case 57: return 0;
      case 58: return 3000;
      case 59: return 30000000;
      case 60: return 0;
      case 61: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/sieve.cpp") {
    if (FunctionName == "_Z5sieveRNSt7__cxx114listIiSaIiEEERSt6vectorIiS1_E") {
      switch(AccessId) {
      case 0: return 500;
      case 1: return 514000;
      case 2: return 514000;
      case 3: return 514000;
      case 4: return 514000;
      case 5: return 272736000;
      case 6: return 272736000;
      case 7: return 3581000;
      case 8: return 3581000;
      case 9: return 514000;
      case 10: return 514000;
      case 11: return 513988;
      case 12: return 12;
      case 13: return 12;
      case 14: return 12;
      case 15: return 12;
      case 16: return 12;
      case 17: return 12;
      case 18: return 514000;
      case 19: return 514000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 500;
      case 2: return 500;
      case 3: return 500;
      case 4: return 4095000;
      case 5: return 4095000;
      case 6: return 4095000;
      case 7: return 500;
      case 8: return 500;
      case 9: return 500;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/matrix.cpp") {
    if (FunctionName == "_Z8mkmatrixii") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z10zeromatrixiiPPi") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z10freematrixiPPi") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z5mmultiiPPiS0_S0_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 30;
      case 2: return 30;
      case 3: return 30;
      case 4: return 30;
      case 5: return 30;
      case 6: return 30;
      case 7: return 30;
      case 8: return 30;
      case 9: return 30;
      case 10: return 30;
      case 11: return 30;
      case 12: return 30;
      case 13: return 30;
      case 14: return 30;
      case 15: return 30;
      case 16: return 30;
      case 17: return 30;
      case 18: return 30;
      case 19: return 30;
      case 20: return 30;
      case 21: return 30;
      case 22: return 30;
      case 23: return 30;
      case 24: return 30;
      case 25: return 30;
      case 26: return 30;
      case 27: return 30;
      case 28: return 30;
      case 29: return 30;
      case 30: return 30;
      case 31: return 30;
      case 32: return 30;
      case 33: return 30;
      case 34: return 30;
      case 35: return 30;
      case 36: return 30;
      case 37: return 30;
      case 38: return 30;
      case 39: return 30;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      case 49: return 1;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      case 58: return 1;
      case 59: return 1;
      case 60: return 1;
      case 61: return 1;
      case 62: return 1;
      case 63: return 1;
      case 64: return 1;
      case 65: return 1;
      case 66: return 1;
      case 67: return 1;
      case 68: return 1;
      case 69: return 1;
      case 70: return 90000000;
      case 71: return 90000000;
      case 72: return 90000000;
      case 73: return 90000000;
      case 74: return 90000000;
      case 75: return 90000000;
      case 76: return 90000000;
      case 77: return 90000000;
      case 78: return 90000000;
      case 79: return 90000000;
      case 80: return 90000000;
      case 81: return 90000000;
      case 82: return 90000000;
      case 83: return 90000000;
      case 84: return 90000000;
      case 85: return 90000000;
      case 86: return 90000000;
      case 87: return 90000000;
      case 88: return 90000000;
      case 89: return 90000000;
      case 90: return 90000000;
      case 91: return 90000000;
      case 92: return 90000000;
      case 93: return 90000000;
      case 94: return 90000000;
      case 95: return 90000000;
      case 96: return 90000000;
      case 97: return 90000000;
      case 98: return 90000000;
      case 99: return 90000000;
      case 100: return 90000000;
      case 101: return 90000000;
      case 102: return 90000000;
      case 103: return 90000000;
      case 104: return 90000000;
      case 105: return 90000000;
      case 106: return 90000000;
      case 107: return 90000000;
      case 108: return 90000000;
      case 109: return 90000000;
      case 110: return 90000000;
      case 111: return 90000000;
      case 112: return 90000000;
      case 113: return 90000000;
      case 114: return 90000000;
      case 115: return 90000000;
      case 116: return 90000000;
      case 117: return 90000000;
      case 118: return 90000000;
      case 119: return 90000000;
      case 120: return 90000000;
      case 121: return 90000000;
      case 122: return 90000000;
      case 123: return 90000000;
      case 124: return 90000000;
      case 125: return 90000000;
      case 126: return 90000000;
      case 127: return 90000000;
      case 128: return 90000000;
      case 129: return 90000000;
      case 130: return 90000000;
      case 131: return 3000000;
      case 132: return 3000000;
      case 133: return 1;
      case 134: return 1;
      case 135: return 1;
      case 136: return 1;
      case 137: return 1;
      case 138: return 1;
      case 139: return 1;
      case 140: return 1;
      case 141: return 1;
      case 142: return 1;
      case 143: return 1;
      case 144: return 1;
      case 145: return 1;
      case 146: return 0;
      case 147: return 0;
      case 148: return 1;
      case 149: return 1;
      case 150: return 1;
      case 151: return 1;
      case 152: return 1;
      case 153: return 1;
      case 154: return 1;
      case 155: return 1;
      case 156: return 1;
      case 157: return 1;
      case 158: return 1;
      case 159: return 1;
      case 160: return 1;
      case 161: return 1;
      case 162: return 1;
      case 163: return 1;
      case 164: return 1;
      case 165: return 1;
      case 166: return 1;
      case 167: return 1;
      case 168: return 1;
      case 169: return 1;
      case 170: return 1;
      case 171: return 1;
      case 172: return 1;
      case 173: return 1;
      case 174: return 1;
      case 175: return 1;
      case 176: return 1;
      case 177: return 1;
      case 178: return 1;
      case 179: return 1;
      case 180: return 1;
      case 181: return 1;
      case 182: return 1;
      case 183: return 1;
      case 184: return 1;
      case 185: return 1;
      case 186: return 1;
      case 187: return 1;
      case 188: return 1;
      case 189: return 1;
      case 190: return 1;
      case 191: return 1;
      case 192: return 1;
      case 193: return 1;
      case 194: return 1;
      case 195: return 1;
      case 196: return 1;
      case 197: return 1;
      case 198: return 1;
      case 199: return 1;
      case 200: return 1;
      case 201: return 1;
      case 202: return 1;
      case 203: return 1;
      case 204: return 1;
      case 205: return 1;
      case 206: return 1;
      case 207: return 1;
      case 208: return 1;
      case 209: return 1;
      case 210: return 1;
      case 211: return 1;
      case 212: return 1;
      case 213: return 1;
      case 214: return 1;
      case 215: return 1;
      case 216: return 1;
      case 217: return 1;
      case 218: return 1;
      case 219: return 1;
      case 220: return 1;
      case 221: return 1;
      case 222: return 1;
      case 223: return 1;
      case 224: return 1;
      case 225: return 1;
      case 226: return 1;
      case 227: return 1;
      case 228: return 1;
      case 229: return 1;
      case 230: return 1;
      case 231: return 1;
      case 232: return 1;
      case 233: return 1;
      case 234: return 1;
      case 235: return 1;
      case 236: return 1;
      case 237: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/reversefile.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 0;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      case 58: return 1;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEm") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 0;
      case 5: return 0;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 0;
      case 3: return 1;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 1;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_push_front_auxERKS5_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEmb") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/hello.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 0;
      case 5: return 1;
      case 6: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/lists1.cpp") {
    if (FunctionName == "_Z12list_print_nNSt7__cxx114listIiSaIiEEEi") {
      switch(AccessId) {
      case 0: return 2;
      case 1: return 12;
      case 2: return 12;
      case 3: return 2;
      case 4: return 2;
      case 5: return 2;
      case 6: return 2;
      case 7: return 2;
      case 8: return 0;
      case 9: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1000000;
      case 8: return 1000000;
      case 9: return 1000000;
      case 10: return 0;
      case 11: return 0;
      case 12: return 1;
      case 13: return 1000000;
      case 14: return 1000000;
      case 15: return 1000000;
      case 16: return 1000000;
      case 17: return 1000000;
      case 18: return 1000000;
      case 19: return 1000000;
      case 20: return 1000000;
      case 21: return 1000000;
      case 22: return 1000000;
      case 23: return 1000000;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1000000;
      case 29: return 1000000;
      case 30: return 1000000;
      case 31: return 1000000;
      case 32: return 1000000;
      case 33: return 0;
      case 34: return 0;
      case 35: return 1;
      case 36: return 1000000;
      case 37: return 1;
      case 38: return 1000000;
      case 39: return 1000000;
      case 40: return 1;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      case 45: return 0;
      case 46: return 0;
      case 47: return 1;
      case 48: return 1000000;
      case 49: return 999999;
      case 50: return 1;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      case 55: return 0;
      case 56: return 0;
      case 57: return 1;
      case 58: return 1000000;
      case 59: return 499999;
      case 60: return 499999;
      case 61: return 499999;
      case 62: return 499999;
      case 63: return 0;
      case 64: return 0;
      case 65: return 1000000;
      case 66: return 1;
      case 67: return 1;
      case 68: return 1;
      case 69: return 1;
      case 70: return 499999;
      case 71: return 499999;
      case 72: return 499999;
      case 73: return 499999;
      case 74: return 499999;
      case 75: return 0;
      case 76: return 0;
      case 77: return 1;
      case 78: return 499999;
      case 79: return 1;
      case 80: return 499999;
      case 81: return 499999;
      case 82: return 0;
      case 83: return 0;
      case 84: return 1;
      case 85: return 1;
      case 86: return 1;
      case 87: return 1;
      case 88: return 1;
      case 89: return 0;
      case 90: return 0;
      case 91: return 1;
      case 92: return 0;
      case 93: return 1;
      case 94: return 1;
      case 95: return 1;
      case 96: return 1;
      case 97: return 1;
      case 98: return 1;
      case 99: return 1;
      case 100: return 1;
      case 101: return 1;
      case 102: return 1;
      case 103: return 1;
      case 104: return 0;
      case 105: return 0;
      case 106: return 1;
      case 107: return 1499999;
      case 108: return 1;
      case 109: return 0;
      case 110: return 0;
      case 111: return 0;
      case 112: return 0;
      case 113: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/spellcheck.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN13spell_checkerC2Ev") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN13spell_checker7processERSi") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 0;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt3mapISt4pairIPKcS2_EiSt4lessIS3_ESaIS0_IKS3_iEEEixERS6_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt8_Rb_treeISt4pairIPKcS2_ES0_IKS3_iESt10_Select1stIS5_ESt4lessIS3_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS4_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 0;
      case 31: return 0;
      case 32: return 0;
      case 33: return 0;
      case 34: return 0;
      case 35: return 0;
      case 36: return 0;
      case 37: return 0;
      case 38: return 0;
      case 39: return 0;
      case 40: return 0;
      case 41: return 0;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt8_Rb_treeISt4pairIPKcS2_ES0_IKS3_iESt10_Select1stIS5_ESt4lessIS3_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/heapsort.cpp") {
    if (FunctionName == "_Z10gen_randomd") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z8heapsortiPd") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 4000000;
      case 3: return 4000000;
      case 4: return 0;
      case 5: return 1;
      case 6: return 4000000;
      case 7: return 7999999;
      case 8: return 7999999;
      case 9: return 7999999;
      case 10: return 171177404;
      case 11: return 171177404;
      case 12: return 171177419;
      case 13: return 168387721;
      case 14: return 11999998;
      case 15: return 1;
      case 16: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/hash2.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 10000;
      case 2: return 10000;
      case 3: return 10000;
      case 4: return 10000;
      case 5: return 78890;
      case 6: return 10000;
      case 7: return 30633;
      case 8: return 30633;
      case 9: return 10000;
      case 10: return 10000;
      case 11: return 10000;
      case 12: return 10000;
      case 13: return 10000;
      case 14: return 10000;
      case 15: return 10000;
      case 16: return 10000;
      case 17: return 1;
      case 18: return 1;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 0;
      case 30: return 2000;
      case 31: return 2000;
      case 32: return 6284000;
      case 33: return 20000000;
      case 34: return 20000000;
      case 35: return 20000000;
      case 36: return 20000000;
      case 37: return 20000000;
      case 38: return 157780000;
      case 39: return 20000000;
      case 40: return 81120000;
      case 41: return 61120000;
      case 42: return 0;
      case 43: return 0;
      case 44: return 0;
      case 45: return 0;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 20000000;
      case 50: return 20000000;
      case 51: return 20000000;
      case 52: return 20000000;
      case 53: return 20000000;
      case 54: return 20000000;
      case 55: return 157780000;
      case 56: return 20000000;
      case 57: return 81110000;
      case 58: return 61120000;
      case 59: return 10000;
      case 60: return 10000;
      case 61: return 10000;
      case 62: return 10000;
      case 63: return 10000;
      case 64: return 10000;
      case 65: return 10000;
      case 66: return 20000000;
      case 67: return 20000000;
      case 68: return 20000000;
      case 69: return 3190000;
      case 70: return 3190000;
      case 71: return 3190000;
      case 72: return 3190000;
      case 73: return 24750000;
      case 74: return 18294000;
      case 75: return 1;
      case 76: return 1;
      case 77: return 1;
      case 78: return 1;
      case 79: return 1;
      case 80: return 1;
      case 81: return 0;
      case 82: return 0;
      case 83: return 0;
      case 84: return 0;
      case 85: return 0;
      case 86: return 0;
      case 87: return 0;
      case 88: return 0;
      case 89: return 1;
      case 90: return 1;
      case 91: return 1;
      case 92: return 1;
      case 93: return 1;
      case 94: return 1;
      case 95: return 0;
      case 96: return 0;
      case 97: return 0;
      case 98: return 0;
      case 99: return 0;
      case 100: return 0;
      case 101: return 0;
      case 102: return 0;
      case 103: return 1;
      case 104: return 1;
      case 105: return 1;
      case 106: return 1;
      case 107: return 1;
      case 108: return 1;
      case 109: return 0;
      case 110: return 0;
      case 111: return 0;
      case 112: return 0;
      case 113: return 0;
      case 114: return 0;
      case 115: return 0;
      case 116: return 0;
      case 117: return 1;
      case 118: return 1;
      case 119: return 1;
      case 120: return 1;
      case 121: return 1;
      case 122: return 1;
      case 123: return 0;
      case 124: return 0;
      case 125: return 1;
      case 126: return 0;
      case 127: return 1;
      case 128: return 1;
      case 129: return 1;
      case 130: return 12289;
      case 131: return 10000;
      case 132: return 1595;
      case 133: return 12289;
      case 134: return 12289;
      case 135: return 12289;
      case 136: return 1;
      case 137: return 0;
      case 138: return 1;
      case 139: return 1;
      case 140: return 1;
      case 141: return 12289;
      case 142: return 10000;
      case 143: return 1595;
      case 144: return 12289;
      case 145: return 12289;
      case 146: return 12289;
      case 147: return 0;
      case 148: return 0;
      case 149: return 0;
      case 150: return 0;
      case 151: return 0;
      case 152: return 0;
      case 153: return 0;
      case 154: return 0;
      case 155: return 0;
      case 156: return 0;
      case 157: return 0;
      case 158: return 0;
      case 159: return 0;
      case 160: return 0;
      case 161: return 0;
      case 162: return 0;
      case 163: return 0;
      case 164: return 0;
      case 165: return 0;
      case 166: return 0;
      case 167: return 0;
      case 168: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9__gnu_cxx9hashtableISt4pairIKPKciES3_NS_4hashIS3_EESt10_Select1stIS5_E5eqstrSaIiEEC2EmRKS7_RKSA_RKSaIS5_E") {
      switch(AccessId) {
      case 0: return 10;
      case 1: return 2;
      case 2: return 2;
      case 3: return 2;
      case 4: return 2;
      case 5: return 2;
      case 6: return 2;
      case 7: return 2;
      case 8: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt6vectorIPN9__gnu_cxx15_Hashtable_nodeISt4pairIKPKciEEESaIS8_EE14_M_fill_insertENS0_17__normal_iteratorIPS8_SA_EEmRKS8_") {
      switch(AccessId) {
      case 0: return 2;
      case 1: return 2;
      case 2: return 2;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 12;
      case 25: return 12;
      case 26: return 12;
      case 27: return 12;
      case 28: return 12;
      case 29: return 12;
      case 30: return 12;
      case 31: return 12;
      case 32: return 12;
      case 33: return 12;
      case 34: return 12;
      case 35: return 12;
      case 36: return 12;
      case 37: return 12;
      case 38: return 12;
      case 39: return 12;
      case 40: return 0;
      case 41: return 0;
      case 42: return 2;
      case 43: return 2;
      case 44: return 0;
      case 45: return 2;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      case 62: return 0;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 0;
      case 69: return 0;
      case 70: return 0;
      case 71: return 0;
      case 72: return 0;
      case 73: return 0;
      case 74: return 0;
      case 75: return 0;
      case 76: return 0;
      case 77: return 0;
      case 78: return 0;
      case 79: return 0;
      case 80: return 0;
      case 81: return 0;
      case 82: return 0;
      case 83: return 0;
      case 84: return 0;
      case 85: return 0;
      case 86: return 0;
      case 87: return 0;
      case 88: return 0;
      case 89: return 0;
      case 90: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9__gnu_cxx9hashtableISt4pairIKPKciES3_NS_4hashIS3_EESt10_Select1stIS5_E5eqstrSaIiEE6resizeEm") {
      switch(AccessId) {
      case 0: return 40010004;
      case 1: return 40010004;
      case 2: return 60;
      case 3: return 12;
      case 4: return 12;
      case 5: return 24248;
      case 6: return 24248;
      case 7: return 24248;
      case 8: return 188973;
      case 9: return 24248;
      case 10: return 24248;
      case 11: return 24248;
      case 12: return 24248;
      case 13: return 24248;
      case 14: return 24248;
      case 15: return 24248;
      case 16: return 12;
      case 17: return 12;
      case 18: return 12;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/ackermann.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/wordfreq.cpp") {
    if (FunctionName == "_ZN11word_readerclEPPKc") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 1;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      case 28: return 0;
      case 29: return 1;
      case 30: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt3mapIPKciSt4lessIS1_ESaISt4pairIKS1_iEEEixERS5_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt8_Rb_treeIPKcSt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt8_Rb_treeIPKcSt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS3_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 0;
      case 25: return 0;
      case 26: return 0;
      case 27: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPSt4pairIPKciESt6vectorIS5_SaIS5_EEEElNS0_5__ops15_Iter_less_iterEEvT_SD_T0_T1_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt4pairIPKciESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_less_iterEEvT_SD_T0_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIPKciESt6vectorIS5_SaIS5_EEEElS5_NS0_5__ops15_Iter_less_iterEEvT_T0_SE_T1_T2_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt4pairIPKciESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_less_iterEEvT_SD_SD_SD_T0_") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/ary2.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 900000;
      case 2: return 900000;
      case 3: return 900000;
      case 4: return 900000;
      case 5: return 900000;
      case 6: return 900000;
      case 7: return 900000;
      case 8: return 900000;
      case 9: return 900000;
      case 10: return 900000;
      case 11: return 900000;
      case 12: return 900000;
      case 13: return 900000;
      case 14: return 900000;
      case 15: return 900000;
      case 16: return 900000;
      case 17: return 900000;
      case 18: return 900000;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/strcat.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 5000000;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 0;
      case 12: return 0;
      case 13: return 1;
      case 14: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/objinst.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 0;
      case 8: return 1;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 1;
      case 18: return 0;
      case 19: return 0;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 1;
      case 26: return 1;
      case 27: return 1;
      case 28: return 1;
      case 29: return 0;
      case 30: return 0;
      case 31: return 1;
      case 32: return 1;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 1;
      case 39: return 0;
      case 40: return 0;
      case 41: return 1;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1;
      case 46: return 1;
      case 47: return 1;
      case 48: return 1;
      case 49: return 0;
      case 50: return 0;
      case 51: return 1;
      case 52: return 1;
      case 53: return 1;
      case 54: return 1;
      case 55: return 1;
      case 56: return 1;
      case 57: return 1;
      case 58: return 1;
      case 59: return 0;
      case 60: return 0;
      case 61: return 1;
      case 62: return 1;
      case 63: return 1;
      case 64: return 1;
      case 65: return 1;
      case 66: return 1;
      case 67: return 1;
      case 68: return 1;
      case 69: return 0;
      case 70: return 0;
      case 71: return 1;
      case 72: return 1;
      case 73: return 1;
      case 74: return 1;
      case 75: return 1;
      case 76: return 1;
      case 77: return 1;
      case 78: return 1;
      case 79: return 0;
      case 80: return 0;
      case 81: return 1;
      case 82: return 1;
      case 83: return 1;
      case 84: return 1;
      case 85: return 1;
      case 86: return 1;
      case 87: return 1;
      case 88: return 1;
      case 89: return 0;
      case 90: return 0;
      case 91: return 1;
      case 92: return 1;
      case 93: return 1;
      case 94: return 1;
      case 95: return 1;
      case 96: return 1;
      case 97: return 1;
      case 98: return 1;
      case 99: return 0;
      case 100: return 0;
      case 101: return 1;
      case 102: return 1;
      case 103: return 1;
      case 104: return 1;
      case 105: return 0;
      case 106: return 0;
      case 107: return 1;
      case 108: return 1;
      case 109: return 1;
      case 110: return 1;
      case 111: return 1;
      case 112: return 1;
      case 113: return 1;
      case 114: return 1;
      case 115: return 0;
      case 116: return 0;
      case 117: return 1;
      case 118: return 1;
      case 119: return 1;
      case 120: return 1;
      case 121: return 1;
      case 122: return 1;
      case 123: return 1;
      case 124: return 1;
      case 125: return 0;
      case 126: return 0;
      case 127: return 1;
      case 128: return 1;
      case 129: return 1;
      case 130: return 1;
      case 131: return 1;
      case 132: return 1;
      case 133: return 1;
      case 134: return 1;
      case 135: return 0;
      case 136: return 0;
      case 137: return 1;
      case 138: return 1;
      case 139: return 1;
      case 140: return 1;
      case 141: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN6Toggle8activateEv") {
      switch(AccessId) {
      case 0: return 4;
      case 1: return 4;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9NthToggle8activateEv") {
      switch(AccessId) {
      case 0: return 7;
      case 1: return 7;
      case 2: return 7;
      case 3: return 2;
      case 4: return 2;
      case 5: return 2;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/nestedloop.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 0;
      case 7: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/hash.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 500000;
      case 2: return 500000;
      case 3: return 500000;
      case 4: return 500000;
      case 5: return 2430100;
      case 6: return 500000;
      case 7: return 10706256;
      case 8: return 10706256;
      case 9: return 500000;
      case 10: return 500000;
      case 11: return 500000;
      case 12: return 500000;
      case 13: return 500000;
      case 14: return 500000;
      case 15: return 500000;
      case 16: return 500000;
      case 17: return 500000;
      case 18: return 500000;
      case 19: return 500000;
      case 20: return 500000;
      case 21: return 2888895;
      case 22: return 500000;
      case 23: return 8022630;
      case 24: return 7942631;
      case 25: return 420001;
      case 26: return 420001;
      case 27: return 420001;
      case 28: return 420001;
      case 29: return 420001;
      case 30: return 420001;
      case 31: return 420001;
      case 32: return 500000;
      case 33: return 1;
      case 34: return 1;
      case 35: return 1;
      case 36: return 1;
      case 37: return 1;
      case 38: return 0;
      case 39: return 0;
      case 40: return 1;
      case 41: return 0;
      case 42: return 1;
      case 43: return 1;
      case 44: return 1;
      case 45: return 1572869;
      case 46: return 920001;
      case 47: return 34011;
      case 48: return 1572869;
      case 49: return 1572869;
      case 50: return 1572869;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9__gnu_cxx9hashtableISt4pairIKPKciES3_NS_4hashIS3_EESt10_Select1stIS5_E5eqstrSaIiEEC2EmRKS7_RKSA_RKSaIS5_E") {
      switch(AccessId) {
      case 0: return 5;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZNSt6vectorIPN9__gnu_cxx15_Hashtable_nodeISt4pairIKPKciEEESaIS8_EE14_M_fill_insertENS0_17__normal_iteratorIPS8_SA_EEmRKS8_") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 0;
      case 4: return 0;
      case 5: return 0;
      case 6: return 0;
      case 7: return 0;
      case 8: return 0;
      case 9: return 0;
      case 10: return 0;
      case 11: return 0;
      case 12: return 0;
      case 13: return 0;
      case 14: return 0;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 0;
      case 19: return 0;
      case 20: return 0;
      case 21: return 0;
      case 22: return 0;
      case 23: return 0;
      case 24: return 6;
      case 25: return 6;
      case 26: return 6;
      case 27: return 6;
      case 28: return 6;
      case 29: return 6;
      case 30: return 6;
      case 31: return 6;
      case 32: return 6;
      case 33: return 6;
      case 34: return 6;
      case 35: return 6;
      case 36: return 6;
      case 37: return 6;
      case 38: return 6;
      case 39: return 6;
      case 40: return 0;
      case 41: return 0;
      case 42: return 1;
      case 43: return 1;
      case 44: return 0;
      case 45: return 1;
      case 46: return 0;
      case 47: return 0;
      case 48: return 0;
      case 49: return 0;
      case 50: return 0;
      case 51: return 0;
      case 52: return 0;
      case 53: return 0;
      case 54: return 0;
      case 55: return 0;
      case 56: return 0;
      case 57: return 0;
      case 58: return 0;
      case 59: return 0;
      case 60: return 0;
      case 61: return 0;
      case 62: return 0;
      case 63: return 0;
      case 64: return 0;
      case 65: return 0;
      case 66: return 0;
      case 67: return 0;
      case 68: return 0;
      case 69: return 0;
      case 70: return 0;
      case 71: return 0;
      case 72: return 0;
      case 73: return 0;
      case 74: return 0;
      case 75: return 0;
      case 76: return 0;
      case 77: return 0;
      case 78: return 0;
      case 79: return 0;
      case 80: return 0;
      case 81: return 0;
      case 82: return 0;
      case 83: return 0;
      case 84: return 0;
      case 85: return 0;
      case 86: return 0;
      case 87: return 0;
      case 88: return 0;
      case 89: return 0;
      case 90: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9__gnu_cxx9hashtableISt4pairIKPKciES3_NS_4hashIS3_EESt10_Select1stIS5_E5eqstrSaIiEE6resizeEm") {
      switch(AccessId) {
      case 0: return 1000000;
      case 1: return 1000000;
      case 2: return 64;
      case 3: return 13;
      case 4: return 13;
      case 5: return 1572767;
      case 6: return 1572767;
      case 7: return 1572767;
      case 8: return 7747784;
      case 9: return 1572767;
      case 10: return 1572767;
      case 11: return 1572767;
      case 12: return 1572767;
      case 13: return 1572767;
      case 14: return 1572767;
      case 15: return 1572767;
      case 16: return 13;
      case 17: return 13;
      case 18: return 13;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/sumcol.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 1;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 1;
      case 9: return 0;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 0;
      case 16: return 0;
      case 17: return 0;
      case 18: return 1;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/methcall.cpp") {
    if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 1;
      case 10: return 1;
      case 11: return 1;
      case 12: return 1;
      case 13: return 1;
      case 14: return 1;
      case 15: return 1;
      case 16: return 1;
      case 17: return 999999999;
      case 18: return 999999999;
      case 19: return 1;
      case 20: return 1;
      case 21: return 1;
      case 22: return 1;
      case 23: return 1;
      case 24: return 1;
      case 25: return 0;
      case 26: return 0;
      case 27: return 1;
      case 28: return 1;
      case 29: return 999999999;
      case 30: return 999999999;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN6Toggle8activateEv") {
      switch(AccessId) {
      case 0: return 1000000000;
      case 1: return 1000000000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_ZN9NthToggle8activateEv") {
      switch(AccessId) {
      case 0: return 1000000000;
      case 1: return 1000000000;
      case 2: return 1000000000;
      case 3: return 333333333;
      case 4: return 333333333;
      case 5: return 333333333;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  } else if (ModuleName == "/home/ritter/projects/test-suite/SingleSource/Benchmarks/Shootout-C++/EH/except.cpp") {
    if (FunctionName == "_Z6blowupm") {
      switch(AccessId) {
      case 0: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z11lo_functionm") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 0;
      case 2: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "_Z11hi_functionm") {
      switch(AccessId) {
      case 0: return 100000;
      case 1: return 50000;
      case 2: return 50000;
      case 3: return 50000;
      case 4: return 50000;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else if (FunctionName == "main") {
      switch(AccessId) {
      case 0: return 0;
      case 1: return 1;
      case 2: return 1;
      case 3: return 1;
      case 4: return 1;
      case 5: return 1;
      case 6: return 1;
      case 7: return 1;
      case 8: return 0;
      case 9: return 0;
      default: assert(false && "Request for invalid AccessId!");
      }
    } else {
      assert(false && "Request for invalid FunctionName!");
    }
  }
  ++FailingHotnessLookUps;
  return 0;
}
}
